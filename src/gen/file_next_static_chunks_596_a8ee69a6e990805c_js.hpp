
#pragma once
#include "files.hpp"
namespace duckdb {
const File FILE_NEXT_STATIC_CHUNKS_596_A8EE69A6E990805C_JS = {
     // Content
     ""
     ""
     ""
     ""
     ""
     ""
     ""
     ""
     "KSxjPWlbcl07aWYoYyl7aWYocC5DLmdldFN0YXRlKCkuaXNUYWJPcGVuKHIpKXAuQy5nZXRTdGF0ZSgpLmZvY3VzVGFiKHIpO2Vsc2V7bGV0IHQ9KDAscy5JOCkoYyk7ZShlPT4oe3JlbGF0aW9uczp7Li4uZS5yZWxhdGlvbnMsW3JdOnR9fSkpLHAuQy5nZXRTdGF0ZSgpLmFkZFJlbGF0aW9uVGFiKG4pfX1lbHNle2xldCBhPSgwLGguaWkpKHQoKS5lZGl0b3JFbGVtZW50cyxvKSxpPSgwLG0uSEQpKG8scixhLG4udmlld1N0YXRlLmRpc3BsYXlOYW1lKSxzPSgwLGguWG8pKHQoKS5lZGl0b3JFbGVtZW50cyxpKTtlKGU9Pih7cmVsYXRpb25zOnsuLi5lLnJlbGF0aW9ucyxbcl06bn0sZWRpdG9yRWxlbWVudHM6c30pKSxwLkMuZ2V0U3RhdGUoKS5hZGRSZWxhdGlvblRhYihuKX19LHNob3dSZWxhdGlvbkZyb21JZDooZSxuKT0+e2xldCBhPXQoKS5yZWxhdGlvbnNbZV07dCgpLnNob3dSZWxhdGlvbihhLG4pfSxzaG93UmVsYXRpb25Gcm9tU291cmNlOmFzeW5jKG4scixpKT0+e2xldCBzPSgwLGEudUopKG4sciksYz10KCkucmVsYXRpb25zW3NdO2lmKGMpdCgpLnNob3dSZWxhdGlvbihjLGkpO2Vsc2V7bGV0IGE9KDAsby5qYikoKSxjPWF3YWl0ICgwLG8uSWspKG4scixhLHtzdGF0ZToicnVubmluZyJ9KSxsPSgwLGgucXkpKHQoKS5lZGl0b3JFbGVtZW50cyxpKSx1PSgwLG0uSEQpKGkscyxsLGMudmlld1N0YXRlLmRpc3BsYXlOYW1lKSxkPSgwLGguWG8pKHQoKS5lZGl0b3JFbGVtZW50cyx1KTtlKGU9Pih7cmVsYXRpb25zOnsuLi5lLnJlbGF0aW9ucyxbc106Y30sZWRpdG9yRWxlbWVudHM6ZH0pKSxwLkMuZ2V0U3RhdGUoKS5hZGRSZWxhdGlvblRhYihjKTtsZXQgZj1hd2FpdCAoMCxvLkJOKShjKTtlKGU9Pih7cmVsYXRpb25zOnsuLi5lLnJlbGF0aW9ucyxbc106Zn19KSl9fSx1cGRhdGVSZWxhdGlvbkRhdGFXaXRoUGFyYW1zOmFzeW5jKG4sYSk9PntsZXR7cmVsYXRpb25zOnJ9PXQoKSxpPXJbbl0scz0oMCxvLlU4KShpKTtlKGU9Pih7cmVsYXRpb25zOnsuLi5lLnJlbGF0aW9ucyxbbl06c319KSk7bGV0IGM9YXdhaXQgKDAsby5QdykocyxhKSxsPWF3YWl0ICgwLG8uQk4pKGMpO2UoZT0+KHtyZWxhdGlvbnM6ey4uLmUucmVsYXRpb25zLFtuXTpsfX0pKX0sdXBkYXRlUmVsYXRpb25CYXNlUXVlcnk6KHQsbik9PntlKGU9Pih7cmVsYXRpb25zOnsuLi5lLnJlbGF0aW9ucyxbdF06ey4uLmUucmVsYXRpb25zW3RdLHF1ZXJ5OnsuLi5lLnJlbGF0aW9uc1t0XS5xdWVyeSxiYXNlUXVlcnk6bn19fX0pKX0sc2V0UmVsYXRpb25WaWV3U3RhdGU6KHQsbik9PntlKGU9Pih7cmVsYXRpb25zOnsuLi5lLnJlbGF0aW9ucyxbdF06ey4uLmUucmVsYXRpb25zW3RdLHZpZXdTdGF0ZTpufX19KSl9LGdldFJlbGF0aW9uVmlld1N0YXRlOmU9PnQoKS5yZWxhdGlvbnNbZV0udmlld1N0YXRlLHVwZGF0ZVJlbGF0aW9uVmlld1N0YXRlOihuLGEsbyk9PntsZXQgcj0oMCxzLkk4KSh0KCkucmVsYXRpb25zW25dLnZpZXdTdGF0ZSksaT10KCkuZWRpdG9yRWxlbWVudHM7aWYoYS5kaXNwbGF5TmFtZSl7aWYocC5DLmdldFN0YXRlKCkucmVuYW1lVGFiKG4sYS5kaXNwbGF5TmFtZSksIW8pdGhyb3cgRXJyb3IoIlBhdGggbXVzdCBiZSBwcm92aWRlZCBpZiBkaXNwbGF5TmFtZSBpcyB1cGRhdGVkIik7bGV0IGU9KDAsaC5xeSkoaSxvKSx0PSgwLG0uUDYpKG8sYS5kaXNwbGF5TmFtZSxlKTtpPSgwLGguWG8pKGksdCl9aWYoKDAscy5aXykocixhKSxlKGU9Pih7cmVsYXRpb25zOnsuLi5lLnJlbGF0aW9ucyxbbl06ey4uLmUucmVsYXRpb25zW25dLHZpZXdTdGF0ZTpyfX0sZWRpdG9yRWxlbWVudHM6aX0pKSxhLnNlbGVjdGVkVmlldyl7bGV0IGU9ey4uLnQoKS5yZWxhdGlvbnNbbl0ucXVlcnkudmlld1BhcmFtZXRlcnMsdHlwZTphLnNlbGVjdGVkVmlld307dCgpLnVwZGF0ZVJlbGF0aW9uRGF0YVdpdGhQYXJhbXMobixlKX19LGRlbGV0ZVJlbGF0aW9uOihuLGEpPT57bGV0e3JlbGF0aW9uczpvfT10KCkscj17Li4ub307ZGVsZXRlIHJbbl0scC5DLmdldFN0YXRlKCkuaXNUYWJPcGVuKG4pJiZwLkMuZ2V0U3RhdGUoKS5yZW1vdmVUYWIobik7bGV0IGk9KDAsbS54RSkoYSk7ZSh7cmVsYXRpb25zOnIsZWRpdG9yRWxlbWVudHM6KDAsaC5YbykodCgpLmVkaXRvckVsZW1lbnRzLGkpfSl9LGNsb3NlVGFiOm49PntsZXR7c2NoZW1hczphLGRhdGFiYXNlczpvLHJlbGF0aW9uczpyLGRhc2hib2FyZHM6aX09dCgpO2lmKGFbbl0pe2xldCB0PXsuLi5hfTtkZWxldGUgdFtuXSxlKHtzY2hlbWFzOnR9KX1lbHNlIGlmKG9bbl0pe2xldCB0PXsuLi5vfTtkZWxldGUgdFtuXSxlKHtkYXRhYmFzZXM6dH0pfWVsc2UgcltuXT9lKHtyZWxhdGlvbnM6ey4uLnJ9fSk6aVtuXSYmZSh7ZGFzaGJvYXJkczp7Li4uaX19KX0sdXBkYXRlRWRpdG9yRWxlbWVudHM6KG4sYSk9PntsZXQgbz1bLi4udCgpLmVkaXRvckVsZW1lbnRzXSxyPSgwLGgudFYpKG8sbixhKTtlKCgpPT4oe2VkaXRvckVsZW1lbnRzOnJ9KSl9LGFkZEVkaXRvckVsZW1lbnQ6KG4sYSk9PntsZXQgbz1bLi4udCgpLmVkaXRvckVsZW1lbnRzXSxyPSgwLGguZ3opKG8sbixhKTtlKCgpPT4oe2VkaXRvckVsZW1lbnRzOnJ9KSl9LHJlbW92ZUVkaXRvckVsZW1lbnQ6bj0+e2xldCBhPVsuLi50KCkuZWRpdG9yRWxlbWVudHNdLG89ey4uLnQoKS5yZWxhdGlvbnN9LHI9ey4uLnQoKS5kYXNoYm9hcmRzfSxpPSgwLGgucXkpKGEsbik7aWYoIWkpdGhyb3cgRXJyb3IoIkVsZW1lbnQgdG8gcmVtb3ZlIG5vdCBmb3VuZCIpOygwLGguUVIpKFtpXSwoZSx0KT0+eyJkYXNoYm9hcmQiPT09ZS50eXBlPyhwLkMuZ2V0U3RhdGUoKS5pc1RhYk9wZW4oZS5pZCkmJnAuQy5nZXRTdGF0ZSgpLnJlbW92ZVRhYihlLmlkKSxkZWxldGUgcltlLmlkXSk6InJlbGF0aW9uIj09PWUudHlwZSYmKHAuQy5nZXRTdGF0ZSgpLmlzVGFiT3BlbihlLmlkKSYmcC5DLmdldFN0YXRlKCkucmVtb3ZlVGFiKGUuaWQpLGRlbGV0ZSBvW2UuaWRdKX0pO2xldCBzPSgwLGguWkYpKGEsbik7ZSgoKT0+KHtlZGl0b3JFbGVtZW50czpzLHJlbGF0aW9uczpvLGRhc2hib2FyZHM6cn0pKX0sYXBwbHlFZGl0b3JFbGVtZW50c0FjdGlvbnM6bj0+e2xldCBhPVsuLi50KCkuZWRpdG9yRWxlbWVudHNdLG89KDAsaC4kSSkoYSxuKTtlKCgpPT4oe2VkaXRvckVsZW1lbnRzOm99KSl9LHJlc2V0RWRpdG9yRWxlbWVudHM6KCk9PntlKCgpPT4oe2VkaXRvckVsZW1lbnRzOltdfSkpfSxtYW51YWxQZXJzaXN0TW9kZWw6KCk9PntlKCgpPT4oe30pKX19KSx7bmFtZTp5LlNnLnRhYmxlTmFtZSxzdG9yYWdlOigwLGMuRkwpKCgpPT5sLmpCKSxwYXJ0aWFsaXplOmU9PntsZXQgdD17Li4uZX07cmV0dXJuIGRlbGV0ZSB0LmxheW91dE1vZGVsLHR9LG9uUmVoeWRyYXRlU3RvcmFnZTplPT5mdW5jdGlvbihlLHQpe2lmKHZvaWQgMD09PWUpcmV0dXJuIHAuQy5nZXRTdGF0ZSgpLmtlZXBUYWJzT2ZJZHMoW10pLGIuZ2V0U3RhdGUoKS5zZXRIeWRyYXRlZCghMCksY29uc29sZS5sb2coIlN0YXRlIHdhcyB1bmRlZmluZWQsIHNldHRpbmcgaHlkcmF0ZWQgdG8gdHJ1ZSIpLGc7Y29uc29sZS5sb2coIlN0YXRlOiIsZSk7bGV0IG49W107aWYoZS5yZWxhdGlvbnMpZm9yKGxldCB0IGluIGUucmVsYXRpb25zKW4ucHVzaCh0KTtpZihlLnNjaGVtYXMpZm9yKGxldCB0IGluIGUuc2NoZW1hcyluLnB1c2godCk7aWYoZS5kYXRhYmFzZXMpZm9yKGxldCB0IGluIGUuZGF0YWJhc2VzKW4ucHVzaCh0KTtpZihlLmRhc2hib2FyZHMpZm9yKGxldCB0IGluIGUuZGFzaGJvYXJkcyluLnB1c2godCk7cC5DLmdldFN0YXRlKCkua2VlcFRhYnNPZklkcyhuKSxiLmdldFN0YXRlKCkuc2V0SHlkcmF0ZWQoITApfX0pKX0sMTYyNDQ6ZnVuY3Rpb24oZSx0LG4pe24uZCh0LHtDdzpmdW5jdGlvbigpe3JldHVybiBmfSxHXzpmdW5jdGlvbigpe3JldHVybiBzfSxHYjpmdW5jdGlvbigpe3JldHVybiBpfSxJSzpmdW5jdGlvbigpe3JldHVybiBkfSxUcTpmdW5jdGlvbigpe3JldHVybiBjfSxhaDpmdW5jdGlvbigpe3JldHVybiBtfSxrTzpmdW5jdGlvbigpe3JldHVybiB1fSxsMDpmdW5jdGlvbigpe3JldHVybiBofSxtaDpmdW5jdGlvbigpe3JldHVybiBsfX0pO3ZhciBhPW4oNTMzMTQpLG89big0MDQ0MCkscj1uKDc1NjY4KTtmdW5jdGlvbiBpKCl7cmV0dXJuIGEuTW9kZWwuZnJvbUpzb24oe2dsb2JhbDp7c3BsaXR0ZXJTaXplOjEsc3BsaXR0ZXJFeHRyYTo4LGVuYWJsZVJvdGF0ZUJvcmRlckljb25zOiEwLGVuYWJsZUVkZ2VEb2NrOiExLHRhYkljb246InJlbGF0aW9uIix0YWJTZXRUYWJTdHJpcEhlaWdodDo0MX0sbGF5b3V0Ont0eXBlOiJyb3ciLGNoaWxkcmVuOlt7dHlwZToidGFic2V0IixoZWFkZXJIZWlnaHQ6MTAwLGNoaWxkcmVuOltdfV19fSl9ZnVuY3Rpb24gcyhlKXtsZXQgdD1vLlJ4LmdldFN0YXRlKCksbj1yLkMuZ2V0U3RhdGUoKTtyZXR1cm4iRmxleExheW91dF9EZWxldGVUYWIiPT09ZS50eXBlP3QuY2xvc2VUYWIoZS5kYXRhLm5vZGUpOiJGbGV4TGF5b3V0X1NlbGVjdFRhYiI9PT1lLnR5cGU/bi5zZXRTZWxlY3RlZFRhYklkKGUuZGF0YS50YWJOb2RlLmlkKTpuLnBlcnNpc3RTdGF0ZSgpLGV9ZnVuY3Rpb24gYyhlLHQpe2UuZG9BY3Rpb24oYS5BY3Rpb25zLmRlbGV0ZVRhYih0KSl9ZnVuY3Rpb24gbChlLHQsbil7ZS5kb0FjdGlvbihhLkFjdGlvbnMucmVuYW1lVGFiKHQsbikpfWZ1bmN0aW9uIHUoZSx0KXtlLmRvQWN0aW9uKGEuQWN0aW9ucy5zZWxlY3RUYWIodCkpfWZ1bmN0aW9uIGQoZSx0KXtwKGUsdC5pZCx0LnZpZXdTdGF0ZS5kaXNwbGF5TmFtZSwiUmVsYXRpb25Db21wb25lbnQiLHtyZWxhdGlvbklkOnQuaWR9KX1mdW5jdGlvbiBmKGUsdCxuKXtwKGUsdCxuLm5hbWUsIkRhdGFiYXNlQ29tcG9uZW50Iix7ZGF0YWJhc2VJZDp0fSl9ZnVuY3Rpb24gaChlLHQpe2xldCBuPXQuaWQ7cChlLG4sdC52aWV3U3RhdGUuZGlzcGxheU5hbWUsIkRhc2hib2FyZENvbXBvbmVudCIse2Rhc2hib2FyZElkOm59KX1mdW5jdGlvbiBtKGUsdCxuKXtwKGUsdCxuLm5hbWUsIlNjaGVtYUNvbXBvbmVudCIse3NjaGVtYUlkOnR9KX1mdW5jdGlvbiBwKGUsdCxuLG8scil7bGV0IGk7bGV0IHM9KGUudmlzaXROb2RlcyhlPT57aXx8InRhYnNldCIhPT1lLmdldFR5cGUoKXx8KGk9ZS5nZXRJZCgpKX0pLGl8fGNvbnNvbGUuZXJyb3IoIk5vIHRhYnNldCBmb3VuZCIpLGkpO2lmKCFzKXRocm93IEVycm9yKCJObyB0YWJzZXQgZm91bmQiKTtlLmRvQWN0aW9uKGEuQWN0aW9ucy5hZGROb2RlKHt0eXBlOiJ0YWIiLGVuYWJsZVJlbmFtZTohMSxuYW1lOm4saWQ6dCxjb21wb25lbnQ6byxjb25maWc6cn0scyxhLkRvY2tMb2NhdGlvbi5DRU5URVIsLTEpKX19fV0pOw==",    //
     72620, //
     "application/javascript", //
     "/_next/static/chunks/596-a8ee69a6e990805c.js/", //
     
};
}
