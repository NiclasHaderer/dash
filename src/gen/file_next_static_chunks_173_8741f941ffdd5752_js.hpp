
#pragma once
#include "files.hpp"
namespace duckdb {
const File FILE_NEXT_STATIC_CHUNKS_173_8741F941FFDD5752_JS = {
     // Content
     ""
     ""
     ""
     ""
     ""
     ""
     ""
     ""
     ""
     "ZhZGUtaW4tMCBkYXRhLVtzdGF0ZT1jbG9zZWRdOnpvb20tb3V0LTk1IGRhdGEtW3N0YXRlPW9wZW5dOnpvb20taW4tOTUgZGF0YS1bc2lkZT1ib3R0b21dOnNsaWRlLWluLWZyb20tdG9wLTIgZGF0YS1bc2lkZT1sZWZ0XTpzbGlkZS1pbi1mcm9tLXJpZ2h0LTIgZGF0YS1bc2lkZT1yaWdodF06c2xpZGUtaW4tZnJvbS1sZWZ0LTIgZGF0YS1bc2lkZT10b3BdOnNsaWRlLWluLWZyb20tYm90dG9tLTIiLCJwb3BwZXIiPT09aSYmImRhdGEtW3NpZGU9Ym90dG9tXTp0cmFuc2xhdGUteS0xIGRhdGEtW3NpZGU9bGVmdF06LXRyYW5zbGF0ZS14LTEgZGF0YS1bc2lkZT1yaWdodF06dHJhbnNsYXRlLXgtMSBkYXRhLVtzaWRlPXRvcF06LXRyYW5zbGF0ZS15LTEiLGEpLHBvc2l0aW9uOmksLi4ucyxjaGlsZHJlbjpbKDAsbi5qc3gpKG0se30pLCgwLG4uanN4KShyLkxNLHtjbGFzc05hbWU6KDAsbC5jbikoInAtMSIsInBvcHBlciI9PT1pJiYiaC1bdmFyKC0tcmFkaXgtc2VsZWN0LXRyaWdnZXItaGVpZ2h0KV0gdy1mdWxsIG1pbi13LVt2YXIoLS1yYWRpeC1zZWxlY3QtdHJpZ2dlci13aWR0aCldIiksY2hpbGRyZW46b30pLCgwLG4uanN4KShwLHt9KV19KX0pfSk7eS5kaXNwbGF5TmFtZT1yLlVDLmRpc3BsYXlOYW1lO2xldCBiPW8uZm9yd2FyZFJlZigoZSx0KT0+e2xldHtjbGFzc05hbWU6YSwuLi5vfT1lO3JldHVybigwLG4uanN4KShyLkpVLHtyZWY6dCxjbGFzc05hbWU6KDAsbC5jbikoInB4LTIgcHktMS41IHRleHQtc20gZm9udC1zZW1pYm9sZCIsYSksLi4ub30pfSk7Yi5kaXNwbGF5TmFtZT1yLkpVLmRpc3BsYXlOYW1lO2xldCBnPW8uZm9yd2FyZFJlZigoZSx0KT0+e2xldHtjbGFzc05hbWU6YSxjaGlsZHJlbjpvLC4uLml9PWU7cmV0dXJuKDAsbi5qc3hzKShyLnE3LHtyZWY6dCxjbGFzc05hbWU6KDAsbC5jbikoInJlbGF0aXZlIGZsZXggdy1mdWxsIGN1cnNvci1kZWZhdWx0IHNlbGVjdC1ub25lIGl0ZW1zLWNlbnRlciByb3VuZGVkLXNtIHB5LTEuNSBwbC0yIHByLTggdGV4dC1zbSBvdXRsaW5lLW5vbmUgZm9jdXM6YmctYWNjZW50IGZvY3VzOnRleHQtYWNjZW50LWZvcmVncm91bmQgZGF0YS1bZGlzYWJsZWRdOnBvaW50ZXItZXZlbnRzLW5vbmUgZGF0YS1bZGlzYWJsZWRdOm9wYWNpdHktNTAiLGEpLC4uLmksY2hpbGRyZW46WygwLG4uanN4KSgic3BhbiIse2NsYXNzTmFtZToiYWJzb2x1dGUgcmlnaHQtMiBmbGV4IGgtMy41IHctMy41IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciIsY2hpbGRyZW46KDAsbi5qc3gpKHIuVkYse2NoaWxkcmVuOigwLG4uanN4KShjLkEse2NsYXNzTmFtZToiaC00IHctNCJ9KX0pfSksKDAsbi5qc3gpKHIucDQse2NoaWxkcmVuOm99KV19KX0pO2cuZGlzcGxheU5hbWU9ci5xNy5kaXNwbGF5TmFtZSxvLmZvcndhcmRSZWYoKGUsdCk9PntsZXR7Y2xhc3NOYW1lOmEsLi4ub309ZTtyZXR1cm4oMCxuLmpzeCkoci53dix7cmVmOnQsY2xhc3NOYW1lOigwLGwuY24pKCItbXgtMSBteS0xIGgtcHggYmctbXV0ZWQiLGEpLC4uLm99KX0pLmRpc3BsYXlOYW1lPXIud3YuZGlzcGxheU5hbWV9LDk5ODY3OihlLHQsYSk9PnthLmQodCx7JDooKT0+bCxyOigpPT5jfSk7dmFyIG49YSgxNDc5Niksbz1hKDgyNTI4KSxyPWEoMjY1OTEpLGk9YSgyMzkxOCkscz1hKDgwNTg0KTtsZXQgYz0oMCxpLkYpKCJpbmxpbmUtZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgZ2FwLTIgd2hpdGVzcGFjZS1ub3dyYXAgcm91bmRlZC1tZCB0ZXh0LXNtIGZvbnQtbWVkaXVtIHRyYW5zaXRpb24tY29sb3JzIGZvY3VzLXZpc2libGU6b3V0bGluZS1ub25lIGZvY3VzLXZpc2libGU6cmluZy0xIGZvY3VzLXZpc2libGU6cmluZy1yaW5nIGRpc2FibGVkOnBvaW50ZXItZXZlbnRzLW5vbmUgZGlzYWJsZWQ6b3BhY2l0eS01MCBbJl9zdmddOnBvaW50ZXItZXZlbnRzLW5vbmUgWyZfc3ZnXTpzaXplLTQgWyZfc3ZnXTpzaHJpbmstMCIse3ZhcmlhbnRzOnt2YXJpYW50OntkZWZhdWx0OiJiZy1wcmltYXJ5IHRleHQtcHJpbWFyeS1mb3JlZ3JvdW5kIHNoYWRvdyBob3ZlcjpiZy1wcmltYXJ5LzkwIixkZXN0cnVjdGl2ZToiYmctZGVzdHJ1Y3RpdmUgdGV4dC1kZXN0cnVjdGl2ZS1mb3JlZ3JvdW5kIHNoYWRvdy1zbSBob3ZlcjpiZy1kZXN0cnVjdGl2ZS85MCIsb3V0bGluZToiYm9yZGVyIGJvcmRlci1pbnB1dCBiZy1iYWNrZ3JvdW5kIHNoYWRvdy1zbSBob3ZlcjpiZy1hY2NlbnQgaG92ZXI6dGV4dC1hY2NlbnQtZm9yZWdyb3VuZCIsc2Vjb25kYXJ5OiJiZy1zZWNvbmRhcnkgdGV4dC1zZWNvbmRhcnktZm9yZWdyb3VuZCBzaGFkb3ctc20gaG92ZXI6Ymctc2Vjb25kYXJ5LzgwIixnaG9zdDoiaG92ZXI6YmctYWNjZW50IGhvdmVyOnRleHQtYWNjZW50LWZvcmVncm91bmQiLGxpbms6InRleHQtcHJpbWFyeSB1bmRlcmxpbmUtb2Zmc2V0LTQgaG92ZXI6dW5kZXJsaW5lIn0sc2l6ZTp7ZGVmYXVsdDoiaC05IHB4LTQgcHktMiIsc206ImgtOCByb3VuZGVkLW1kIHB4LTMgdGV4dC14cyIsbGc6ImgtMTAgcm91bmRlZC1tZCBweC04IixpY29uOiJoLTkgdy05In19LGRlZmF1bHRWYXJpYW50czp7dmFyaWFudDoiZGVmYXVsdCIsc2l6ZToiZGVmYXVsdCJ9fSksbD1vLmZvcndhcmRSZWYoKGUsdCk9PntsZXR7Y2xhc3NOYW1lOmEsdmFyaWFudDpvLHNpemU6aSxhc0NoaWxkOmw9ITEsLi4uZH09ZSx1PWw/ci5EWDoiYnV0dG9uIjtyZXR1cm4oMCxuLmpzeCkodSx7Y2xhc3NOYW1lOigwLHMuY24pKGMoe3ZhcmlhbnQ6byxzaXplOmksY2xhc3NOYW1lOmF9KSkscmVmOnQsLi4uZH0pfSk7bC5kaXNwbGF5TmFtZT0iQnV0dG9uIn19XSk7",    //
     77444, //
     "application/javascript", //
     "/_next/static/chunks/173-8741f941ffdd5752.js/", //
     
};
}
