
#pragma once
#include "files.hpp"
namespace duckdb {
const File FILE_NEXT_STATIC_CHUNKS_301_644CEDF4BE370900_JS = {
     // Content
     ""use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[301],{63906:function(e,t,n){n.d(t,{tx:function(){return i},G4:function(){return o},HD:function(){return r},xE:function(){return l},P6:function(){return c}});var a=n(23141);function o(e,t,n){return s(e,"",{id:(0,a.w)(),name:n||"New Folder",type:"folder",children:[]},t)}function r(e,t,n,a){return s(e,t,{id:t,name:a||"New Relation",type:"relation",children:null},n)}function i(e,t,n,a){return s(e,"",{id:t,name:a||"New Dashboard",type:"dashboard",children:null},n)}function s(e,t,n,a){let o=[];if(a){let t={type:"update",id_path:e,node:{...a,expanded:!0}};o.push(t)}return o.push({type:"add",id_path:e,node:n}),o}function c(e,t,n){return[{type:"update",id_path:e,node:{...n,name:t}}]}function l(e){return[{type:"remove",id_path:e}]}},31943:function(e,t,n){n.d(t,{$I:function(){return r},IJ:function(){return i},QR:function(){return c},Xo:function(){return o},ZF:function(){return h},gz:function(){return f},ii:function(){return l},qy:function(){return s},tV:function(){return u}});var a=n(38813);function o(e,t){return r([...e],t)}function r(e,t){return t.reduce((e,t)=>(function(e,t){switch(t.type){case"add":return f(e,t.id_path,t.node);case"update":return u(e,t.id_path,t.node);case"partial_update":var n,o;return n=t.id_path,o=t.node,d(e,n,function(e){let t=(0,a.I8)(e);return(0,a.Z_)(t,o),t});case"remove":return h(e,t.id_path);case"move":return function(e,t,n){let a=s(e,t);return a?f(h(e,t),n,a):e}(e,t.id_path,t.target_id_path)}})(e,t),e)}function i(e,t){return t.map(t=>s(e,t))}function s(e,t){if(0===t.length)return;let[n,...a]=t;for(let t of e)if(t.id===n){if(0===a.length)return t;if(t.children)return s(t.children,a);break}}function c(e,t){e.forEach(e=>(function e(n,a){t(n,a),n.children&&n.children.forEach(t=>e(t,[...a,t.id]))})(e,[e.id]))}function l(e,t){if(0!==t.length)return s(e,t.slice(0,-1))}function u(e,t,n){return d(e,t,()=>n)}function d(e,t,n){return 0===t.length?e:e.map(e=>{if(e.id===t[0]){if(1===t.length)return n(e);if(e.children)return{...e,children:u(e.children,t.slice(1),n(e))}}return e})}function f(e,t,n){return 0===t.length?[...e,n]:e.map(e=>{if(e.id===t[0]){if(1===t.length){let t=e.children||[];return{...e,children:[...t,n]}}if(e.children)return{...e,children:f(e.children,t.slice(1),n)}}return e})}function h(e,t){if(0===t.length)return e;let n=e.map(e=>e.id===t[0]&&t.length>1&&e.children?{...e,children:h(e.children,t.slice(1))}:e);return 1===t.length?n.filter(e=>e.id!==t[0]):n}},98042:function(e,t,n){n.d(t,{q:function(){return s}});var a=n(46499),o=n(10331),r=n(11933),i=n(4908);function s(e){let{textToCopy:t,className:n,size:s=14}=e,[c,l]=o.useState(!1),u=async e=>{e.preventDefault(),e.stopPropagation(),await navigator.clipboard.writeText(t),l(!0),setTimeout(()=>l(!1),3e3)};return(0,a.jsx)("button",{onClick:u,className:"cursor-pointer ".concat(n),children:c?(0,a.jsx)(r.Z,{className:"hover:text-primary text-muted-foreground",size:s}):(0,a.jsx)(i.Z,{className:"hover:text-primary text-muted-foreground",size:s})})}},69808:function(e,t,n){n.d(t,{d:function(){return c},z:function(){return l}});var a=n(46499),o=n(10331),r=n(63677),i=n(96579),s=n(10296);let c=(0,i.j)("inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",{variants:{variant:{default:"bg-primary text-primary-foreground shadow hover:bg-primary/90",destructive:"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",outline:"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",secondary:"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",ghost:"hover:bg-accent hover:text-accent-foreground",link:"text-primary underline-offset-4 hover:underline"},size:{default:"h-9 px-4 py-2",sm:"h-8 rounded-md px-3 text-xs",lg:"h-10 rounded-md px-8",icon:"h-9 w-9"}},defaultVariants:{variant:"default",size:"default"}}),l=o.forwardRef((e,t)=>{let{className:n,variant:o,size:i,asChild:l=!1,...u}=e,d=l?r.g7:"button";return(0,a.jsx)(d,{className:(0,s.cn)(c({variant:o,size:i,className:n})),ref:t,...u})});l.displayName="Button"},6467:function(e,t,n){n.d(t,{W4:function(){return d},Zo:function(){return y},dp:function(){return m},h_:function(){return p},qu:function(){return f},uP:function(){return b},xV:function(){return u},xx:function(){return h}});var a=n(46499),o=n(10331),r=n(42788),i=n(44058),s=n(11933),c=n(69209),l=n(10296);let u=r.fC,d=r.xz;r.ZA,r.Uv;let f=r.Tr;r.Ee;let h=o.forwardRef((e,t)=>{let{className:n,inset:o,children:s,...c}=e;return(0,a.jsxs)(r.fF,{ref:t,className:(0,l.cn)("flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",o&&"pl-8",n),...c,children:[s,(0,a.jsx)(i.Z,{className:"ml-auto h-4 w-4"})]})});h.displayName=r.fF.displayName;let m=o.forwardRef((e,t)=>{let{className:n,...o}=e;return(0,a.jsx)(r.tu,{ref:t,className:(0,l.cn)("z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",n),...o})});m.displayName=r.tu.displayName;let p=o.forwardRef((e,t)=>{let{className:n,...o}=e;return(0,a.jsx)(r.Uv,{children:(0,a.jsx)(r.VY,{ref:t,className:(0,l.cn)("z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",n),...o})})});p.displayName=r.VY.displayName;let y=o.forwardRef((e,t)=>{let{className:n,inset:o,...i}=e;return(0,a.jsx)(r.ck,{ref:t,className:(0,l.cn)("relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",o&&"pl-8",n),...i})});y.displayName=r.ck.displayName,o.forwardRef((e,t)=>{let{className:n,children:o,checked:i,...c}=e;return(0,a.jsxs)(r.oC,{ref:t,className:(0,l.cn)("relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",n),checked:i,...c,children:[(0,a.jsx)("span",{className:"absolute left-2 flex h-3.5 w-3.5 items-center justify-center",children:(0,a.jsx)(r.wU,{children:(0,a.jsx)(s.Z,{className:"h-4 w-4"})})}),o]})}).displayName=r.oC.displayName,o.forwardRef((e,t)=>{let{className:n,children:o,...i}=e;return(0,a.jsxs)(r.Rk,{ref:t,className:(0,l.cn)("relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",n),...i,children:[(0,a.jsx)("span",{className:"absolute left-2 flex h-3.5 w-3.5 items-center justify-center",children:(0,a.jsx)(r.wU,{children:(0,a.jsx)(c.Z,{className:"h-4 w-4 fill-current"})})}),o]})}).displayName=r.Rk.displayName,o.forwardRef((e,t)=>{let{className:n,inset:o,...i}=e;return(0,a.jsx)(r.__,{ref:t,className:(0,l.cn)("px-2 py-1.5 text-sm font-semibold text-foreground",o&&"pl-8",n),...i})}).displayName=r.__.displayName;let b=o.forwardRef((e,t)=>{let{className:n,...o}=e;return(0,a.jsx)(r.Z0,{ref:t,className:(0,l.cn)("-mx-1 my-1 h-px bg-border",n),...o})});b.displayName=r.Z0.displayName},40940:function(e,t,n){n.d(t,{$N:function(){return m},Be:function(){return p},Vq:function(){return c},cN:function(){return h},cZ:function(){return d},fK:function(){return f}});var a=n(46499),o=n(10331),r=n(78627),i=n(58371),s=n(10296);let c=r.fC;r.xz;let l=r.h_;r.x8;let u=o.forwardRef((e,t)=>{let{className:n,...o}=e;return(0,a.jsx)(r.aV,{ref:t,className:(0,s.cn)("fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",n),...o})});u.displayName=r.aV.displayName;let d=o.forwardRef((e,t)=>{let{className:n,children:o,...c}=e;return(0,a.jsxs)(l,{children:[(0,a.jsx)(u,{}),(0,a.jsxs)(r.VY,{ref:t,className:(0,s.cn)("fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",n),...c,children:[o,(0,a.jsxs)(r.x8,{className:"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground",children:[(0,a.jsx)(i.Z,{className:"h-4 w-4"}),(0,a.jsx)("span",{className:"sr-only",children:"Close"})]})]})]})});d.displayName=r.VY.displayName;let f=e=>{let{className:t,...n}=e;return(0,a.jsx)("div",{className:(0,s.cn)("flex flex-col space-y-1.5 text-center sm:text-left",t),...n})};f.displayName="DialogHeader";let h=e=>{let{className:t,...n}=e;return(0,a.jsx)("div",{className:(0,s.cn)("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",t),...n})};h.displayName="DialogFooter";let m=o.forwardRef((e,t)=>{let{className:n,...o}=e;return(0,a.jsx)(r.Dx,{ref:t,className:(0,s.cn)("text-lg font-semibold leading-none tracking-tight",n),...o})});m.displayName=r.Dx.displayName;let p=o.forwardRef((e,t)=>{let{className:n,...o}=e;return(0,a.jsx)(r.dk,{ref:t,className:(0,s.cn)("text-sm text-muted-foreground",n),...o})});p.displayName=r.dk.displayName},39890:function(e,t,n){n.d(t,{I:function(){return i}});var a=n(46499),o=n(10331),r=n(10296);let i=o.forwardRef((e,t)=>{let{className:n,type:o,...i}=e;return(0,a.jsx)("input",{type:o,className:(0,r.cn)("flex h-8 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",n),ref:t,...i})});i.displayName="Input"},24975:function(e,t,n){n.d(t,{Bw:function(){return y},DI:function(){return d},Ph:function(){return u},Ql:function(){return g},i4:function(){return h},ki:function(){return f},n5:function(){return b}});var a=n(46499),o=n(10331),r=n(24140),i=n(91864),s=n(87609),c=n(11933),l=n(10296);let u=r.fC,d=r.ZA,f=r.B4,h=o.forwardRef((e,t)=>{let{className:n,children:o,...s}=e;return(0,a.jsxs)(r.xz,{ref:t,className:(0,l.cn)("flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",n),...s,children:[o,(0,a.jsx)(r.JO,{asChild:!0,children:(0,a.jsx)(i.Z,{className:"h-4 w-4 opacity-50"})})]})});h.displayName=r.xz.displayName;let m=o.forwardRef((e,t)=>{let{className:n,...o}=e;return(0,a.jsx)(r.u_,{ref:t,className:(0,l.cn)("flex cursor-default items-center justify-center py-1",n),...o,children:(0,a.jsx)(s.Z,{className:"h-4 w-4"})})});m.displayName=r.u_.displayName;let p=o.forwardRef((e,t)=>{let{className:n,...o}=e;return(0,a.jsx)(r.$G,{ref:t,className:(0,l.cn)("flex cursor-default items-center justify-center py-1",n),...o,children:(0,a.jsx)(i.Z,{className:"h-4 w-4"})})});p.displayName=r.$G.displayName;let y=o.forwardRef((e,t)=>{let{className:n,children:o,position:i="popper",...s}=e;return(0,a.jsx)(r.h_,{children:(0,a.jsxs)(r.VY,{ref:t,className:(0,l.cn)("relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2","popper"===i&&"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",n),position:i,...s,children:[(0,a.jsx)(m,{}),(0,a.jsx)(r.l_,{className:(0,l.cn)("p-1","popper"===i&&"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"),children:o}),(0,a.jsx)(p,{})]})})});y.displayName=r.VY.displayName;let b=o.forwardRef((e,t)=>{let{className:n,...o}=e;return(0,a.jsx)(r.__,{ref:t,className:(0,l.cn)("px-2 py-1.5 text-sm font-semibold",n),...o})});b.displayName=r.__.displayName;let g=o.forwardRef((e,t)=>{let{className:n,children:o,...i}=e;return(0,a.jsxs)(r.ck,{ref:t,className:(0,l.cn)("relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",n),...i,children:[(0,a.jsx)("span",{className:"absolute right-2 flex h-3.5 w-3.5 items-center justify-center",children:(0,a.jsx)(r.wU,{children:(0,a.jsx)(c.Z,{className:"h-4 w-4"})})}),(0,a.jsx)(r.eT,{children:o})]})});g.displayName=r.ck.displayName,o.forwardRef((e,t)=>{let{className:n,...o}=e;return(0,a.jsx)(r.Z0,{ref:t,className:(0,l.cn)("-mx-1 my-1 h-px bg-muted",n),...o})}).displayName=r.Z0.displayName},10296:function(e,t,n){n.d(t,{cn:function(){return r}});var a=n(26327),o=n(36431);function r(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return(0,o.m6)((0,a.W)(t))}},24715:function(e,t,n){n.d(t,{$:function(){return c},E:function(){return s}});var a=n(72369),o=n(75382),r=n(23141),i=n(85718);function s(e){return{...(0,o.AK)(e)}}function c(){let e=(0,r.w)(),t="SELECT 'Hello, World! \uD83E\uDD86' AS message;",n=(0,a.jb)(),s={connectionId:i.SS,id:e,name:"New Query",source:{type:"query",baseQuery:t,id:e,name:"New Query"}},c=(0,a.qC)(s,n,t);return{...s,query:c,viewState:(0,o.y6)("New Data Element",void 0,!0),executionState:{state:"not-started"}}}},56283:function(e,t,n){function a(e,t){return"database-".concat(e,"-").concat(t)}function o(e){return[e.connectionId,e.name]}n.d(t,{_:function(){return o},p:function(){return a}})},72369:function(e,t,n){n.d(t,{BN:function(){return b},jb:function(){return s},Ae:function(){return l},qC:function(){return h},We:function(){return c},Ik:function(){return u},U8:function(){return m},Pw:function(){return p}});var a=n(52914),o=n(75382),r=n(11764),i=n(99185);function s(){return{type:"table",table:{offset:0,limit:100,sorting:{}},chart:{}}}function c(e){if("table"===e.type)return{...e,type:"table",table:{...e.table,limit:e.table.limit}};if("chart"===e.type)return{...e,type:"chart",chart:{}};throw Error("Unknown view type: ".concat(e.type))}function l(e){switch(e){case"ASC":return"DESC";case"DESC":return;case void 0:return"ASC"}}async function u(e,t,n,i){let s=(0,a.Kd)(t),c={name:s,id:(0,a.uJ)(e,t),source:t,connectionId:e,data:void 0},l=function(e){if("table"===e.type)return(0,r.X$)('SELECT *\n                          FROM "'.concat(e.database,'"."').concat(e.schema,'"."').concat(e.tableName,'";'));if("file"===e.type)return(0,r.X$)("SELECT *\n                          FROM '".concat(e.path,"';"));if("query"===e.type)return e.baseQuery;throw Error("Unknown relation type: ".concat(e))}(t),u=await f(c,n,l),d={...c,query:u,executionState:i,lastExecutionMetaData:void 0},h="query"===t.type;return{...d,viewState:(0,o.y6)(s,d.data,h)}}function d(e,t,n){let a;let o=(0,r.Co)(n),i=o.slice(0,-1),s=o.at(-1);if(!s)throw Error("No final query found in base SQL");let c=(0,r.zB)(s),l="\n        SELECT COUNT(*)\n        FROM ".concat(c," as subquery\n    ");if("table"===t.type)a=function(e,t){let n=e.table,{offset:a,limit:o}=n,r=Object.entries(n.sorting).map(e=>{let[t,n]=e;return n?'"'.concat(t,'" ').concat(n):""}).filter(Boolean).join(", ");return"\n        SELECT *\n        FROM ".concat(t," ").concat(r?"ORDER BY "+r:""," LIMIT ").concat(o,"\n        OFFSET ").concat(a,";\n    ")}(t,c);else if("chart"===t.type)t.chart,a="\n        SELECT *\n        FROM ".concat(c,";\n    ");else throw Error("Unknown view type: ".concat(t.type));return{initialQueries:i,finalQuery:s,viewQuery:a,countQuery:l,baseQuery:n,viewParameters:t}}async function f(e,t,n){let{initialQueries:a,finalQuery:o,viewQuery:r,countQuery:s,baseQuery:c,viewParameters:l}=d(e,t,n),u=await i.I.getInstance().checkIfQueryIsExecutable(r);return{countQuery:u?s:"SELECT 0",viewQuery:u?r:o,initialQueries:a,baseQuery:c,viewParameters:l}}function h(e,t,n){let{initialQueries:a,finalQuery:o,viewQuery:r,countQuery:i,baseQuery:s,viewParameters:c}=d(e,t,n);return{countQuery:i,viewQuery:r,initialQueries:a,baseQuery:s,viewParameters:c}}function m(e){return{...e,executionState:{state:"running"}}}async function p(e,t,n){let a=e.query.baseQuery,o=await f(e,t,a);return{...e,query:o,executionState:null!=n?n:e.executionState}}function y(e,t){return{...e,data:void 0,viewState:{...e.viewState,codeFenceState:{...e.viewState.codeFenceState,show:!0}},executionState:{state:"error",error:function(e){if("object"==typeof e&&e&&"message"in e&&"string"==typeof e.message)try{return JSON.parse(e.message)}catch(e){}return{message:(null==e?void 0:e.toString())||""}}(t)}}}async function b(e){let t,n;let a=e.query.viewQuery,r=e.query.countQuery,s=performance.now();for(let t of e.query.initialQueries)try{await i.I.getInstance().executeQuery(t)}catch(t){return y(e,t)}if(a)try{t=await i.I.getInstance().executeQuery(a)}catch(t){return y(e,t)}else t={columns:[],rows:[]};if(r)try{n=await i.I.getInstance().executeQuery(r)}catch(t){return y(e,t)}else n={columns:[],rows:[[0]]};let c=Number(n.rows[0][0]),l=performance.now();return{...e,data:t,executionState:{state:"success"},lastExecutionMetaData:{lastExecutionDuration:(l-s)/1e3,lastResultCount:c,lastResultOffset:e.query.viewParameters.table.offset},viewState:(0,o.y9)(e.viewState,t)}}},75382:function(e,t,n){n.d(t,{AK:function(){return i},y6:function(){return c},y9:function(){return s}});var a=n(55111),o=n(38813),r=n(10268);function i(e){return{displayName:e}}function s(e,t){let n=c(e.displayName,void 0);return(0,o.vZ)(e,n)?c(e.displayName,t):e}function c(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o={...i(e),codeFenceState:{show:n,sizePercentage:.3,layout:"row"},selectedView:"table"};return t?{...o,chartState:(0,r.A4)(t),tableState:(0,a.uh)(t)}:{...o,chartState:(0,r.uj)(),tableState:(0,a.BP)()}}},10268:function(e,t,n){n.d(t,{$8:function(){return o},A4:function(){return l},Ai:function(){return r},Ig:function(){return u},eY:function(){return d},md:function(){return i},uj:function(){return c},xD:function(){return s}});var a=n(85718);let o=["bar","area","line","scatter","pie","radar"];function r(){return{color:a.QP[0],line:{strokeWidth:2,strokeDasharray:"none",dots:{visible:!0,fill:a.QP[0],radius:6,borderWidth:0}},bar:{barWidth:20,stacked:!1,cornerRadius:4,fillOpacity:1,border:{width:0,color:"#000000"}},scatter:{shape:"circle",stroke:{width:2,color:"#333333"},fillOpacity:1},pie:{innerRadius:0,padAngle:0,cornerRadius:0,showLabels:!0,label:{color:"#000000",fontSize:12,fontFamily:"sans-serif"}},radar:{strokeWidth:2,fillColor:a.QP[0],fillOpacity:.2,showDots:!0,dotSize:6,dotColor:a.QP[0],dotBorderWidth:1},area:{stroke:{width:2,dasharray:"none"},fillColor:a.QP[0],fillOpacity:.2,showDots:!0,dotSize:6,dotColor:a.QP[0],dotBorderWidth:0}}}function i(e){return void 0!==e.start||void 0!==e.end}function s(e){var t,n;return void 0===e?["auto","auto"]:void 0===e.start&&void 0===e.end?[0,"auto"]:[null!==(t=e.start)&&void 0!==t?t:0,null!==(n=e.end)&&void 0!==n?n:"maxValue"]}function c(){return{chart:{plot:{type:"bar",cartesian:{xRange:{},yRange:{}},pie:{axis:{}}}},view:{showConfig:!0,configPlotRatio:.5,layout:"column"}}}function l(e){return{chart:{plot:{type:"bar",cartesian:{xRange:{},yRange:{}},pie:{axis:{}}}},view:{showConfig:!0,configPlotRatio:.5,layout:"column"}}}function u(e){switch(e){case"config-not-complete":return"Configuration not complete";case"missing-data":return"Missing data"}throw Error("Unsupported error type: ".concat(e))}function d(e,t){let n=e.plot;switch(n.type){case"bar":case"radar":case"line":case"scatter":case"area":var a,o;if((null!==(o=null===(a=n.cartesian.yAxes)||void 0===a?void 0:a.length)&&void 0!==o?o:0)==0)return{type:"config-not-complete",message:"Please define at least one Y-axis."};break;case"pie":if(void 0===n.pie.axis.label||void 0===n.pie.axis.radius)return{type:"config-not-complete",message:"Please define both the label and radius axis."};break;default:throw Error("Unsupported plot type: ".concat(n.type))}let r=(function(e){let t=e.plot;switch(t.type){case"bar":case"radar":case"line":case"scatter":case"area":{var n,a;let e=null!==(a=null===(n=t.cartesian.yAxes)||void 0===n?void 0:n.map(e=>e.columnId))&&void 0!==a?a:[];return t.cartesian.xAxis&&e.push(t.cartesian.xAxis.columnId),e}case"pie":{let e=[];return t.pie.axis.label&&e.push(t.pie.axis.label.columnId),t.pie.axis.radius&&e.push(t.pie.axis.radius.columnId),e}default:throw Error("Unsupported plot type: ".concat(t.type))}})(e).filter(e=>!t.columns.find(t=>t.id===e));if(r.length>0)return{type:"missing-data",message:"Missing data columns: ".concat(r.join(", "))}}},55111:function(e,t,n){n.d(t,{BP:function(){return o},c7:function(){return r},uh:function(){return i},y4:function(){return a}});let a={width:192,wrapContent:!1};function o(){return{columnsOrder:[],columnsHidden:[],columnStates:{}}}function r(e,t){let n=t.columns.map(e=>e.name),a=e.columnsOrder.filter(t=>!e.columnsHidden.includes(t)),o=[];for(let e of a){let t=n.indexOf(e);-1!==t&&o.push(t)}for(let t of n.filter(t=>!e.columnsOrder.includes(t)&&!e.columnsHidden.includes(t)))o.push(n.indexOf(t));return 0==o.length&&0!=n.length?[0]:o}function i(e){let t={},n=[];return e.columns.forEach(e=>{n.push(e.name),t[e.name]={...a}}),{columnsOrder:n,columnsHidden:[],columnStates:t}}},52914:function(e,t,n){function a(e,t){if("file"==e.type)return[t,e.baseName];if("query"==e.type)return[t];if("table"==e.type)return[t,e.database,e.schema,e.tableName];throw Error("Unknown relation type: ".concat(e))}function o(e,t){if("table"===t.type)return"relation-table-".concat(e,"-").concat(t.database,"-").concat(t.schema,"-").concat(t.tableName);if("file"===t.type)return"relation-file-".concat(e,"-").concat(t.path);if("query"===t.type)return"relation-query-".concat(e,"-").concat(t.id);throw Error("Unknown relation type: ".concat(t))}function r(e){if("table"===e.type)return"".concat(e.tableName," View");if("file"===e.type)return"".concat(e.baseName," View");if("query"===e.type)return e.name;throw Error("Unknown relation type: ".concat(e))}n.d(t,{Kd:function(){return r},TY:function(){return a},uJ:function(){return o}})},45453:function(e,t,n){function a(e,t,n){return"schema-".concat(e,"-").concat(t,"-").concat(n.id)}function o(e){return[e.connectionId,e.databaseId,e.name]}n.d(t,{A:function(){return o},E:function(){return a}})},40202:function(e,t,n){n.d(t,{f:function(){return a}});function a(e){if((e=(e=e.split("(")[0]).trim()).endsWith("[]"))return"List";switch(e.toLowerCase()){case"boolean":case"bool":case"logical":return"Boolean";case"tinyint":case"int1":case"smallint":case"int2":case"int4":case"int8":case"int16":case"int32":case"int64":case"short":case"integer":case"int":case"signed":case"bigint":case"long":case"hugeint":case"utinyint":case"usmallint":case"uinteger":case"ubigint":case"uhugeint":return"Integer";case"float":case"float4":case"real":case"double":case"float8":case"double precision":case"decimal":case"numeric":return"Float";case"date":case"timestamp":case"datetime":case"timestamp with time zone":case"timestamptz":return"Timestamp";case"time":case"varchar":case"char":case"bpchar":case"text":case"string":case"blob":case"bytea":case"binary":case"varbinary":case"uuid":case"bit":case"bitstring":case"interval":return"String";case"json":case"struct":return"Struct";case"list":return"List";case"map":return"Map";default:return console.warn("Unhandled DuckDB type: ".concat(e)),"Unknown"}}},85718:function(e,t,n){n.d(t,{BC:function(){return c},QP:function(){return l},SS:function(){return r},Sg:function(){return d},_X:function(){return o},gf:function(){return s},nF:function(){return i},rl:function(){return a},zT:function(){return u}});let a=150,o="duckdb-wasm",r="duckdb-local",i="file-system-over-duckdb",s="duckdb-internal-databases",c=r,l=["#ea5545","#f46a9b","#edbf33","#ede15b","#bdcf32","#87bc45","#27aeef","#b33dc6"],u=[],d={tableName:"relationState",schemaName:"dash"}},23141:function(e,t,n){n.d(t,{w:function(){return a}});function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:24,t="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";return Array.from({length:e},()=>t[Math.floor(Math.random()*t.length)]).join("")}},38813:function(e,t,n){n.d(t,{I8:function(){return function e(t){if("object"!=typeof t||null===t)return t;if(Array.isArray(t))return t.map(e);let n={};for(let a in t)n[a]=e(t[a]);return n}},LU:function(){return a},Z_:function(){return function e(t,n){for(let a in n){let o=n[a],r=t[a];if(!(a in t)){o&&"object"==typeof o&&!Array.isArray(o)?(t[a]={},e(t[a],o)):t[a]=o;continue}r&&o&&"object"==typeof r&&"object"==typeof o&&!Array.isArray(r)&&!Array.isArray(o)?e(r,o):t[a]=o}return t}},vZ:function(){return function e(t,n){if(t===n)return!0;if("object"!=typeof t||null===t||"object"!=typeof n||null===n)return!1;let a=Object.keys(t),o=Object.keys(n);if(a.length!==o.length)return!1;for(let r of a)if(!o.includes(r)||!e(t[r],n[r]))return!1;return!0}}});function a(e){return e<1?"".concat(Math.round(1e3*e),"ms"):e<60?"".concat(e.toFixed(2),"s"):e<3600?"".concat(Math.floor(e/60),"m ").concat(Math.round(e%60),"s"):"".concat(Math.floor(e/3600),"h ").concat(Math.floor(e%3600/60),"m")}},11764:function(e,t,n){n.d(t,{Co:function(){return c},X$:function(){return r},i3:function(){return l},kI:function(){return i},zB:function(){return u}});let a=n(87785)("sql-strip-comments");function o(e){return e=e.replace(/("(""|[^"])*")|('(''|[^'])*')|(--[^\n\r]*)|(\/\*[\w\W]*?(?=\*\/)\*\/)/gm,e=>'"'===e[0]&&'"'===e[e.length-1]||"'"===e[0]&&"'"===e[e.length-1]?e:(a("comment removed: {\n%s\n}",e),""))}function r(e){return(e=(e=(e=o(e)).replace(/("(""|[^"])*")|('(''|[^'])*')|([\t\r\n])/gm,e=>'"'===e[0]&&'"'===e[e.length-1]||"'"===e[0]&&"'"===e[e.length-1]?e:" ")).replace(/("(""|[^"])*")|('(''|[^'])*')|([ ]{2,})/gm,e=>'"'===e[0]&&'"'===e[e.length-1]||"'"===e[0]&&"'"===e[e.length-1]?e:" ")).trim()}function i(e){return o(e).split(";").map(e=>e.trim()).filter(e=>e.length>0)}function s(e){return e.trim().endsWith(";")?e:e+";"}function c(e){return i(e).map(s).map(r)}function l(e){return r(e).trim().replace(/;$/,"")}function u(e,t){let n=i(e).map(r);if(1!==n.length)throw console.error("SQL statements: ",n),Error("The SQL command must be a single statement.");let a=l(n[0]);if(!t)return"(".concat(a,")");if(!/^[a-zA-Z_][a-zA-Z0-9_]*$/.test(t))throw Error("Invalid alias name. Alias must be a valid SQL identifier.");return"(".concat(a,") AS ").concat(t)}},28458:function(e,t,n){n.d(t,{X:function(){return w},m:function(){return x}});var a=n(99185),o=n(60981),r=n(68264),i=n(85718),s=n(47051);async function c(){return new l(i.gf,{name:"DuckDB"})}class l{executeQuery(e){return a.I.getInstance().executeQuery(e)}async checkConnectionState(){return this.connectionStatus=await a.I.getInstance().getDatabaseConnectionState(),this.connectionStatus}async initialise(){return this.checkConnectionState()}async loadDataSources(){return(0,s.kA)(e=>this.executeQuery(e))}async onDataSourceClick(e){await (0,s.qT)(this,e,this.dataSources)}loadChildrenForDataSource(e){return console.error("loadChildrenForDataSource not implemented for DuckDBOverHttp"),Promise.resolve([])}async updateConfig(e){this.config={...this.config,...e}}constructor(e,t){this.type="duckdb-internal-databases",this.connectionStatus={state:"disconnected",message:"ConnectionState not initialised"},this.dataSources=[],this.id=e,this.config=t}}var u=n(40440),d=n(31943),f=n(78347),h=n(46499),m=n(6467),p=n(4908);async function y(){return new b(i.nF,{rootPath:void 0,name:"Filesystem",showHiddenFiles:!1})}class b{executeQueryViaDatabaseConnection(e){return a.I.getInstance().executeQuery(e)}async checkConnectionState(){return this.connectionStatus=await a.I.getInstance().getDatabaseConnectionState(),this.connectionStatus}async initialise(){try{await this.executeQueryViaDatabaseConnection("INSTALL hostfs FROM community;"),await this.executeQueryViaDatabaseConnection("LOAD hostfs;")}catch(e){return console.error("Error installing hostfs",e),Promise.resolve({state:"error",message:"Error installing hostfs"})}let[e,t]=await (0,s.a3)(this.executeQueryViaDatabaseConnection.bind(this));return this.config.rootPath=t,this.checkConnectionState()}async getDirAsDataSource(e,t){let n=void 0!==t?"lsr('".concat(e,"', ").concat(t,")"):"lsr('".concat(e,"')"),a=this.config.showHiddenFiles,o="SELECT path, is_file(path) as file, file_name(path) as basename\n                                 FROM ".concat(n," ").concat(a?"":"WHERE file_name(path) NOT LIKE '.%'","\n                                 ORDER BY file, path;"),r=await this.executeQueryViaDatabaseConnection(o),i=f.basename(e),s={id:e,name:i,type:"folder",children:[]},c=new Map;for(let t of(c.set(e,s),r.rows)){let[e,n,a]=t,o=!0===n||"true"===n,r=e.substring(0,e.length-a.length-1),i=c.get(r);if(i.children||(i.children=[]),o)i.children.push({id:e,name:a,type:"file",children:null});else{let t={id:e,name:a,type:"folder",children:void 0};c.set(e,t),i.children.push(t)}}return s}async loadDataSources(){let e=this.config.rootPath;if(!e)throw Error("Root path not set, please initialise the connection");return[await this.getDirAsDataSource(e,0)]}async onDataSourceClick(e){let t=e[e.length-1],n=(0,d.qy)(this.dataSources,e);if(!n){console.error("Element with id ".concat(t," not found"));return}if("file"!==n.type);else{let e={type:"file",path:t,baseName:n.name};await u.Rx.getState().showRelationFromSource(this.id,e,i.zT)}}async loadChildrenForDataSource(e){let t=e[e.length-1];return(await this.getDirAsDataSource(t,0)).children}async updateConfig(e){e.rootPath&&e.rootPath.endsWith("/")&&(e.rootPath=e.rootPath.substring(0,e.rootPath.length-1)),e.rootPath&&(e.rootPath,this.config.rootPath),this.config={...this.config,...e}}constructor(e,t){this.type="duckdb-local-filesystem",this.connectionStatus={state:"disconnected",message:"ConnectionState not initialised"},this.dataSources=[],this.dataSourceContextMenuFactory=(e,t)=>(function(e){function t(){let t=e.tree_id_path;return t[t.length-1]}async function n(){try{let e=t(),n=(await a.I.getInstance().executeQuery("SELECT content\n                           FROM read_text('".concat(e,"')"))).rows[0][0];await navigator.clipboard.writeText(n)}catch(e){console.error("Failed to copy content:",e)}}async function o(){try{var t;let n=(null===(t=e.tree)||void 0===t?void 0:t.name)||"";await navigator.clipboard.writeText(n)}catch(e){console.error("Failed to copy name:",e)}}async function r(){try{let e=t();await navigator.clipboard.writeText(e)}catch(e){console.error("Failed to copy path:",e)}}return(0,h.jsxs)(h.Fragment,{children:[(0,h.jsxs)(m.Zo,{onClick:o,children:[(0,h.jsx)(p.Z,{size:16,style:{marginRight:8}}),"Copy Name"]}),(0,h.jsxs)(m.Zo,{onClick:r,children:[(0,h.jsx)(p.Z,{size:16,style:{opacity:0,marginRight:8}}),"Copy Path"]}),"file"===e.tree.type&&(0,h.jsxs)(m.Zo,{onClick:n,children:[(0,h.jsx)(p.Z,{size:16,style:{opacity:0,marginRight:8}}),"Copy Content"]}),"file"===e.tree.type&&(0,h.jsx)(h.Fragment,{})]})})({tree_id_path:e,tree:t,connection_id:this.id}),this.id=e,this.config=t}}var g=n(47720);let w=(0,o.F)((e,t)=>({hydrated:!1,setHydrated:t=>e({hydrated:t})})),S=(0,g.FL)(()=>localStorage,{reviver:(e,t)=>"connectionsConfigOpen"!==e&&t,replacer:(e,t)=>t}),x=(0,o.F)()((0,g.tJ)((e,t)=>({history:[],connectionsConfigOpen:!1,connectionsConfigForcedOpen:!1,setConnectionsConfigOpen:t=>{e({connectionsConfigOpen:t})},setConnectionsConfigForcedOpen:t=>{e({connectionsConfigForcedOpen:t,connectionsConfigOpen:t})},setDatabaseConnection:async n=>{a.I.getInstance().setDatabaseConnection(n);let o=[...t().history],i={type:n.type,config:n.config},s=o.findIndex(e=>JSON.stringify(e)===JSON.stringify(i));-1!==s&&o.splice(s,1),o.length>10&&o.pop(),o.unshift(i),e({history:o});let l=r.g.getState(),u=await c();await l.addSourceConnection(u,!0,!0);let d=await y();await l.addSourceConnection(d,!0,!0)}}),{onRehydrateStorage:e=>{w.getState().setHydrated(!0)},name:"database-connection",storage:S}))},99185:function(e,t,n){n.d(t,{I:function(){return o}});var a=n(11764);class o{static getInstance(){return o.instance||(o.instance=new o),o.instance}hasDatabaseConnection(){return void 0!==this.database_connection}setDatabaseConnection(e){this.database_connection=e}getDatabaseConnection(){if(!this.database_connection)throw Error("No active database connection");return this.database_connection}getSourceConnection(e){return this.source_connections[e]}hasSourceConnection(e){return!!this.source_connections[e]}addSourceConnectionIfNotExists(e){this.source_connections[e.id]||(this.source_connections[e.id]=e)}async executeQuery(e){if(!this.database_connection)throw Error("No active database connection");return await this.database_connection.executeQuery(e)}async getDatabaseConnectionState(){if(!this.database_connection)throw Error("No active database connection");return await this.database_connection.checkConnectionState()}updateSourceConnectionConfig(e,t){let n=this.source_connections[e];if(!n)throw Error("Connection with id ".concat(e," not found"));n.updateConfig(t)}async checkIfQueryIsExecutable(e){let t=(0,a.i3)(e);try{return await this.executeQuery("EXPLAIN ".concat(t)),!0}catch(e){return!1}}constructor(){this.source_connections={}}}},68264:function(e,t,n){n.d(t,{g:function(){return i}});var a=n(60981),o=n(99185),r=n(31943);let i=(0,a.F)((e,t)=>({connections:{},addSourceConnection:async(n,a,r)=>{let i;return e(e=>({connections:{...e.connections,[n.id]:n}})),o.I.getInstance().addSourceConnectionIfNotExists(n),a&&(i=await t().initialiseSourceConnection(n.id)),r&&await t().loadAllDataSources(n.id),i},initialiseSourceConnection:async t=>{let n=o.I.getInstance().getSourceConnection(t);if(!n)throw Error("Connection with id ".concat(t," not found"));let a=await n.initialise();return e(e=>({connections:{...e.connections,[t]:{...e.connections[t],connectionState:a}}})),a},getSourceConnection:e=>t().connections[e],getConnectionName:e=>{let n=t().connections[e];return n?n.config.name:void 0},removeConnection:t=>e(e=>{let n={...e.connections};return delete n[t],{connections:n}}),refreshConnection:async e=>{await t().updateConnectionState(e),await t().loadAllDataSources(e)},updateConfig:async(n,a)=>{o.I.getInstance().updateSourceConnectionConfig(n,a),e(e=>({connections:{...e.connections,[n]:{...e.connections[n],config:a}}})),await t().refreshConnection(n)},getConnectionState:e=>t().connections[e].connectionStatus,updateConnectionState:async t=>{let n=await o.I.getInstance().getSourceConnection(t).checkConnectionState();return e(e=>({connections:{...e.connections,[t]:{...e.connections[t],connectionState:n}}})),n},setConnectionState:(t,n)=>{o.I.getInstance().getSourceConnection(t).connectionStatus=n,e(e=>({connections:{...e.connections,[t]:{...e.connections[t],connectionState:e}}}))},setConnectionError(e,n){t().setConnectionState(e,{state:"error",message:n.message})},loadAllDataSources:async n=>{let a=o.I.getInstance().getSourceConnection(n);a||t().setConnectionError(n,Error("Connection with id ".concat(n," not found")));let r=[];try{r=await a.loadDataSources()}catch(e){t().setConnectionError(n,e)}return a.dataSources=r,e(e=>({connections:{...e.connections,[n]:{...a,dataSources:r}}})),r},loadChildrenForDataSource:async(n,a)=>{let i=o.I.getInstance().getSourceConnection(n);i||t().setConnectionError(n,Error("Connection with id ".concat(n," not found")));let s=[];try{s=await i.loadChildrenForDataSource(a)}catch(e){t().setConnectionError(n,e)}let c=i.dataSources,l=(0,r.qy)(c,a);if(l)l.children=s;else{t().setConnectionError(n,Error("Data source with id path ".concat(a," not found")));return}return e(e=>({connections:{...e.connections,[n]:{...i,dataSources:c}}})),l}}))},47051:function(e,t,n){n.d(t,{Ny:function(){return h},a3:function(){return d},kA:function(){return u},qT:function(){return l}});var a=n(40202),o=n(40440),r=n(85718),i=n(31943),s=n(99185),c=n(11764);async function l(e,t,n){if(1===t.length){let a=o.Rx.getState().showDatabase,r=(0,i.qy)(n,t);if(r){let t=e.id;await a(t,r)}}else if(2===t.length){let a=o.Rx.getState().showSchema,[r,s]=t,c=(0,i.qy)(n,t);if(c){let t=e.id;await a(t,r,c)}}else if(3===t.length){let n=o.Rx.getState().showRelationFromSource,[a,i,s]=t;await n(e.id,{type:"table",database:a,schema:i,tableName:s},r.zT)}}async function u(e){let t=await e("SELECT table_catalog, table_schema, table_name, column_name, data_type\n                   FROM information_schema.columns\n                   ORDER BY table_catalog, table_name, ordinal_position;"),n={};for(let e of t.rows){let[t,a,o,r,i]=e;n[t]||(n[t]={}),n[t][a]||(n[t][a]={}),n[t][a][o]||(n[t][a][o]=[]),n[t][a][o].push([r,i])}let o=[];for(let e in n){let t=[];for(let o in n[e]){let r=[];for(let t in n[e][o]){let i=n[e][o][t];r.push({id:t,type:"relation",name:t,children:i.map(e=>{let[t,n]=e;return{name:t,type:(0,a.f)(n),children:null}})})}t.push({id:o,type:"schema",name:o,children:r})}o.push({id:e,type:"database",name:e,children:t})}return o}async function d(e){let t=await e("SELECT file_name(pwd()),pwd();");return[t.rows[0][0],t.rows[0][1]]}async function f(e,t,n){let a=(0,c.i3)(e);switch(n){case"csv":return"COPY (".concat(a,") TO '").concat(t,"' (FORMAT 'csv', HEADER, DELIMITER ',');");case"json":return"COPY (".concat(a,") TO '").concat(t,"' (FORMAT 'json');");case"parquet":return"COPY (".concat(a,") TO '").concat(t,"' (FORMAT 'parquet');");case"xlsx":return await s.I.getInstance().executeQuery("INSTALL spatial;"),await s.I.getInstance().executeQuery("LOAD spatial;"),"COPY (".concat(a,") TO '").concat(t,"' WITH (FORMAT GDAL, DRIVER 'xlsx');")}}async function h(e,t,n){let a=await f(e,t,n);return await s.I.getInstance().executeQuery(a)}},75668:function(e,t,n){n.d(t,{C:function(){return c}});var a=n(53314),o=n(47720),r=n(16244),i=n(60981);let s=(0,o.FL)(()=>localStorage,{reviver:(e,t)=>"layoutModel"===e?a.Model.fromJson(t):t,replacer:(e,t)=>"layoutModel"===e?t.toJson():t}),c=(0,i.F)()((0,o.tJ)((e,t)=>({layoutModel:(0,r.Gb)(),selectedTabId:void 0,number:0,mainBarSizeRatio:25,sideBarTabsSizeRatio:70,selectedSidebarTabs:["connections","relations"],setSideBarTabsSizeRatio:t=>{e({sideBarTabsSizeRatio:t})},setSelectedSidebarTabs:t=>{e({selectedSidebarTabs:t})},setMainBarSizeRatio:t=>{e({mainBarSizeRatio:t})},setSelectedTabId:t=>{e({selectedTabId:t})},getModel:()=>t().layoutModel,setModel:t=>{e({layoutModel:t})},removeTab:e=>{let n=t().layoutModel;(0,r.Tq)(n,e),t().persistState()},keepTabsOfIds:e=>{let n=t().layoutModel,a=[];n.visitNodes(t=>{let n=t.getId();(n.startsWith("relation")||n.startsWith("dashboard")||n.startsWith("schema")||n.startsWith("database"))&&!e.includes(n)&&a.push(n)}),a.forEach(e=>{console.warn("Removing tab because of the underlying data has been removed",e),(0,r.Tq)(n,e)})},renameTab:(e,n)=>{let a=t().layoutModel;(0,r.mh)(a,e,n),t().persistState()},focusTab:e=>{let n=t().layoutModel;(0,r.kO)(n,e),t().persistState()},addRelationTab:e=>{(0,r.IK)(t().layoutModel,e),t().persistState()},addDashboardTab:e=>{(0,r.l0)(t().layoutModel,e),t().persistState()},addSchemaTab:(e,n)=>{(0,r.ah)(t().layoutModel,e,n),t().persistState()},addDatabaseTab:(e,n)=>{(0,r.Cw)(t().layoutModel,e,n),t().persistState()},increment:()=>{e(e=>({number:e.number+1}))},isTabOpen:e=>void 0!==t().layoutModel.getNodeById(e),persistState:()=>{e(e=>({number:e.number+1}))}}),{name:"gui-state",storage:s}))},60718:function(e,t,n){n.d(t,{At:function(){return s},rQ:function(){return c},jB:function(){return l}});var a=n(99185);class o{add(e){return new Promise((t,n)=>{this.queue.push({item:e,resolve:t,reject:n}),this.processing||this.processNext()})}async processNext(){for(this.processing=!0;this.queue.length>0;){let{item:e,resolve:t,reject:n}=this.queue.shift();try{let n=await this.worker(e);t(n)}catch(e){n(e)}}this.processing=!1}constructor(e){this.worker=e,this.queue=[],this.processing=!1}}var r=n(85718);function i(e){return e.databaseName?'"'.concat(e.databaseName,'"."').concat(e.schemaName,'"."').concat(e.tableName,'"'):'"'.concat(e.schemaName,'"."').concat(e.tableName,'"')}async function s(e,t){let n=await t.executeQuery("SELECT (path IS NOT null) as persistent, readonly, database_name FROM duckdb_databases() WHERE database_name = current_catalog();"),a=n.rows[0][0],o=n.rows[0][1];return e.databaseName=n.rows[0][2],{tableStatus:"found",databaseStatus:a?"permanent":"temporary",databaseReadonly:o,destination:e}}class c{setOnForceReloadCallback(e){this.onForceReloadCallback=e}async getOrWaitForConnection(){for(;!a.I.getInstance().hasDatabaseConnection();)await new Promise(e=>setTimeout(e,100));return null===this.activeStorageInfo&&(console.log("Connection established, getting active storage info"),this.activeStorageInfo=await s(r.Sg,a.I.getInstance().getDatabaseConnection()),console.log(this.activeStorageInfo)),a.I.getInstance().getDatabaseConnection()}async createTableIfNotExists(e){if(this.activeStorageInfo.databaseReadonly)return;let t=i(e);this.createdTables.includes(t)||(await this.executeQuery("INSTALL json"),await this.executeQuery("LOAD json"),await this.executeQuery("CREATE SCHEMA IF NOT EXISTS ".concat(e.schemaName,";")),await this.executeQuery("CREATE TABLE IF NOT EXISTS ".concat(t,"\n                                                  (\n                                                      id\n                                                      INT\n                                                      PRIMARY\n                                                      KEY,\n                                                      value\n                                                      JSON,\n                                                      version\n                                                      TIMESTAMP\n                                                  );")),this.createdTables.push(t))}async executeQuery(e){return(await this.getOrWaitForConnection()).executeQuery(e)}static async getInstance(){return c.instance||(c.instance=new c),await c.instance.getOrWaitForConnection(),c.instance}updateVersion(e){this.lastVersionCode=e}async loadVersionFromServer(e){let t=i(e),n=await this.executeQuery("SELECT version\n                                              FROM ".concat(t,";")),a=null;return n.rows.length>0&&(a=new Date(n.rows[0][0]).getTime()),a}isVersionValid(e){return e===this.lastVersionCode}async getItem(e){let t=i(e);await this.createTableIfNotExists(e);let n=await this.executeQuery("SELECT value, version\n                       FROM ".concat(t," LIMIT 1;"));if(0===n.rows.length)return null;let a=n.rows[0][0],o=new Date(n.rows[0][1]).getTime();return this.updateVersion(o),a}async setItem(e,t){if(!this.activeStorageInfo.databaseReadonly)return this.queue.add({storageDestination:e,value:t})}async setItemInternal(e){let{storageDestination:t,value:n}=e;n=n.replace(/'/g,"''"),await this.createTableIfNotExists(t);let a=await this.loadVersionFromServer(t),o=i(t);if(this.isVersionValid(a)){let e="\n                INSERT INTO ".concat(o,"\n                VALUES (0, '").concat(n,"', NOW()) ON CONFLICT DO\n                UPDATE SET value = EXCLUDED.value, version = NOW();\n            ");await this.executeQuery(e);let a=await this.loadVersionFromServer(t);if(null===a)throw Error("Could not get version code, there should be one after the insert");this.updateVersion(a)}else this.onForceReloadC"
     "allback()}constructor(){this.activeStorageInfo=null,this.createdTables=[],this.lastVersionCode=null,this.onForceReloadCallback=()=>{},this.queue=new o(e=>this.setItemInternal(e))}}let l={getItem:async e=>{let t=await c.getInstance();return t.getItem(t.activeStorageInfo.destination)},setItem:async(e,t)=>{let n=await c.getInstance();return n.setItem(n.activeStorageInfo.destination,t)},removeItem:async e=>{let t=await c.getInstance();await t.createTableIfNotExists(t.activeStorageInfo.destination);let n=i(t.activeStorageInfo.destination);await t.executeQuery("DELETE FROM ".concat(n,";"))}}},40440:function(e,t,n){n.d(t,{Rx:function(){return w},YT:function(){return b}});var a=n(52914),o=n(72369),r=n(45453),i=n(56283),s=n(38813),c=n(47720),l=n(60718),u=n(60981),d=n(24715),f=n(23141),h=n(31943),m=n(63906),p=n(75668),y=n(85718);let b=(0,u.F)((e,t)=>({hydrated:!1,setHydrated:t=>e({hydrated:t})})),g={relations:{},schemas:{},databases:{},dashboards:{},editorElements:[]},w=(0,u.F)((0,c.tJ)((e,t)=>({...g,addNewDashboard:async(e,n,a)=>{let o="dashboard-".concat((0,f.w)()),r=a;r||(r={id:o,name:"New Dashboard",viewState:(0,d.E)("New Dashboard"),elementState:{blocks:[{id:(0,f.w)(),type:"header",data:{text:"New Dashboard",level:1}}]}}),t().showDashboard(r,n)},deleteDashboard:(n,a)=>{let{dashboards:o}=t();p.C.getState().isTabOpen(n)&&p.C.getState().removeTab(n);let r={...o};delete r[n];let i=(0,m.xE)(a);e({dashboards:r,editorElements:(0,h.Xo)(t().editorElements,i)})},updateDashboardViewState:(n,a,o)=>{let r=(0,s.I8)(t().dashboards[n].viewState),i=t().editorElements;if(a.displayName){if(p.C.getState().renameTab(n,a.displayName),!o)throw Error("Path must be provided if displayName is updated");let e=(0,h.qy)(t().editorElements,o),r=(0,m.P6)(o,a.displayName,e);i=(0,h.Xo)(t().editorElements,r)}(0,s.Z_)(r,a),e(e=>({dashboards:{...e.dashboards,[n]:{...e.dashboards[n],viewState:r}},editorElements:i}))},addNewRelation:async(e,n,a)=>{if(a)t().showRelation(a,n);else{let a={type:"query",baseQuery:"SELECT 'Hello, World! \uD83E\uDD86' AS message;",id:(0,f.w)(),name:"New Query"};t().showRelationFromSource(e,a,n)}},showDashboardFromId:(e,n)=>{let a=t().dashboards[e];t().showDashboard(a,n)},showDashboard:async(n,a)=>{let{dashboards:o}=t(),r=n.id,i=o[r];if(i){if(p.C.getState().isTabOpen(r))p.C.getState().focusTab(r);else{let t=(0,s.I8)(i);e(e=>({dashboards:{...e.dashboards,[r]:t}})),p.C.getState().addDashboardTab(n)}}else{let o=(0,h.qy)(t().editorElements,a),i=(0,m.tx)(a,r,o,n.viewState.displayName),s=(0,h.Xo)(t().editorElements,i);e(e=>({dashboards:{...e.dashboards,[r]:n},editorElements:s})),p.C.getState().addDashboardTab(n)}},setDashboardStateUnsafe:(t,n)=>{e(e=>({dashboards:{...e.dashboards,[t]:n}}))},showSchema:async(n,a,o)=>{let{schemas:i}=t(),s=(0,r.E)(n,a,o);i[s]?p.C.getState().focusTab(s):(e(e=>({schemas:{...e.schemas,[s]:{...o,connectionId:n,databaseId:a}}})),p.C.getState().addSchemaTab(s,o))},showDatabase:async(n,a)=>{let{databases:o}=t(),r=(0,i.p)(n,a.id);o[r]?p.C.getState().focusTab(r):(e(e=>({databases:{...e.databases,[r]:{...a,connectionId:n}}})),p.C.getState().addDatabaseTab(r,a))},getDashboardState:e=>t().dashboards[e],getDatabaseState:e=>t().databases[e],getSchemaState:e=>t().schemas[e],relationExists:e=>void 0!==t().relations[e],getRelation:e=>t().relations[e],showRelation(n,o){let r=(0,a.uJ)(n.connectionId,n.source),{relations:i}=t(),c=i[r];if(c){if(p.C.getState().isTabOpen(r))p.C.getState().focusTab(r);else{let t=(0,s.I8)(c);e(e=>({relations:{...e.relations,[r]:t}})),p.C.getState().addRelationTab(n)}}else{let a=(0,h.ii)(t().editorElements,o),i=(0,m.HD)(o,r,a,n.viewState.displayName),s=(0,h.Xo)(t().editorElements,i);e(e=>({relations:{...e.relations,[r]:n},editorElements:s})),p.C.getState().addRelationTab(n)}},showRelationFromId:(e,n)=>{let a=t().relations[e];t().showRelation(a,n)},showRelationFromSource:async(n,r,i)=>{let s=(0,a.uJ)(n,r),c=t().relations[s];if(c)t().showRelation(c,i);else{let a=(0,o.jb)(),c=await (0,o.Ik)(n,r,a,{state:"running"}),l=(0,h.qy)(t().editorElements,i),u=(0,m.HD)(i,s,l,c.viewState.displayName),d=(0,h.Xo)(t().editorElements,u);e(e=>({relations:{...e.relations,[s]:c},editorElements:d})),p.C.getState().addRelationTab(c);let f=await (0,o.BN)(c);e(e=>({relations:{...e.relations,[s]:f}}))}},updateRelationDataWithParams:async(n,a)=>{let{relations:r}=t(),i=r[n],s=(0,o.U8)(i);e(e=>({relations:{...e.relations,[n]:s}}));let c=await (0,o.Pw)(s,a),l=await (0,o.BN)(c);e(e=>({relations:{...e.relations,[n]:l}}))},updateRelationBaseQuery:(t,n)=>{e(e=>({relations:{...e.relations,[t]:{...e.relations[t],query:{...e.relations[t].query,baseQuery:n}}}}))},setRelationViewState:(t,n)=>{e(e=>({relations:{...e.relations,[t]:{...e.relations[t],viewState:n}}}))},getRelationViewState:e=>t().relations[e].viewState,updateRelationViewState:(n,a,o)=>{let r=(0,s.I8)(t().relations[n].viewState),i=t().editorElements;if(a.displayName){if(p.C.getState().renameTab(n,a.displayName),!o)throw Error("Path must be provided if displayName is updated");let e=(0,h.qy)(i,o),t=(0,m.P6)(o,a.displayName,e);i=(0,h.Xo)(i,t)}if((0,s.Z_)(r,a),e(e=>({relations:{...e.relations,[n]:{...e.relations[n],viewState:r}},editorElements:i})),a.selectedView){let e={...t().relations[n].query.viewParameters,type:a.selectedView};t().updateRelationDataWithParams(n,e)}},deleteRelation:(n,a)=>{let{relations:o}=t(),r={...o};delete r[n],p.C.getState().isTabOpen(n)&&p.C.getState().removeTab(n);let i=(0,m.xE)(a);e({relations:r,editorElements:(0,h.Xo)(t().editorElements,i)})},closeTab:n=>{let{schemas:a,databases:o,relations:r,dashboards:i}=t();if(a[n]){let t={...a};delete t[n],e({schemas:t})}else if(o[n]){let t={...o};delete t[n],e({databases:t})}else r[n]?e({relations:{...r}}):i[n]&&e({dashboards:{...i}})},updateEditorElements:(n,a)=>{let o=[...t().editorElements],r=(0,h.tV)(o,n,a);e(()=>({editorElements:r}))},addEditorElement:(n,a)=>{let o=[...t().editorElements],r=(0,h.gz)(o,n,a);e(()=>({editorElements:r}))},removeEditorElement:n=>{let a=[...t().editorElements],o={...t().relations},r={...t().dashboards},i=(0,h.qy)(a,n);if(!i)throw Error("Element to remove not found");(0,h.QR)([i],(e,t)=>{"dashboard"===e.type?(p.C.getState().isTabOpen(e.id)&&p.C.getState().removeTab(e.id),delete r[e.id]):"relation"===e.type&&(p.C.getState().isTabOpen(e.id)&&p.C.getState().removeTab(e.id),delete o[e.id])});let s=(0,h.ZF)(a,n);e(()=>({editorElements:s,relations:o,dashboards:r}))},applyEditorElementsActions:n=>{let a=[...t().editorElements],o=(0,h.$I)(a,n);e(()=>({editorElements:o}))},resetEditorElements:()=>{e(()=>({editorElements:[]}))},manualPersistModel:()=>{e(()=>({}))}}),{name:y.Sg.tableName,storage:(0,c.FL)(()=>l.jB),partialize:e=>{let t={...e};return delete t.layoutModel,t},onRehydrateStorage:e=>function(e,t){if(void 0===e)return p.C.getState().keepTabsOfIds([]),b.getState().setHydrated(!0),console.log("State was undefined, setting hydrated to true"),g;console.log("State:",e);let n=[];if(e.relations)for(let t in e.relations)n.push(t);if(e.schemas)for(let t in e.schemas)n.push(t);if(e.databases)for(let t in e.databases)n.push(t);if(e.dashboards)for(let t in e.dashboards)n.push(t);p.C.getState().keepTabsOfIds(n),b.getState().setHydrated(!0)}}))},16244:function(e,t,n){n.d(t,{Cw:function(){return f},G_:function(){return s},Gb:function(){return i},IK:function(){return d},Tq:function(){return c},ah:function(){return m},kO:function(){return u},l0:function(){return h},mh:function(){return l}});var a=n(53314),o=n(40440),r=n(75668);function i(){return a.Model.fromJson({global:{splitterSize:1,splitterExtra:8,enableRotateBorderIcons:!0,enableEdgeDock:!1,tabIcon:"relation",tabSetTabStripHeight:41},layout:{type:"row",children:[{type:"tabset",headerHeight:100,children:[]}]}})}function s(e){let t=o.Rx.getState(),n=r.C.getState();return"FlexLayout_DeleteTab"===e.type?t.closeTab(e.data.node):"FlexLayout_SelectTab"===e.type?n.setSelectedTabId(e.data.tabNode.id):n.persistState(),e}function c(e,t){e.doAction(a.Actions.deleteTab(t))}function l(e,t,n){e.doAction(a.Actions.renameTab(t,n))}function u(e,t){e.doAction(a.Actions.selectTab(t))}function d(e,t){p(e,t.id,t.viewState.displayName,"RelationComponent",{relationId:t.id})}function f(e,t,n){p(e,t,n.name,"DatabaseComponent",{databaseId:t})}function h(e,t){let n=t.id;p(e,n,t.viewState.displayName,"DashboardComponent",{dashboardId:n})}function m(e,t,n){p(e,t,n.name,"SchemaComponent",{schemaId:t})}function p(e,t,n,o,r){let i;let s=(e.visitNodes(e=>{i||"tabset"!==e.getType()||(i=e.getId())}),i||console.error("No tabset found"),i);if(!s)throw Error("No tabset found");e.doAction(a.Actions.addNode({type:"tab",enableRename:!1,name:n,id:t,component:o,config:r},s,a.DockLocation.CENTER,-1))}}}]);",    //
     "application/javascript", //
     "/_next/static/chunks/301-644cedf4be370900.js/", //
};
}
