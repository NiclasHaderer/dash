
#pragma once
#include "files.hpp"
namespace duckdb {
const File FILE_NEXT_STATIC_CHUNKS_MAIN_17DFDC027C05ED9D_JS = {
     // Content
     "KHNlbGYud2VicGFja0NodW5rX05fRT1zZWxmLndlYnBhY2tDaHVua19OX0V8fFtdKS5wdXNoKFtbMTc5XSx7OTgzNTI6ZnVuY3Rpb24oZSx0KXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcigpe3JldHVybiIifU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiZ2V0RGVwbG95bWVudElkUXVlcnlPckVtcHR5U3RyaW5nIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcn19KX0sNDM0NDY6ZnVuY3Rpb24oKXsidHJpbVN0YXJ0ImluIFN0cmluZy5wcm90b3R5cGV8fChTdHJpbmcucHJvdG90eXBlLnRyaW1TdGFydD1TdHJpbmcucHJvdG90eXBlLnRyaW1MZWZ0KSwidHJpbUVuZCJpbiBTdHJpbmcucHJvdG90eXBlfHwoU3RyaW5nLnByb3RvdHlwZS50cmltRW5kPVN0cmluZy5wcm90b3R5cGUudHJpbVJpZ2h0KSwiZGVzY3JpcHRpb24iaW4gU3ltYm9sLnByb3RvdHlwZXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KFN5bWJvbC5wcm90b3R5cGUsImRlc2NyaXB0aW9uIix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3ZhciBlPS9cKCguKilcKS8uZXhlYyh0aGlzLnRvU3RyaW5nKCkpO3JldHVybiBlP2VbMV06dm9pZCAwfX0pLEFycmF5LnByb3RvdHlwZS5mbGF0fHwoQXJyYXkucHJvdG90eXBlLmZsYXQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10aGlzLmNvbmNhdC5hcHBseShbXSx0aGlzKSxlPjEmJnQuc29tZShBcnJheS5pc0FycmF5KT90LmZsYXQoZS0xKTp0fSxBcnJheS5wcm90b3R5cGUuZmxhdE1hcD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLm1hcChlLHQpLmZsYXQoKX0pLFByb21pc2UucHJvdG90eXBlLmZpbmFsbHl8fChQcm9taXNlLnByb3RvdHlwZS5maW5hbGx5PWZ1bmN0aW9uKGUpe2lmKCJmdW5jdGlvbiIhPXR5cGVvZiBlKXJldHVybiB0aGlzLnRoZW4oZSxlKTt2YXIgdD10aGlzLmNvbnN0cnVjdG9yfHxQcm9taXNlO3JldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24ocil7cmV0dXJuIHQucmVzb2x2ZShlKCkpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gcn0pfSxmdW5jdGlvbihyKXtyZXR1cm4gdC5yZXNvbHZlKGUoKSkudGhlbihmdW5jdGlvbigpe3Rocm93IHJ9KX0pfSksT2JqZWN0LmZyb21FbnRyaWVzfHwoT2JqZWN0LmZyb21FbnRyaWVzPWZ1bmN0aW9uKGUpe3JldHVybiBBcnJheS5mcm9tKGUpLnJlZHVjZShmdW5jdGlvbihlLHQpe3JldHVybiBlW3RbMF1dPXRbMV0sZX0se30pfSksQXJyYXkucHJvdG90eXBlLmF0fHwoQXJyYXkucHJvdG90eXBlLmF0PWZ1bmN0aW9uKGUpe3ZhciB0PU1hdGgudHJ1bmMoZSl8fDA7aWYodDwwJiYodCs9dGhpcy5sZW5ndGgpLCEodDwwfHx0Pj10aGlzLmxlbmd0aCkpcmV0dXJuIHRoaXNbdF19KSxPYmplY3QuaGFzT3dufHwoT2JqZWN0Lmhhc093bj1mdW5jdGlvbihlLHQpe2lmKG51bGw9PWUpdGhyb3cgVHlwZUVycm9yKCJDYW5ub3QgY29udmVydCB1bmRlZmluZWQgb3IgbnVsbCB0byBvYmplY3QiKTtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKE9iamVjdChlKSx0KX0pfSw4MTgxNzpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiYWRkQmFzZVBhdGgiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBhfX0pO2xldCBuPXIoNTY4OTApLG89cigxNTgxOSk7ZnVuY3Rpb24gYShlLHQpe3JldHVybigwLG8ubm9ybWFsaXplUGF0aFRyYWlsaW5nU2xhc2gpKCgwLG4uYWRkUGF0aFByZWZpeCkoZSwiIikpfSgiZnVuY3Rpb24iPT10eXBlb2YgdC5kZWZhdWx0fHwib2JqZWN0Ij09dHlwZW9mIHQuZGVmYXVsdCYmbnVsbCE9PXQuZGVmYXVsdCkmJnZvaWQgMD09PXQuZGVmYXVsdC5fX2VzTW9kdWxlJiYoT2JqZWN0LmRlZmluZVByb3BlcnR5KHQuZGVmYXVsdCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksT2JqZWN0LmFzc2lnbih0LmRlZmF1bHQsdCksZS5leHBvcnRzPXQuZGVmYXVsdCl9LDM3MDk1OmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJhZGRMb2NhbGUiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBufX0pLHIoMTU4MTkpO2xldCBuPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLHI9QXJyYXkodD4xP3QtMTowKSxuPTE7bjx0O24rKylyW24tMV09YXJndW1lbnRzW25dO3JldHVybiBlfTsoImZ1bmN0aW9uIj09dHlwZW9mIHQuZGVmYXVsdHx8Im9iamVjdCI9PXR5cGVvZiB0LmRlZmF1bHQmJm51bGwhPT10LmRlZmF1bHQpJiZ2b2lkIDA9PT10LmRlZmF1bHQuX19lc01vZHVsZSYmKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LmRlZmF1bHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLE9iamVjdC5hc3NpZ24odC5kZWZhdWx0LHQpLGUuZXhwb3J0cz10LmRlZmF1bHQpfSw4MTg0MTpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiZ2V0U29ja2V0VXJsIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gb319KTtsZXQgbj1yKDcwMDAyKTtmdW5jdGlvbiBvKGUpe2xldHtob3N0bmFtZTp0LHBvcnQ6cn09d2luZG93LmxvY2F0aW9uLG89ZnVuY3Rpb24oZSl7bGV0IHQ9d2luZG93LmxvY2F0aW9uLnByb3RvY29sO3RyeXt0PW5ldyBVUkwoZSkucHJvdG9jb2x9Y2F0Y2goZSl7fXJldHVybiJodHRwOiI9PT10PyJ3cyI6IndzcyJ9KGV8fCIiKSxhPSgwLG4ubm9ybWFsaXplZEFzc2V0UHJlZml4KShlKTtyZXR1cm4obnVsbD09ZT92b2lkIDA6ZS5yZXBsYWNlKC9eXC8rLywiIikuaW5jbHVkZXMoIjovLyIpKT9vKyI6Ly8iK2E6bysiOi8vIit0KyI6IityK2F9KCJmdW5jdGlvbiI9PXR5cGVvZiB0LmRlZmF1bHR8fCJvYmplY3QiPT10eXBlb2YgdC5kZWZhdWx0JiZudWxsIT09dC5kZWZhdWx0KSYmdm9pZCAwPT09dC5kZWZhdWx0Ll9fZXNNb2R1bGUmJihPYmplY3QuZGVmaW5lUHJvcGVydHkodC5kZWZhdWx0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxPYmplY3QuYXNzaWduKHQuZGVmYXVsdCx0KSxlLmV4cG9ydHM9dC5kZWZhdWx0KX0sNTU1MjM6ZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtsZXQgbjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdClPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLHtlbnVtZXJhYmxlOiEwLGdldDp0W3JdfSl9KHQse2FkZE1lc3NhZ2VMaXN0ZW5lcjpmdW5jdGlvbigpe3JldHVybiBpfSxjb25uZWN0SE1SOmZ1bmN0aW9uKCl7cmV0dXJuIHN9LHNlbmRNZXNzYWdlOmZ1bmN0aW9uKCl7cmV0dXJuIHV9fSk7bGV0IG89cig4MTg0MSksYT1bXTtmdW5jdGlvbiBpKGUpe2EucHVzaChlKX1mdW5jdGlvbiB1KGUpe2lmKG4mJm4ucmVhZHlTdGF0ZT09PW4uT1BFTilyZXR1cm4gbi5zZW5kKGUpfWxldCBsPTA7ZnVuY3Rpb24gcyhlKXshZnVuY3Rpb24gdCgpe2xldCByO2Z1bmN0aW9uIGkoKXtpZihuLm9uZXJyb3I9bnVsbCxuLm9uY2xvc2U9bnVsbCxuLmNsb3NlKCksKytsPjI1KXt3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7cmV0dXJufWNsZWFyVGltZW91dChyKSxyPXNldFRpbWVvdXQodCxsPjU/NWUzOjFlMyl9biYmbi5jbG9zZSgpO2xldCB1PSgwLG8uZ2V0U29ja2V0VXJsKShlLmFzc2V0UHJlZml4KTsobj1uZXcgd2luZG93LldlYlNvY2tldCgiIit1K2UucGF0aCkpLm9ub3Blbj1mdW5jdGlvbigpe2w9MCx3aW5kb3cuY29uc29sZS5sb2coIltITVJdIGNvbm5lY3RlZCIpfSxuLm9uZXJyb3I9aSxuLm9uY2xvc2U9aSxuLm9ubWVzc2FnZT1mdW5jdGlvbihlKXtsZXQgdD1KU09OLnBhcnNlKGUuZGF0YSk7Zm9yKGxldCBlIG9mIGEpZSh0KX19KCl9KCJmdW5jdGlvbiI9PXR5cGVvZiB0LmRlZmF1bHR8fCJvYmplY3QiPT10eXBlb2YgdC5kZWZhdWx0JiZudWxsIT09dC5kZWZhdWx0KSYmdm9pZCAwPT09dC5kZWZhdWx0Ll9fZXNNb2R1bGUmJihPYmplY3QuZGVmaW5lUHJvcGVydHkodC5kZWZhdWx0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxPYmplY3QuYXNzaWduKHQuZGVmYXVsdCx0KSxlLmV4cG9ydHM9dC5kZWZhdWx0KX0sNzMzOTc6ZnVuY3Rpb24oZSx0KXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJkZXRlY3REb21haW5Mb2NhbGUiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiByfX0pO2xldCByPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGgsdD1BcnJheShlKSxyPTA7cjxlO3IrKyl0W3JdPWFyZ3VtZW50c1tyXX07KCJmdW5jdGlvbiI9PXR5cGVvZiB0LmRlZmF1bHR8fCJvYmplY3QiPT10eXBlb2YgdC5kZWZhdWx0JiZudWxsIT09dC5kZWZhdWx0KSYmdm9pZCAwPT09dC5kZWZhdWx0Ll9fZXNNb2R1bGUmJihPYmplY3QuZGVmaW5lUHJvcGVydHkodC5kZWZhdWx0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxPYmplY3QuYXNzaWduKHQuZGVmYXVsdCx0KSxlLmV4cG9ydHM9dC5kZWZhdWx0KX0sOTQ4ODI6ZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsImhhc0Jhc2VQYXRoIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gb319KTtsZXQgbj1yKDg5NDMyKTtmdW5jdGlvbiBvKGUpe3JldHVybigwLG4ucGF0aEhhc1ByZWZpeCkoZSwiIil9KCJmdW5jdGlvbiI9PXR5cGVvZiB0LmRlZmF1bHR8fCJvYmplY3QiPT10eXBlb2YgdC5kZWZhdWx0JiZudWxsIT09dC5kZWZhdWx0KSYmdm9pZCAwPT09dC5kZWZhdWx0Ll9fZXNNb2R1bGUmJihPYmplY3QuZGVmaW5lUHJvcGVydHkodC5kZWZhdWx0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxPYmplY3QuYXNzaWduKHQuZGVmYXVsdCx0KSxlLmV4cG9ydHM9dC5kZWZhdWx0KX0sMzA1OTY6ZnVuY3Rpb24oZSx0KXsidXNlIHN0cmljdCI7bGV0IHI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpT2JqZWN0LmRlZmluZVByb3BlcnR5KGUscix7ZW51bWVyYWJsZTohMCxnZXQ6dFtyXX0pfSh0LHtET01BdHRyaWJ1dGVOYW1lczpmdW5jdGlvbigpe3JldHVybiBufSxkZWZhdWx0OmZ1bmN0aW9uKCl7cmV0dXJuIGl9LGlzRXF1YWxOb2RlOmZ1bmN0aW9uKCl7cmV0dXJuIGF9fSk7bGV0IG49e2FjY2VwdENoYXJzZXQ6ImFjY2VwdC1jaGFyc2V0IixjbGFzc05hbWU6ImNsYXNzIixodG1sRm9yOiJmb3IiLGh0dHBFcXVpdjoiaHR0cC1lcXVpdiIsbm9Nb2R1bGU6Im5vTW9kdWxlIn07ZnVuY3Rpb24gbyhlKXtsZXR7dHlwZTp0LHByb3BzOnJ9PWUsbz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KHQpO2ZvcihsZXQgZSBpbiByKXtpZighci5oYXNPd25Qcm9wZXJ0eShlKXx8ImNoaWxkcmVuIj09PWV8fCJkYW5nZXJvdXNseVNldElubmVySFRNTCI9PT1lfHx2b2lkIDA9PT1yW2VdKWNvbnRpbnVlO2xldCBhPW5bZV18fGUudG9Mb3dlckNhc2UoKTsic2NyaXB0Ij09PXQmJigiYXN5bmMiPT09YXx8ImRlZmVyIj09PWF8fCJub01vZHVsZSI9PT1hKT9vW2FdPSEhcltlXTpvLnNldEF0dHJpYnV0ZShhLHJbZV0pfWxldHtjaGlsZHJlbjphLGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOml9PXI7cmV0dXJuIGk/by5pbm5lckhUTUw9aS5fX2h0bWx8fCIiOmEmJihvLnRleHRDb250ZW50PSJzdHJpbmciPT10eXBlb2YgYT9hOkFycmF5LmlzQXJyYXkoYSk/YS5qb2luKCIiKToiIiksb31mdW5jdGlvbiBhKGUsdCl7aWYoZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50JiZ0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpe2xldCByPXQuZ2V0QXR0cmlidXRlKCJub25jZSIpO2lmKHImJiFlLmdldEF0dHJpYnV0ZSgibm9uY2UiKSl7bGV0IG49dC5jbG9uZU5vZGUoITApO3JldHVybiBuLnNldEF0dHJpYnV0ZSgibm9uY2UiLCIiKSxuLm5vbmNlPXIscj09PWUubm9uY2UmJmUuaXNFcXVhbE5vZGUobil9fXJldHVybiBlLmlzRXF1YWxOb2RlKHQpfWZ1bmN0aW9uIGkoKXtyZXR1cm57bW91bnRlZEluc3RhbmNlczpuZXcgU2V0LHVwZGF0ZUhlYWQ6ZT0+e2xldCB0PXt9O2UuZm9yRWFjaChlPT57aWYoImxpbmsiPT09ZS50eXBlJiZlLnByb3BzWyJkYXRhLW9wdGltaXplZC1mb250cyJdKXtpZihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdzdHlsZVtkYXRhLWhyZWY9IicrZS5wcm9wc1siZGF0YS1ocmVmIl0rJyJdJykpcmV0dXJuO2UucHJvcHMuaHJlZj1lLnByb3BzWyJkYXRhLWhyZWYiXSxlLnByb3BzWyJkYXRhLWhyZWYiXT12b2lkIDB9bGV0IHI9dFtlLnR5cGVdfHxbXTtyLnB1c2goZSksdFtlLnR5cGVdPXJ9KTtsZXQgbj10LnRpdGxlP3QudGl0bGVbMF06bnVsbCxvPSIiO2lmKG4pe2xldHtjaGlsZHJlbjplfT1uLnByb3BzO289InN0cmluZyI9PXR5cGVvZiBlP2U6QXJyYXkuaXNBcnJheShlKT9lLmpvaW4oIiIpOiIifW8hPT1kb2N1bWVudC50aXRsZSYmKGRvY3VtZW50LnRpdGxlPW8pLFsibWV0YSIsImJhc2UiLCJsaW5rIiwic3R5bGUiLCJzY3JpcHQiXS5mb3JFYWNoKGU9PntyKGUsdFtlXXx8W10pfSl9fX1yPShlLHQpPT57bGV0IHI9ZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImhlYWQiKVswXSxuPXIucXVlcnlTZWxlY3RvcigibWV0YVtuYW1lPW5leHQtaGVhZC1jb3VudF0iKSxpPU51bWJlcihuLmNvbnRlbnQpLHU9W107Zm9yKGxldCB0PTAscj1uLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7dDxpO3QrKyxyPShudWxsPT1yP3ZvaWQgMDpyLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpfHxudWxsKXt2YXIgbDsobnVsbD09cj92b2lkIDA6bnVsbD09KGw9ci50YWdOYW1lKT92b2lkIDA6bC50b0xvd2VyQ2FzZSgpKT09PWUmJnUucHVzaChyKX1sZXQgcz10Lm1hcChvKS5maWx0ZXIoZT0+e2ZvcihsZXQgdD0wLHI9dS5sZW5ndGg7dDxyO3QrKylpZihhKHVbdF0sZSkpcmV0dXJuIHUuc3BsaWNlKHQsMSksITE7cmV0dXJuITB9KTt1LmZvckVhY2goZT0+e3ZhciB0O3JldHVybiBudWxsPT0odD1lLnBhcmVudE5vZGUpP3ZvaWQgMDp0LnJlbW92ZUNoaWxkKGUpfSkscy5mb3JFYWNoKGU9PnIuaW5zZXJ0QmVmb3JlKGUsbikpLG4uY29udGVudD0oaS11Lmxlbmd0aCtzLmxlbmd0aCkudG9TdHJpbmcoKX0sKCJmdW5jdGlvbiI9PXR5cGVvZiB0LmRlZmF1bHR8fCJvYmplY3QiPT10eXBlb2YgdC5kZWZhdWx0JiZudWxsIT09dC5kZWZhdWx0KSYmdm9pZCAwPT09dC5kZWZhdWx0Ll9fZXNNb2R1bGUmJihPYmplY3QuZGVmaW5lUHJvcGVydHkodC5kZWZhdWx0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxPYmplY3QuYXNzaWduKHQuZGVmYXVsdCx0KSxlLmV4cG9ydHM9dC5kZWZhdWx0KX0sNzY1ODU6ZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtsZXQgbixvLGEsaSx1LGwscyxjLGYsZCxwLGg7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO2xldCBtPXIoMTE3NzgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHIse2VudW1lcmFibGU6ITAsZ2V0OnRbcl19KX0odCx7ZW1pdHRlcjpmdW5jdGlvbigpe3JldHVybiB6fSxoeWRyYXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGVmfSxpbml0aWFsaXplOmZ1bmN0aW9uKCl7cmV0dXJuIEt9LHJvdXRlcjpmdW5jdGlvbigpe3JldHVybiBufSx2ZXJzaW9uOmZ1bmN0aW9uKCl7cmV0dXJuIEd9fSk7bGV0IF89cig0MjQzMCksZz1yKDUyNjc2KTtyKDQzNDQ2KTtsZXQgeT1fLl8ocig3NTI3MSkpLGI9Xy5fKHIoMzg3NTEpKSxQPXIoNzg4MDEpLHY9Xy5fKHIoNjY0MDYpKSxFPXIoNTUzNjgpLFM9cig2MTAzMCksTz1yKDU5OTIxKSxqPXIoODMwNzkpLHc9cig1MzM0NCksUj1yKDczMDA2KSxUPXIoNTczOTYpLE09Xy5fKHIoMzA1OTYpKSx4PV8uXyhyKDE1NDkwKSksST1fLl8ocigzMDUyNikpLEM9cig2MTY0MyksQT1yKDY0MTY1KSxMPXIoMTg2MTgpLE49cig2NDkwMyksRD1yKDQ3ODg5KSxrPXIoOTQ4ODIpLEY9cig5NDcwNiksVT1yKDc0MjI0KSxCPXIoMzgzMTgpLEg9Xy5fKHIoMTA1MjIpKSxXPV8uXyhyKDU3NTY4KSkscT1fLl8ocig3OTkxOCkpLEc9IjE0LjIuMTAiLHo9KDAsdi5kZWZhdWx0KSgpLFY9ZT0+W10uc2xpY2UuY2FsbChlKSxYPSExO2NsYXNzIFkgZXh0ZW5kcyB5LmRlZmF1bHQuQ29tcG9uZW50e2NvbXBvbmVudERpZENhdGNoKGUsdCl7dGhpcy5wcm9wcy5mbihlLHQpfWNvbXBvbmVudERpZE1vdW50KCl7dGhpcy5zY3JvbGxUb0hhc2goKSxuLmlzU3NyJiYoby5pc0ZhbGxiYWNrfHxvLm5leHRFeHBvcnQmJigoMCxPLmlzRHluYW1pY1JvdXRlKShuLnBhdGhuYW1lKXx8bG9jYXRpb24uc2VhcmNofHxYKXx8by5wcm9wcyYmby5wcm9wcy5fX05fU1NHJiYobG9jYXRpb24uc2VhcmNofHxYKSkmJm4ucmVwbGFjZShuLnBhdGhuYW1lKyI/IitTdHJpbmcoKDAsai5hc3NpZ24pKCgwLGoudXJsUXVlcnlUb1NlYXJjaFBhcmFtcykobi5xdWVyeSksbmV3IFVSTFNlYXJjaFBhcmFtcyhsb2NhdGlvbi5zZWFyY2gpKSksYSx7X2g6MSxzaGFsbG93OiFvLmlzRmFsbGJhY2smJiFYfSkuY2F0Y2goZT0+e2lmKCFlLmNhbmNlbGxlZCl0aHJvdyBlfSl9Y29tcG9uZW50RGlkVXBkYXRlKCl7dGhpcy5zY3JvbGxUb0hhc2goKX1zY3JvbGxUb0hhc2goKXtsZXR7aGFzaDplfT1sb2NhdGlvbjtpZighKGU9ZSYmZS5zdWJzdHJpbmcoMSkpKXJldHVybjtsZXQgdD1kb2N1bWVudC5nZXRFbGVtZW50QnlJZChlKTt0JiZzZXRUaW1lb3V0KCgpPT50LnNjcm9sbEludG9WaWV3KCksMCl9cmVuZGVyKCl7cmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW59fWFzeW5jIGZ1bmN0aW9uIEsoZSl7dm9pZCAwPT09ZSYmKGU9e30pLFcuZGVmYXVsdC5vblNwYW5FbmQocS5kZWZhdWx0KSxvPUpTT04ucGFyc2UoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIl9fTkVYVF9EQVRBX18iKS50ZXh0Q29udGVudCksd2luZG93Ll9fTkVYVF9EQVRBX189byxoPW8uZGVmYXVsdExvY2FsZTtsZXQgdD1vLmFzc2V0UHJlZml4fHwiIjtpZihzZWxmLl9fbmV4dF9zZXRfcHVibGljX3BhdGhfXygiIit0KyIvX25leHQvIiksKDAsdy5zZXRDb25maWcpKHtzZXJ2ZXJSdW50aW1lQ29uZmlnOnt9LHB1YmxpY1J1bnRpbWVDb25maWc6by5ydW50aW1lQ29uZmlnfHx7fX0pLGE9KDAsUi5nZXRVUkwpKCksKDAsay5oYXNCYXNlUGF0aCkoYSkmJihhPSgwLEQucmVtb3ZlQmFzZVBhdGgpKGEpKSxvLnNjcmlwdExvYWRlcil7bGV0e2luaXRTY3JpcHRMb2FkZXI6ZX09cigxNjcyMSk7ZShvLnNjcmlwdExvYWRlcil9aT1uZXcgeC5kZWZhdWx0KG8uYnVpbGRJZCx0KTtsZXQgcz1lPT57bGV0W3Qscl09ZTtyZXR1cm4gaS5yb3V0ZUxvYWRlci5vbkVudHJ5cG9pbnQodCxyKX07cmV0dXJuIHdpbmRvdy5fX05FWFRfUCYmd2luZG93Ll9fTkVYVF9QLm1hcChlPT5zZXRUaW1lb3V0KCgpPT5zKGUpLDApKSx3aW5kb3cuX19ORVhUX1A9W10sd2luZG93Ll9fTkVYVF9QLnB1c2g9cywobD0oMCxNLmRlZmF1bHQpKCkpLmdldElzU3NyPSgpPT5uLmlzU3NyLHU9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIl9fbmV4dCIpLHthc3NldFByZWZpeDp0fX1mdW5jdGlvbiAkKGUsdCl7cmV0dXJuKDAsZy5qc3gpKGUsey4uLnR9KX1mdW5jdGlvbiBKKGUpe3ZhciB0O2xldHtjaGlsZHJlbjpyfT1lLG89eS5kZWZhdWx0LnVzZU1lbW8oKCk9PigwLFUuYWRhcHRGb3JBcHBSb3V0ZXJJbnN0YW5jZSkobiksW10pO3JldHVybigwLGcuanN4KShZLHtmbjplPT5aKHtBcHA6ZixlcnI6ZX0pLmNhdGNoKGU9PmNvbnNvbGUuZXJyb3IoIkVycm9yIHJlbmRlcmluZyBwYWdlOiAiLGUpKSxjaGlsZHJlbjooMCxnLmpzeCkoRi5BcHBSb3V0ZXJDb250ZXh0LlByb3ZpZGVyLHt2YWx1ZTpvLGNoaWxkcmVuOigwLGcuanN4KShCLlNlYXJjaFBhcmFtc0NvbnRleHQuUHJvdmlkZXIse3ZhbHVlOigwLFUuYWRhcHRGb3JTZWFyY2hQYXJhbXMpKG4pLGNoaWxkcmVuOigwLGcuanN4KShVLlBhdGhuYW1lQ29udGV4dFByb3ZpZGVyQWRhcHRlcix7cm91dGVyOm4saXNBdXRvRXhwb3J0Om51bGwhPSh0PXNlbGYuX19ORVhUX0RBVEFfXy5hdXRvRXhwb3J0KSYmdCxjaGlsZHJlbjooMCxnLmpzeCkoQi5QYXRoUGFyYW1zQ29udGV4dC5Qcm92aWRlcix7dmFsdWU6KDAsVS5hZGFwdEZvclBhdGhQYXJhbXMpKG4pLGNoaWxkcmVuOigwLGcuanN4KShFLlJvdXRlckNvbnRleHQuUHJvdmlkZXIse3ZhbHVlOigwLEEubWFrZVB1YmxpY1JvdXRlckluc3RhbmNlKShuKSxjaGlsZHJlbjooMCxnLmpzeCkoUC5IZWFkTWFuYWdlckNvbnRleHQuUHJvdmlkZXIse3ZhbHVlOmwsY2hpbGRyZW46KDAsZy5qc3gpKE4uSW1hZ2VDb25maWdDb250ZXh0LlByb3ZpZGVyLHt2YWx1ZTp7ZGV2aWNlU2l6ZXM6WzY0MCw3NTAsODI4LDEwODAsMTIwMCwxOTIwLDIwNDgsMzg0MF0saW1hZ2VTaXplczpbMTYsMzIsNDgsNjQsOTYsMTI4LDI1NiwzODRdLHBhdGg6Ii9fbmV4dC9pbWFnZSIsbG9hZGVyOiJkZWZhdWx0IixkYW5nZXJvdXNseUFsbG93U1ZHOiExLHVub3B0aW1pemVkOiEwfSxjaGlsZHJlbjpyfSl9KX0pfSl9KX0pfSl9KX1sZXQgUT1lPT50PT57bGV0IHI9ey4uLnQsQ29tcG9uZW50OnAsZXJyOm8uZXJyLHJvdXRlcjpufTtyZXR1cm4oMCxnLmpzeCkoSix7Y2hpbGRyZW46JChlLHIpfSl9O2Z1bmN0aW9uIFooZSl7bGV0e0FwcDp0LGVycjp1fT1lO3JldHVybiBjb25zb2xlLmVycm9yKHUpLGNvbnNvbGUuZXJyb3IoIkEgY2xpZW50LXNpZGUgZXhjZXB0aW9uIGhhcyBvY2N1cnJlZCwgc2VlIGhlcmUgZm9yIG1vcmUgaW5mbzogaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvbWVzc2FnZXMvY2xpZW50LXNpZGUtZXhjZXB0aW9uLW9jY3VycmVkIiksaS5sb2FkUGFnZSgiL19lcnJvciIpLnRoZW4obj0+e2xldHtwYWdlOm8sc3R5bGVTaGVldHM6YX09bjtyZXR1cm4obnVsbD09cz92b2lkIDA6cy5Db21wb25lbnQpPT09bz9Qcm9taXNlLnJlc29sdmUoKS50aGVuKCgpPT5tLl8ocigxMTI5MikpKS50aGVuKG49PlByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCk9Pm0uXyhyKDMxMjA0KSkpLnRoZW4ocj0+KHQ9ci5kZWZhdWx0LGUuQXBwPXQsbikpKS50aGVuKGU9Pih7RXJyb3JDb21wb25lbnQ6ZS5kZWZhdWx0LHN0eWxlU2hlZXRzOltdfSkpOntFcnJvckNvbXBvbmVudDpvLHN0eWxlU2hlZXRzOmF9fSkudGhlbihyPT57dmFyIGk7bGV0e0Vycm9yQ29tcG9uZW50Omwsc3R5bGVTaGVldHM6c309cixjPVEodCksZj17Q29tcG9uZW50OmwsQXBwVHJlZTpjLHJvdXRlcjpuLGN0eDp7ZXJyOnUscGF0aG5hbWU6by5wYWdlLHF1ZXJ5Om8ucXVlcnksYXNQYXRoOmEsQXBwVHJlZTpjfX07cmV0dXJuIFByb21pc2UucmVzb2x2ZSgobnVsbD09KGk9ZS5wcm9wcyk/dm9pZCAwOmkuZXJyKT9lLnByb3BzOigwLFIubG9hZEdldEluaXRpYWxQcm9wcykodCxmKSkudGhlbih0PT5lcyh7Li4uZSxlcnI6dSxDb21wb25lbnQ6bCxzdHlsZVNoZWV0czpzLHByb3BzOnR9KSl9KX1mdW5jdGlvbiBlZShlKXtsZXR7Y2FsbGJhY2s6dH09ZTtyZXR1cm4geS5kZWZhdWx0LnVzZUxheW91dEVmZmVjdCgoKT0+dCgpLFt0XSksbnVsbH1sZXQgZXQ9e25hdmlnYXRpb25TdGFydDoibmF2aWdhdGlvblN0YXJ0IixiZWZvcmVSZW5kZXI6ImJlZm9yZVJlbmRlciIsYWZ0ZXJSZW5kZXI6ImFmdGVyUmVuZGVyIixhZnRlckh5ZHJhdGU6ImFmdGVySHlkcmF0ZSIscm91dGVDaGFuZ2U6InJvdXRlQ2hhbmdlIn0sZXI9e2h5ZHJhdGlvbjoiTmV4dC5qcy1oeWRyYXRpb24iLGJlZm9yZUh5ZHJhdGlvbjoiTmV4dC5qcy1iZWZvcmUtaHlkcmF0aW9uIixyb3V0ZUNoYW5nZVRvUmVuZGVyOiJOZXh0LmpzLXJvdXRlLWNoYW5nZS10by1yZW5kZXIiLHJlbmRlcjoiTmV4dC5qcy1yZW5kZXIifSxlbj1udWxsLGVvPSEwO2Z1bmN0aW9uIGVhKCl7W2V0LmJlZm9yZVJlbmRlcixldC5hZnRlckh5ZHJhdGUsZXQuYWZ0ZXJSZW5kZXIsZXQucm91dGVDaGFuZ2VdLmZvckVhY2goZT0+cGVyZm9ybWFuY2UuY2xlYXJNYXJrcyhlKSl9ZnVuY3Rpb24gZWkoKXtSLlNUJiYocGVyZm9ybWFuY2UubWFyayhldC5hZnRlckh5ZHJhdGUpLHBlcmZvcm1hbmNlLmdldEVudHJpZXNCeU5hbWUoZXQuYmVmb3JlUmVuZGVyLCJtYXJrIikubGVuZ3RoJiYocGVyZm9ybWFuY2UubWVhc3VyZShlci5iZWZvcmVIeWRyYXRpb24sZXQubmF2aWdhdGlvblN0YXJ0LGV0LmJlZm9yZVJlbmRlcikscGVyZm9ybWFuY2UubWVhc3VyZShlci5oeWRyYXRpb24sZXQuYmVmb3JlUmVuZGVyLGV0LmFmdGVySHlkcmF0ZSkpLGQmJnBlcmZvcm1hbmNlLmdldEVudHJpZXNCeU5hbWUoZXIuaHlkcmF0aW9uKS5mb3JFYWNoKGQpLGVhKCkpfWZ1bmN0aW9uIGV1KCl7aWYoIVIuU1QpcmV0dXJuO3BlcmZvcm1hbmNlLm1hcmsoZXQuYWZ0ZXJSZW5kZXIpO2xldCBlPXBlcmZvcm1hbmNlLmdldEVudHJpZXNCeU5hbWUoZXQucm91dGVDaGFuZ2UsIm1hcmsiKTtlLmxlbmd0aCYmKHBlcmZvcm1hbmNlLmdldEVudHJpZXNCeU5hbWUoZXQuYmVmb3JlUmVuZGVyLCJtYXJrIikubGVuZ3RoJiYocGVyZm9ybWFuY2UubWVhc3VyZShlci5yb3V0ZUNoYW5nZVRvUmVuZGVyLGVbMF0ubmFtZSxldC5iZWZvcmVSZW5kZXIpLHBlcmZvcm1hbmNlLm1lYXN1cmUoZXIucmVuZGVyLGV0LmJlZm9yZVJlbmRlcixldC5hZnRlclJlbmRlciksZCYmKHBlcmZvcm1hbmNlLmdldEVudHJpZXNCeU5hbWUoZXIucmVuZGVyKS5mb3JFYWNoKGQpLHBlcmZvcm1hbmNlLmdldEVudHJpZXNCeU5hbWUoZXIucm91dGVDaGFuZ2VUb1JlbmRlcikuZm9yRWFjaChkKSkpLGVhKCksW2VyLnJvdXRlQ2hhbmdlVG9SZW5kZXIsZXIucmVuZGVyXS5mb3JFYWNoKGU9PnBlcmZvcm1hbmNlLmNsZWFyTWVhc3VyZXMoZSkpKX1mdW5jdGlvbiBlbChlKXtsZXR7Y2FsbGJhY2tzOnQsY2hpbGRyZW46cn09ZTtyZXR1cm4geS5kZWZhdWx0LnVzZUxheW91dEVmZmVjdCgoKT0+dC5mb3JFYWNoKGU9PmUoKSksW3RdKSx5LmRlZmF1bHQudXNlRWZmZWN0KCgpPT57KDAsSS5kZWZhdWx0KShkKX0sW10pLHJ9ZnVuY3Rpb24gZXMoZSl7bGV0IHQse0FwcDpyLENvbXBvbmVudDpvLHByb3BzOmEsZXJyOml9PWUsbD0iaW5pdGlhbCJpbiBlP3ZvaWQgMDplLnN0eWxlU2hlZXRzO289b3x8cy5Db21wb25lbnQ7bGV0IGY9ey4uLmE9YXx8cy5wcm9wcyxDb21wb25lbnQ6byxlcnI6aSxyb3V0ZXI6bn07cz1mO2xldCBkPSExLHA9bmV3IFByb21pc2UoKGUscik9PntjJiZjKCksdD0oKT0+e2M9bnVsbCxlKCl9LGM9KCk9PntkPSEwLGM9bnVsbDtsZXQgZT1FcnJvcigiQ2FuY2VsIHJlbmRlcmluZyByb3V0ZSIpO2UuY2FuY2VsbGVkPSEwLHIoZSl9fSk7ZnVuY3Rpb24gaCgpe3QoKX0hZnVuY3Rpb24oKXtpZighbClyZXR1cm47bGV0IGU9bmV3IFNldChWKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoInN0eWxlW2RhdGEtbi1ocmVmXSIpKS5tYXAoZT0+ZS5nZXRBdHRyaWJ1dGUoImRhdGEtbi1ocmVmIikpKSx0PWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIm5vc2NyaXB0W2RhdGEtbi1jc3NdIikscj1udWxsPT10P3ZvaWQgMDp0LmdldEF0dHJpYnV0ZSgiZGF0YS1uLWNzcyIpO2wuZm9yRWFjaCh0PT57bGV0e2hyZWY6bix0ZXh0Om99PXQ7aWYoIWUuaGFzKG4pKXtsZXQgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzdHlsZSIpO2Uuc2V0QXR0cmlidXRlKCJkYXRhLW4taHJlZiIsbiksZS5zZXRBdHRyaWJ1dGUoIm1lZGlhIiwieCIpLHImJmUuc2V0QXR0cmlidXRlKCJub25jZSIsciksZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChlKSxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG8pKX19KX0oKTtsZXQgbT0oMCxnLmpzeHMpKGcuRnJhZ21lbnQse2NoaWxkcmVuOlsoMCxnLmpzeCkoZWUse2NhbGxiYWNrOmZ1bmN0aW9uKCl7aWYobCYmIWQpe2xldCBlPW5ldyBTZXQobC5tYXAoZT0+ZS5ocmVmKSksdD1WKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoInN0eWxlW2RhdGEtbi1ocmVmXSIpKSxyPXQubWFwKGU9PmUuZ2V0QXR0cmlidXRlKCJkYXRhLW4taHJlZiIpKTtmb3IobGV0IG49MDtuPHIubGVuZ3RoOysrbillLmhhcyhyW25dKT90W25dLnJlbW92ZUF0dHJpYnV0ZSgibWVkaWEiKTp0W25dLnNldEF0dHJpYnV0ZSgibWVkaWEiLCJ4Iik7bGV0IG49ZG9jdW1lbnQucXVlcnlTZWxlY3Rvcigibm9zY3JpcHRbZGF0YS1uLWNzc10iKTtuJiZsLmZvckVhY2goZT0+e2xldHtocmVmOnR9PWUscj1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdzdHlsZVtkYXRhLW4taHJlZj0iJyt0KyciXScpO3ImJihuLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHIsbi5uZXh0U2libGluZyksbj1yKX0pLFYoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgibGlua1tkYXRhLW4tcF0iKSkuZm9yRWFjaChlPT57ZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUpfSl9aWYoZS5zY3JvbGwpe2xldHt4OnQseTpyfT1lLnNjcm9sbDsoMCxTLmhhbmRsZVNtb290aFNjcm9sbCkoKCk9Pnt3aW5kb3cuc2Nyb2xsVG8odCxyKX0pfX19KSwoMCxnLmpzeHMpKEose2NoaWxkcmVuOlskKHIsZiksKDAsZy5qc3gpKFQuUG9ydGFsLHt0eXBlOiJuZXh0LXJvdXRlLWFubm91bmNlciIsY2hpbGRyZW46KDAsZy5qc3gpKEMuUm91dGVBbm5vdW5jZXIse30pfSldfSldfSk7cmV0dXJuIWZ1bmN0aW9uKGUsdCl7Ui5TVCYmcGVyZm9ybWFuY2UubWFyayhldC5iZWZvcmVSZW5kZXIpO2xldCByPXQoZW8/ZWk6ZXUpO2VuPygwLHkuZGVmYXVsdC5zdGFydFRyYW5zaXRpb24pKCgpPT57ZW4ucmVuZGVyKHIpfSk6KGVuPWIuZGVmYXVsdC5oeWRyYXRlUm9vdChlLHIse29uUmVjb3ZlcmFibGVFcnJvcjpILmRlZmF1bHR9KSxlbz0hMSl9KHUsZT0+KDAsZy5qc3gpKGVsLHtjYWxsYmFja3M6W2UsaF0sY2hpbGRyZW46bX0pKSxwfWFzeW5jIGZ1bmN0aW9uIGVjKGUpe2lmKGUuZXJyJiYodm9pZCAwPT09ZS5Db21wb25lbnR8fCFlLmlzSHlkcmF0ZVBhc3MpKXthd2FpdCBaKGUpO3JldHVybn10cnl7YXdhaXQgZXMoZSl9Y2F0Y2gocil7bGV0IHQ9KDAsTC5nZXRQcm9wZXJFcnJvcikocik7aWYodC5jYW5jZWxsZWQpdGhyb3cgdDthd2FpdCBaKHsuLi5lLGVycjp0fSl9fWFzeW5jIGZ1bmN0aW9uIGVmKGUpe2xldCB0PW8uZXJyO3RyeXtsZXQgZT1hd2FpdCBpLnJvdXRlTG9hZGVyLndoZW5FbnRyeXBvaW50KCIvX2FwcCIpO2lmKCJlcnJvciJpbiBlKXRocm93IGUuZXJyb3I7bGV0e2NvbXBvbmVudDp0LGV4cG9ydHM6cn09ZTtmPXQsciYmci5yZXBvcnRXZWJWaXRhbHMmJihkPWU9PntsZXQgdCx7aWQ6bixuYW1lOm8sc3RhcnRUaW1lOmEsdmFsdWU6aSxkdXJhdGlvbjp1LGVudHJ5VHlwZTpsLGVudHJpZXM6cyxhdHRyaWJ1dGlvbjpjfT1lLGY9RGF0ZS5ub3coKSsiLSIrKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSooOWUxMi0xKSkrMWUxMik7cyYmcy5sZW5ndGgmJih0PXNbMF0uc3RhcnRUaW1lKTtsZXQgZD17aWQ6bnx8ZixuYW1lOm8sc3RhcnRUaW1lOmF8fHQsdmFsdWU6bnVsbD09aT91OmksbGFiZWw6Im1hcmsiPT09bHx8Im1lYXN1cmUiPT09bD8iY3VzdG9tIjoid2ViLXZpdGFsIn07YyYmKGQuYXR0cmlidXRpb249Yyksci5yZXBvcnRXZWJWaXRhbHMoZCl9KTtsZXQgbj1hd2FpdCBpLnJvdXRlTG9hZGVyLndoZW5FbnRyeXBvaW50KG8ucGFnZSk7aWYoImVycm9yImluIG4pdGhyb3cgbi5lcnJvcjtwPW4uY29tcG9uZW50fWNhdGNoKGUpe3Q9KDAsTC5nZXRQcm9wZXJFcnJvcikoZSl9d2luZG93Ll9fTkVYVF9QUkVMT0FEUkVBRFkmJmF3YWl0IHdpbmRvdy5fX05FWFRfUFJFTE9BRFJFQURZKG8uZHluYW1pY0lkcyksbj0oMCxBLmNyZWF0ZVJvdXRlcikoby5wYWdlLG8ucXVlcnksYSx7aW5pdGlhbFByb3BzOm8ucHJvcHMscGFnZUxvYWRlcjppLEFwcDpmLENvbXBvbmVudDpwLHdyYXBBcHA6USxlcnI6dCxpc0ZhbGxiYWNrOiEhby5pc0ZhbGxiYWNrLHN1YnNjcmlwdGlvbjooZSx0LHIpPT5lYyhPYmplY3QuYXNzaWduKHt9LGUse0FwcDp0LHNjcm9sbDpyfSkpLGxvY2FsZTpvLmxvY2FsZSxsb2NhbGVzOm8ubG9jYWxlcyxkZWZhdWx0TG9jYWxlOmgsZG9tYWluTG9jYWxlczpvLmRvbWFpbkxvY2FsZXMsaXNQcmV2aWV3Om8uaXNQcmV2aWV3fSksWD1hd2FpdCBuLl9pbml0aWFsTWF0Y2hlc01pZGRsZXdhcmVQcm9taXNlO2xldCByPXtBcHA6Zixpbml0aWFsOiEwLENvbXBvbmVudDpwLHByb3BzOm8ucHJvcHMsZXJyOnQsaXNIeWRyYXRlUGFzczohMH07KG51bGw9PWU/dm9pZCAwOmUuYmVmb3JlUmVuZGVyKSYmYXdhaXQgZS5iZWZvcmVSZW5kZXIoKSxlYyhyKX0oImZ1bmN0aW9uIj09dHlwZW9mIHQuZGVmYXVsdHx8Im9iamVjdCI9PXR5cGVvZiB0LmRlZmF1bHQmJm51bGwhPT10LmRlZmF1bHQpJiZ2b2lkIDA9PT10LmRlZmF1bHQuX19lc01vZHVsZSYmKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LmRlZmF1bHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLE9iamVjdC5hc3NpZ24odC5kZWZhdWx0LHQpLGUuZXhwb3J0cz10LmRlZmF1bHQpfSw2MzE3ODpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxyKDExMjA5KTtsZXQgbj1yKDc2NTg1KTt3aW5kb3cubmV4dD17dmVyc2lvbjpuLnZlcnNpb24sZ2V0IHJvdXRlcigpe3JldHVybiBuLnJvdXRlcn0sZW1pdHRlcjpuLmVtaXR0ZXJ9LCgwLG4uaW5pdGlhbGl6ZSkoe30pLnRoZW4oKCk9PigwLG4uaHlkcmF0ZSkoKSkuY2F0Y2goY29uc29sZS5lcnJvciksKCJmdW5jdGlvbiI9PXR5cGVvZiB0LmRlZmF1bHR8fCJvYmplY3QiPT10eXBlb2YgdC5kZWZhdWx0JiZudWxsIT09dC5kZWZhdWx0KSYmdm9pZCAwPT09dC5kZWZhdWx0Ll9fZXNNb2R1bGUmJihPYmplY3QuZGVmaW5lUHJvcGVydHkodC5kZWZhdWx0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxPYmplY3QuYXNzaWduKHQuZGVmYXVsdCx0KSxlLmV4cG9ydHM9dC5kZWZhdWx0KX0sMTU4MTk6ZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIm5vcm1hbGl6ZVBhdGhUcmFpbGluZ1NsYXNoIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYX19KTtsZXQgbj1yKDg2NjIzKSxvPXIoNzY0NzgpLGE9ZT0+e2lmKCFlLnN0YXJ0c1dpdGgoIi8iKSlyZXR1cm4gZTtsZXR7cGF0aG5hbWU6dCxxdWVyeTpyLGhhc2g6YX09KDAsby5wYXJzZVBhdGgpKGUpO3JldHVybiIiKygwLG4ucmVtb3ZlVHJhaWxpbmdTbGFzaCkodCkrcithfTsoImZ1bmN0aW9uIj09dHlwZW9mIHQuZGVmYXVsdHx8Im9iamVjdCI9PXR5cGVvZiB0LmRlZmF1bHQmJm51bGwhPT10LmRlZmF1bHQpJiZ2b2lkIDA9PT10LmRlZmF1bHQuX19lc01vZHVsZSYmKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LmRlZmF1bHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLE9iamVjdC5hc3NpZ24odC5kZWZhdWx0LHQpLGUuZXhwb3J0cz10LmRlZmF1bHQpfSwxMDUyMjpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiZGVmYXVsdCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG99fSk7bGV0IG49cigyMTgzMCk7ZnVuY3Rpb24gbyhlKXtsZXQgdD0iZnVuY3Rpb24iPT10eXBlb2YgcmVwb3J0RXJyb3I/cmVwb3J0RXJyb3I6ZT0+e3dpbmRvdy5jb25zb2xlLmVycm9yKGUpfTsoMCxuLmlzQmFpbG91dFRvQ1NSRXJyb3IpKGUpfHx0KGUpfSgiZnVuY3Rpb24iPT10eXBlb2YgdC5kZWZhdWx0fHwib2JqZWN0Ij09dHlwZW9mIHQuZGVmYXVsdCYmbnVsbCE9PXQuZGVmYXVsdCkmJnZvaWQgMD09PXQuZGVmYXVsdC5fX2VzTW9kdWxlJiYoT2JqZWN0LmRlZmluZVByb3BlcnR5KHQuZGVmYXVsdCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksT2JqZWN0LmFzc2lnbih0LmRlZmF1bHQsdCksZS5leHBvcnRzPXQuZGVmYXVsdCl9LDE1NDkwOmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJkZWZhdWx0Iix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZH19KTtsZXQgbj1yKDQyNDMwKSxvPXIoODE4MTcpLGE9cig3NDk0MyksaT1uLl8ocigyODI3MSkpLHU9cigzNzA5NSksbD1yKDU5OTIxKSxzPXIoOTk2OTgpLGM9cig4NjYyMyksZj1yKDY4MzgxKTtyKDgyNDEyKTtjbGFzcyBke2dldFBhZ2VMaXN0KCl7cmV0dXJuKDAsZi5nZXRDbGllbnRCdWlsZE1hbmlmZXN0KSgpLnRoZW4oZT0+ZS5zb3J0ZWRQYWdlcyl9Z2V0TWlkZGxld2FyZSgpe3JldHVybiB3aW5kb3cuX19NSURETEVXQVJFX01BVENIRVJTPVtdLHdpbmRvdy5fX01JRERMRVdBUkVfTUFUQ0hFUlN9Z2V0RGF0YUhyZWYoZSl7bGV0e2FzUGF0aDp0LGhyZWY6cixsb2NhbGU6bn09ZSx7cGF0aG5hbWU6ZixxdWVyeTpkLHNlYXJjaDpwfT0oMCxzLnBhcnNlUmVsYXRpdmVVcmwpKHIpLHtwYXRobmFtZTpofT0oMCxzLnBhcnNlUmVsYXRpdmVVcmwpKHQpLG09KDAsYy5yZW1vdmVUcmFpbGluZ1NsYXNoKShmKTtpZigiLyIhPT1tWzBdKXRocm93IEVycm9yKCdSb3V0ZSBuYW1lIHNob3VsZCBzdGFydCB3aXRoIGEgIi8iLCBnb3QgIicrbSsnIicpO3JldHVybihlPT57bGV0IHQ9KDAsaS5kZWZhdWx0KSgoMCxjLnJlbW92ZVRyYWlsaW5nU2xhc2gpKCgwLHUuYWRkTG9jYWxlKShlLG4pKSwiLmpzb24iKTtyZXR1cm4oMCxvLmFkZEJhc2VQYXRoKSgiL19uZXh0L2RhdGEvIit0aGlzLmJ1aWxkSWQrdCtwLCEwKX0pKGUuc2tpcEludGVycG9sYXRpb24/aDooMCxsLmlzRHluYW1pY1JvdXRlKShtKT8oMCxhLmludGVycG9sYXRlQXMpKGYsaCxkKS5yZXN1bHQ6bSl9X2lzU3NnKGUpe3JldHVybiB0aGlzLnByb21pc2VkU3NnTWFuaWZlc3QudGhlbih0PT50LmhhcyhlKSl9bG9hZFBhZ2UoZSl7cmV0dXJuIHRoaXMucm91dGVMb2FkZXIubG9hZFJvdXRlKGUpLnRoZW4oZT0+e2lmKCJjb21wb25lbnQiaW4gZSlyZXR1cm57cGFnZTplLmNvbXBvbmVudCxtb2Q6ZS5leHBvcnRzLHN0eWxlU2hlZXRzOmUuc3R5bGVzLm1hcChlPT4oe2hyZWY6ZS5ocmVmLHRleHQ6ZS5jb250ZW50fSkpfTt0aHJvdyBlLmVycm9yfSl9cHJlZmV0Y2goZSl7cmV0dXJuIHRoaXMucm91dGVMb2FkZXIucHJlZmV0Y2goZSl9Y29uc3RydWN0b3IoZSx0KXt0aGlzLnJvdXRlTG9hZGVyPSgwLGYuY3JlYXRlUm91dGVMb2FkZXIpKHQpLHRoaXMuYnVpbGRJZD1lLHRoaXMuYXNzZXRQcmVmaXg9dCx0aGlzLnByb21pc2VkU3NnTWFuaWZlc3Q9bmV3IFByb21pc2UoZT0+e3dpbmRvdy5fX1NTR19NQU5JRkVTVD9lKHdpbmRvdy5fX1NTR19NQU5JRkVTVCk6d2luZG93Ll9fU1NHX01BTklGRVNUX0NCPSgpPT57ZSh3aW5kb3cuX19TU0dfTUFOSUZFU1QpfX0pfX0oImZ1bmN0aW9uIj09dHlwZW9mIHQuZGVmYXVsdHx8Im9iamVjdCI9PXR5cGVvZiB0LmRlZmF1bHQmJm51bGwhPT10LmRlZmF1bHQpJiZ2b2lkIDA9PT10LmRlZmF1bHQuX19lc01vZHVsZSYmKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LmRlZmF1bHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLE9iamVjdC5hc3NpZ24odC5kZWZhdWx0LHQpLGUuZXhwb3J0cz10LmRlZmF1bHQpfSwzMDUyNjpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2xldCBuO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiZGVmYXVsdCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHV9fSk7bGV0IG89WyJDTFMiLCJGQ1AiLCJGSUQiLCJJTlAiLCJMQ1AiLCJUVEZCIl07bG9jYXRpb24uaHJlZjtsZXQgYT0hMTtmdW5jdGlvbiBpKGUpe24mJm4oZSl9bGV0IHU9ZT0+e2lmKG49ZSwhYSlmb3IobGV0IGUgb2YoYT0hMCxvKSl0cnl7bGV0IHQ7dHx8KHQ9cig1MTU1KSksdFsib24iK2VdKGkpfWNhdGNoKHQpe2NvbnNvbGUud2FybigiRmFpbGVkIHRvIHRyYWNrICIrZSsiIHdlYi12aXRhbCIsdCl9fTsoImZ1bmN0aW9uIj09dHlwZW9mIHQuZGVmYXVsdHx8Im9iamVjdCI9PXR5cGVvZiB0LmRlZmF1bHQmJm51bGwhPT10LmRlZmF1bHQpJiZ2b2lkIDA9PT10LmRlZmF1bHQuX19lc01vZHVsZSYmKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LmRlZmF1bHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLE9iamVjdC5hc3NpZ24odC5kZWZhdWx0LHQpLGUuZXhwb3J0cz10LmRlZmF1bHQpfSw1NzM5NjpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiUG9ydGFsIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYX19KTtsZXQgbj1yKDc1MjcxKSxvPXIoMzA5NjcpLGE9ZT0+e2xldHtjaGlsZHJlbjp0LHR5cGU6cn09ZSxbYSxpXT0oMCxuLnVzZVN0YXRlKShudWxsKTtyZXR1cm4oMCxuLnVzZUVmZmVjdCkoKCk9PntsZXQgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KHIpO3JldHVybiBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGUpLGkoZSksKCk9Pntkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGUpfX0sW3JdKSxhPygwLG8uY3JlYXRlUG9ydGFsKSh0LGEpOm51bGx9OygiZnVuY3Rpb24iPT10eXBlb2YgdC5kZWZhdWx0fHwib2JqZWN0Ij09dHlwZW9mIHQuZGVmYXVsdCYmbnVsbCE9PXQuZGVmYXVsdCkmJnZvaWQgMD09PXQuZGVmYXVsdC5fX2VzTW9kdWxlJiYoT2JqZWN0LmRlZmluZVByb3BlcnR5KHQuZGVmYXVsdCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksT2JqZWN0LmFzc2lnbih0LmRlZmF1bHQsdCksZS5leHBvcnRzPXQuZGVmYXVsdCl9LDQ3ODg5OmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsInJlbW92ZUJhc2VQYXRoIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbn19KSxyKDk0ODgyKSwoImZ1bmN0aW9uIj09dHlwZW9mIHQuZGVmYXVsdHx8Im9iamVjdCI9PXR5cGVvZiB0LmRlZmF1bHQmJm51bGwhPT10LmRlZmF1bHQpJiZ2b2lkIDA9PT10LmRlZmF1bHQuX19lc01vZHVsZSYmKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LmRlZmF1bHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLE9iamVjdC5hc3NpZ24odC5kZWZhdWx0LHQpLGUuZXhwb3J0cz10LmRlZmF1bHQpfSwzMTA2OmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gbihlLHQpe3JldHVybiBlfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwicmVtb3ZlTG9jYWxlIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbn19KSxyKDc2NDc4KSwoImZ1bmN0aW9uIj09dHlwZW9mIHQuZGVmYXVsdHx8Im9iamVjdCI9PXR5cGVvZiB0LmRlZmF1bHQmJm51bGwhPT10LmRlZmF1bHQpJiZ2b2lkIDA9PT10LmRlZmF1bHQuX19lc01vZHVsZSYmKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LmRlZmF1bHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLE9iamVjdC5hc3NpZ24odC5kZWZhdWx0LHQpLGUuZXhwb3J0cz10LmRlZmF1bHQpfSw5NDcwOTpmdW5jdGlvbihlLHQpeyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdClPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLHtlbnVtZXJhYmxlOiEwLGdldDp0W3JdfSl9KHQse2NhbmNlbElkbGVDYWxsYmFjazpmdW5jdGlvbigpe3JldHVybiBufSxyZXF1ZXN0SWRsZUNhbGxiYWNrOmZ1bmN0aW9uKCl7cmV0dXJuIHJ9fSk7bGV0IHI9InVuZGVmaW5lZCIhPXR5cGVvZiBzZWxmJiZzZWxmLnJlcXVlc3RJZGxlQ2FsbGJhY2smJnNlbGYucmVxdWVzdElkbGVDYWxsYmFjay5iaW5kKHdpbmRvdyl8fGZ1bmN0aW9uKGUpe2xldCB0PURhdGUubm93KCk7cmV0dXJuIHNlbGYuc2V0VGltZW91dChmdW5jdGlvbigpe2Uoe2RpZFRpbWVvdXQ6ITEsdGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3JldHVybiBNYXRoLm1heCgwLDUwLShEYXRlLm5vdygpLXQpKX19KX0sMSl9LG49InVuZGVmaW5lZCIhPXR5cGVvZiBzZWxmJiZzZWxmLmNhbmNlbElkbGVDYWxsYmFjayYmc2VsZi5jYW5jZWxJZGxlQ2FsbGJhY2suYmluZCh3aW5kb3cpfHxmdW5jdGlvbihlKXtyZXR1cm4gY2xlYXJUaW1lb3V0KGUpfTsoImZ1bmN0aW9uIj09dHlwZW9mIHQuZGVmYXVsdHx8Im9iamVjdCI9PXR5cGVvZiB0LmRlZmF1bHQmJm51bGwhPT10LmRlZmF1bHQpJiZ2b2lkIDA9PT10LmRlZmF1bHQuX19lc01vZHVsZSYmKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LmRlZmF1bHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLE9iamVjdC5hc3NpZ24odC5kZWZhdWx0LHQpLGUuZXhwb3J0cz10LmRlZmF1bHQpfSwyMjk5MTpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwicmVzb2x2ZUhyZWYiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBmfX0pO2xldCBuPXIoODMwNzkpLG89cigzNTIyNyksYT1yKDQxNDIyKSxpPXIoNzMwMDYpLHU9cigxNTgxOSksbD1yKDM3MDMzKSxzPXIoNTg3NzcpLGM9cig3NDk0Myk7ZnVuY3Rpb24gZihlLHQscil7bGV0IGY7bGV0IGQ9InN0cmluZyI9PXR5cGVvZiB0P3Q6KDAsby5mb3JtYXRXaXRoVmFsaWRhdGlvbikodCkscD1kLm1hdGNoKC9eW2EtekEtWl17MSx9OlwvXC8vKSxoPXA/ZC5zbGljZShwWzBdLmxlbmd0aCk6ZDtpZigoaC5zcGxpdCgiPyIsMSlbMF18fCIiKS5tYXRjaCgvKFwvXC98XFwpLykpe2NvbnNvbGUuZXJyb3IoIkludmFsaWQgaHJlZiAnIitkKyInIHBhc3NlZCB0byBuZXh0L3JvdXRlciBpbiBwYWdlOiAnIitlLnBhdGhuYW1lKyInLiBSZXBlYXRlZCBmb3J3YXJkLXNsYXNoZXMgKC8vKSBvciBiYWNrc2xhc2hlcyBcXCBhcmUgbm90IHZhbGlkIGluIHRoZSBocmVmLiIpO2xldCB0PSgwLGkubm9ybWFsaXplUmVwZWF0ZWRTbGFzaGVzKShoKTtkPShwP3BbMF06IiIpK3R9aWYoISgwLGwuaXNMb2NhbFVSTCkoZCkpcmV0dXJuIHI/W2RdOmQ7dHJ5e2Y9bmV3IFVSTChkLnN0YXJ0c1dpdGgoIiMiKT9lLmFzUGF0aDplLnBhdGhuYW1lLCJodHRwOi8vbiIpfWNhdGNoKGUpe2Y9bmV3IFVSTCgiLyIsImh0dHA6Ly9uIil9dHJ5e2xldCBlPW5ldyBVUkwoZCxmKTtlLnBhdGhuYW1lPSgwLHUubm9ybWFsaXplUGF0aFRyYWlsaW5nU2xhc2gpKGUucGF0aG5hbWUpO2xldCB0PSIiO2lmKCgwLHMuaXNEeW5hbWljUm91dGUpKGUucGF0aG5hbWUpJiZlLnNlYXJjaFBhcmFtcyYmcil7bGV0IHI9KDAsbi5zZWFyY2hQYXJhbXNUb1VybFF1ZXJ5KShlLnNlYXJjaFBhcmFtcykse3Jlc3VsdDppLHBhcmFtczp1fT0oMCxjLmludGVycG9sYXRlQXMpKGUucGF0aG5hbWUsZS5wYXRobmFtZSxyKTtpJiYodD0oMCxvLmZvcm1hdFdpdGhWYWxpZGF0aW9uKSh7cGF0aG5hbWU6aSxoYXNoOmUuaGFzaCxxdWVyeTooMCxhLm9taXQpKHIsdSl9KSl9bGV0IGk9ZS5vcmlnaW49PT1mLm9yaWdpbj9lLmhyZWYuc2xpY2UoZS5vcmlnaW4ubGVuZ3RoKTplLmhyZWY7cmV0dXJuIHI/W2ksdHx8aV06aX1jYXRjaChlKXtyZXR1cm4gcj9bZF06ZH19KCJmdW5jdGlvbiI9PXR5cGVvZiB0LmRlZmF1bHR8fCJvYmplY3QiPT10eXBlb2YgdC5kZWZhdWx0JiZudWxsIT09dC5kZWZhdWx0KSYmdm9pZCAwPT09dC5kZWZhdWx0Ll9fZXNNb2R1bGUmJihPYmplY3QuZGVmaW5lUHJvcGVydHkodC5kZWZhdWx0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxPYmplY3QuYXNzaWduKHQuZGVmYXVsdCx0KSxlLmV4cG9ydHM9dC5kZWZhdWx0KX0sNjE2NDM6ZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdClPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLHtlbnVtZXJhYmxlOiEwLGdldDp0W3JdfSl9KHQse1JvdXRlQW5ub3VuY2VyOmZ1bmN0aW9uKCl7cmV0dXJuIGx9LGRlZmF1bHQ6ZnVuY3Rpb24oKXtyZXR1cm4gc319KTtsZXQgbj1yKDQyNDMwKSxvPXIoNTI2NzYpLGE9bi5fKHIoNzUyNzEpKSxpPXIoNjQxNjUpLHU9e2JvcmRlcjowLGNsaXA6InJlY3QoMCAwIDAgMCkiLGhlaWdodDoiMXB4IixtYXJnaW46Ii0xcHgiLG92ZXJmbG93OiJoaWRkZW4iLHBhZGRpbmc6MCxwb3NpdGlvbjoiYWJzb2x1dGUiLHRvcDowLHdpZHRoOiIxcHgiLHdoaXRlU3BhY2U6Im5vd3JhcCIsd29yZFdyYXA6Im5vcm1hbCJ9LGw9KCk9PntsZXR7YXNQYXRoOmV9PSgwLGkudXNlUm91dGVyKSgpLFt0LHJdPWEuZGVmYXVsdC51c2VTdGF0ZSgiIiksbj1hLmRlZmF1bHQudXNlUmVmKGUpO3JldHVybiBhLmRlZmF1bHQudXNlRWZmZWN0KCgpPT57aWYobi5jdXJyZW50IT09ZSl7aWYobi5jdXJyZW50PWUsZG9jdW1lbnQudGl0bGUpcihkb2N1bWVudC50aXRsZSk7ZWxzZXt2YXIgdDtsZXQgbj1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCJoMSIpO3IoKG51bGwhPSh0PW51bGw9PW4/dm9pZCAwOm4uaW5uZXJUZXh0KT90Om51bGw9PW4/dm9pZCAwOm4udGV4dENvbnRlbnQpfHxlKX19fSxbZV0pLCgwLG8uanN4KSgicCIseyJhcmlhLWxpdmUiOiJhc3NlcnRpdmUiLGlkOiJfX25leHQtcm91dGUtYW5ub3VuY2VyX18iLHJvbGU6ImFsZXJ0IixzdHlsZTp1LGNoaWxkcmVuOnR9KX0scz1sOygiZnVuY3Rpb24iPT10eXBlb2YgdC5kZWZhdWx0fHwib2JqZWN0Ij09dHlwZW9mIHQuZGVmYXVsdCYmbnVsbCE9PXQuZGVmYXVsdCkmJnZvaWQgMD09PXQuZGVmYXVsdC5fX2VzTW9kdWxlJiYoT2JqZWN0LmRlZmluZVByb3BlcnR5KHQuZGVmYXVsdCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksT2JqZWN0LmFzc2lnbih0LmRlZmF1bHQsdCksZS5leHBvcnRzPXQuZGVmYXVsdCl9LDY4MzgxOmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpT2JqZWN0LmRlZmluZVByb3BlcnR5KGUscix7ZW51bWVyYWJsZTohMCxnZXQ6dFtyXX0pfSh0LHtjcmVhdGVSb3V0ZUxvYWRlcjpmdW5jdGlvbigpe3JldHVybiBtfSxnZXRDbGllbnRCdWlsZE1hbmlmZXN0OmZ1bmN0aW9uKCl7cmV0dXJuIHB9LGlzQXNzZXRFcnJvcjpmdW5jdGlvbigpe3JldHVybiBzfSxtYXJrQXNzZXRFcnJvcjpmdW5jdGlvbigpe3JldHVybiBsfX0pLHIoNDI0MzApLHIoMjgyNzEpO2xldCBuPXIoNTk5MzApLG89cig5NDcwOSksYT1yKDk4MzUyKTtmdW5jdGlvbiBpKGUsdCxyKXtsZXQgbixvPXQuZ2V0KGUpO2lmKG8pcmV0dXJuImZ1dHVyZSJpbiBvP28uZnV0dXJlOlByb21pc2UucmVzb2x2ZShvKTtsZXQgYT1uZXcgUHJvbWlzZShlPT57bj1lfSk7cmV0dXJuIHQuc2V0KGUsbz17cmVzb2x2ZTpuLGZ1dHVyZTphfSkscj9yKCkudGhlbihlPT4obihlKSxlKSkuY2F0Y2gocj0+e3Rocm93IHQuZGVsZXRlKGUpLHJ9KTphfWxldCB1PVN5bWJvbCgiQVNTRVRfTE9BRF9FUlJPUiIpO2Z1bmN0aW9uIGwoZSl7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHUse30pfWZ1bmN0aW9uIHMoZSl7cmV0dXJuIGUmJnUgaW4gZX1sZXQgYz1mdW5jdGlvbihlKXt0cnl7cmV0dXJuIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgibGluayIpLCEhd2luZG93Lk1TSW5wdXRNZXRob2RDb250ZXh0JiYhIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8ZS5yZWxMaXN0LnN1cHBvcnRzKCJwcmVmZXRjaCIpfWNhdGNoKGUpe3JldHVybiExfX0oKSxmPSgpPT4oMCxhLmdldERlcGxveW1lbnRJZFF1ZXJ5T3JFbXB0eVN0cmluZykoKTtmdW5jdGlvbiBkKGUsdCxyKXtyZXR1cm4gbmV3IFByb21pc2UoKG4sYSk9PntsZXQgaT0hMTtlLnRoZW4oZT0+e2k9ITAsbihlKX0pLmNhdGNoKGEpLCgwLG8ucmVxdWVzdElkbGVDYWxsYmFjaykoKCk9PnNldFRpbWVvdXQoKCk9PntpfHxhKHIpfSx0KSl9KX1mdW5jdGlvbiBwKCl7cmV0dXJuIHNlbGYuX19CVUlMRF9NQU5JRkVTVD9Qcm9taXNlLnJlc29sdmUoc2VsZi5fX0JVSUxEX01BTklGRVNUKTpkKG5ldyBQcm9taXNlKGU9PntsZXQgdD1zZWxmLl9fQlVJTERfTUFOSUZFU1RfQ0I7c2VsZi5fX0JVSUxEX01BTklGRVNUX0NCPSgpPT57ZShzZWxmLl9fQlVJTERfTUFOSUZFU1QpLHQmJnQoKX19KSwzODAwLGwoRXJyb3IoIkZhaWxlZCB0byBsb2FkIGNsaWVudCBidWlsZCBtYW5pZmVzdCIpKSl9ZnVuY3Rpb24gaChlLHQpe3JldHVybiBwKCkudGhlbihyPT57aWYoISh0IGluIHIpKXRocm93IGwoRXJyb3IoIkZhaWxlZCB0byBsb29rdXAgcm91dGU6ICIrdCkpO2xldCBvPXJbdF0ubWFwKHQ9PmUrIi9fbmV4dC8iK2VuY29kZVVSSSh0KSk7cmV0dXJue3NjcmlwdHM6by5maWx0ZXIoZT0+ZS5lbmRzV2l0aCgiLmpzIikpLm1hcChlPT4oMCxuLl9fdW5zYWZlQ3JlYXRlVHJ1c3RlZFNjcmlwdFVSTCkoZSkrZigpKSxjc3M6by5maWx0ZXIoZT0+ZS5lbmRzV2l0aCgiLmNzcyIpKS5tYXAoZT0+ZStmKCkpfX0pfWZ1bmN0aW9uIG0oZSl7bGV0IHQ9bmV3IE1hcCxyPW5ldyBNYXAsbj1uZXcgTWFwLGE9bmV3IE1hcDtmdW5jdGlvbiB1KGUpe3t2YXIgdDtsZXQgbj1yLmdldChlLnRvU3RyaW5nKCkpO3JldHVybiBufHwoZG9jdW1lbnQucXVlcnlTZWxlY3Rvcignc2NyaXB0W3NyY149IicrZSsnIl0nKT9Qcm9taXNlLnJlc29sdmUoKTooci5zZXQoZS50b1N0cmluZygpLG49bmV3IFByb21pc2UoKHIsbik9PnsodD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKSkub25sb2FkPXIsdC5vbmVycm9yPSgpPT5uKGwoRXJyb3IoIkZhaWxlZCB0byBsb2FkIHNjcmlwdDogIitlKSkpLHQuY3Jvc3NPcmlnaW49dm9pZCAwLHQuc3JjPWUsZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0KX0pKSxuKSl9fWZ1bmN0aW9uIHMoZSl7bGV0IHQ9bi5nZXQoZSk7cmV0dXJuIHR8fG4uc2V0KGUsdD1mZXRjaChlLHtjcmVkZW50aWFsczoic2FtZS1vcmlnaW4ifSkudGhlbih0PT57aWYoIXQub2spdGhyb3cgRXJyb3IoIkZhaWxlZCB0byBsb2FkIHN0eWxlc2hlZXQ6ICIrZSk7cmV0dXJuIHQudGV4dCgpLnRoZW4odD0+KHtocmVmOmUsY29udGVudDp0fSkpfSkuY2F0Y2goZT0+e3Rocm93IGwoZSl9KSksdH1yZXR1cm57d2hlbkVudHJ5cG9pbnQ6ZT0+aShlLHQpLG9uRW50cnlwb2ludChlLHIpeyhyP1Byb21pc2UucmVzb2x2ZSgpLnRoZW4oKCk9PnIoKSkudGhlbihlPT4oe2NvbXBvbmVudDplJiZlLmRlZmF1bHR8fGUsZXhwb3J0czplfSksZT0+KHtlcnJvcjplfSkpOlByb21pc2UucmVzb2x2ZSh2b2lkIDApKS50aGVuKHI9PntsZXQgbj10LmdldChlKTtuJiYicmVzb2x2ZSJpbiBuP3ImJih0LnNldChlLHIpLG4ucmVzb2x2ZShyKSk6KHI/dC5zZXQoZSxyKTp0LmRlbGV0ZShlKSxhLmRlbGV0ZShlKSl9KX0sbG9hZFJvdXRlKHIsbil7cmV0dXJuIGkocixhLCgpPT57bGV0IG87cmV0dXJuIGQoaChlLHIpLnRoZW4oZT0+e2xldHtzY3JpcHRzOm4sY3NzOm99PWU7cmV0dXJuIFByb21pc2UuYWxsKFt0LmhhcyhyKT9bXTpQcm9taXNlLmFsbChuLm1hcCh1KSksUHJvbWlzZS5hbGwoby5tYXAocykpXSl9KS50aGVuKGU9PnRoaXMud2hlbkVudHJ5cG9pbnQocikudGhlbih0PT4oe2VudHJ5cG9pbnQ6dCxzdHlsZXM6ZVsxXX0pKSksMzgwMCxsKEVycm9yKCJSb3V0ZSBkaWQgbm90IGNvbXBsZXRlIGxvYWRpbmc6ICIrcikpKS50aGVuKGU9PntsZXR7ZW50cnlwb2ludDp0LHN0eWxlczpyfT1lLG49T2JqZWN0LmFzc2lnbih7c3R5bGVzOnJ9LHQpO3JldHVybiJlcnJvciJpbiB0P3Q6bn0pLmNhdGNoKGU9PntpZihuKXRocm93IGU7cmV0dXJue2Vycm9yOmV9fSkuZmluYWxseSgoKT0+bnVsbD09bz92b2lkIDA6bygpKX0pfSxwcmVmZXRjaCh0KXtsZXQgcjtyZXR1cm4ocj1uYXZpZ2F0b3IuY29ubmVjdGlvbikmJihyLnNhdmVEYXRhfHwvMmcvLnRlc3Qoci5lZmZlY3RpdmVUeXBlKSk/UHJvbWlzZS5yZXNvbHZlKCk6aChlLHQpLnRoZW4oZT0+UHJvbWlzZS5hbGwoYz9lLnNjcmlwdHMubWFwKGU9Pnt2YXIgdCxyLG47cmV0dXJuIHQ9ZS50b1N0cmluZygpLHI9InNjcmlwdCIsbmV3IFByb21pc2UoKGUsbyk9PntpZihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdcbiAgICAgIGxpbmtbcmVsPSJwcmVmZXRjaCJdW2hyZWZePSInK3QrJyJdLFxuICAgICAgbGlua1tyZWw9InByZWxvYWQiXVtocmVmXj0iJyt0KyciXSxcbiAgICAgIHNjcmlwdFtzcmNePSInK3QrJyJdJykpcmV0dXJuIGUoKTtuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImxpbmsiKSxyJiYobi5hcz1yKSxuLnJlbD0icHJlZmV0Y2giLG4uY3Jvc3NPcmlnaW49dm9pZCAwLG4ub25sb2FkPWUsbi5vbmVycm9yPSgpPT5vKGwoRXJyb3IoIkZhaWxlZCB0byBwcmVmZXRjaDogIit0KSkpLG4uaHJlZj10LGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobil9KX0pOltdKSkudGhlbigoKT0+eygwLG8ucmVxdWVzdElkbGVDYWxsYmFjaykoKCk9PnRoaXMubG9hZFJvdXRlKHQsITApLmNhdGNoKCgpPT57fSkpfSkuY2F0Y2goKCk9Pnt9KX19fSgiZnVuY3Rpb24iPT10eXBlb2YgdC5kZWZhdWx0fHwib2JqZWN0Ij09dHlwZW9mIHQuZGVmYXVsdCYmbnVsbCE9PXQuZGVmYXVsdCkmJnZvaWQgMD09PXQuZGVmYXVsdC5fX2VzTW9kdWxlJiYoT2JqZWN0LmRlZmluZVByb3BlcnR5KHQuZGVmYXVsdCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksT2JqZWN0LmFzc2lnbih0LmRlZmF1bHQsdCksZS5leHBvcnRzPXQuZGVmYXVsdCl9LDY0MTY1OmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpT2JqZWN0LmRlZmluZVByb3BlcnR5KGUscix7ZW51bWVyYWJsZTohMCxnZXQ6dFtyXX0pfSh0LHtSb3V0ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gYS5kZWZhdWx0fSxjcmVhdGVSb3V0ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gbX0sZGVmYXVsdDpmdW5jdGlvbigpe3JldHVybiBwfSxtYWtlUHVibGljUm91dGVySW5zdGFuY2U6ZnVuY3Rpb24oKXtyZXR1cm4gX30sdXNlUm91dGVyOmZ1bmN0aW9uKCl7cmV0dXJuIGh9LHdpdGhSb3V0ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gbC5kZWZhdWx0fX0pO2xldCBuPXIoNDI0MzApLG89bi5fKHIoNzUyNzEpKSxhPW4uXyhyKDgyNjQzKSksaT1yKDU1MzY4KSx1PW4uXyhyKDE4NjE4KSksbD1uLl8ocigxNDIzOCkpLHM9e3JvdXRlcjpudWxsLHJlYWR5Q2FsbGJhY2tzOltdLHJlYWR5KGUpe2lmKHRoaXMucm91dGVyKXJldHVybiBlKCk7dGhpcy5yZWFkeUNhbGxiYWNrcy5wdXNoKGUpfX0sYz1bInBhdGhuYW1lIiwicm91dGUiLCJxdWVyeSIsImFzUGF0aCIsImNvbXBvbmVudHMiLCJpc0ZhbGxiYWNrIiwiYmFzZVBhdGgiLCJsb2NhbGUiLCJsb2NhbGVzIiwiZGVmYXVsdExvY2FsZSIsImlzUmVhZHkiLCJpc1ByZXZpZXciLCJpc0xvY2FsZURvbWFpbiIsImRvbWFpbkxvY2FsZXMiXSxmPVsicHVzaCIsInJlcGxhY2UiLCJyZWxvYWQiLCJiYWNrIiwicHJlZmV0Y2giLCJiZWZvcmVQb3BTdGF0ZSJdO2Z1bmN0aW9uIGQoKXtpZighcy5yb3V0ZXIpdGhyb3cgRXJyb3IoJ05vIHJvdXRlciBpbnN0YW5jZSBmb3VuZC5cbllvdSBzaG91bGQgb25seSB1c2UgIm5leHQvcm91dGVyIiBvbiB0aGUgY2xpZW50IHNpZGUgb2YgeW91ciBhcHAuXG4nKTtyZXR1cm4gcy5yb3V0ZXJ9T2JqZWN0LmRlZmluZVByb3BlcnR5KHMsImV2ZW50cyIse2dldDooKT0+YS5kZWZhdWx0LmV2ZW50c30pLGMuZm9yRWFjaChlPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHMsZSx7Z2V0OigpPT5kKClbZV19KX0pLGYuZm9yRWFjaChlPT57c1tlXT1mdW5jdGlvbigpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLHI9QXJyYXkodCksbj0wO248dDtuKyspcltuXT1hcmd1bWVudHNbbl07cmV0dXJuIGQoKVtlXSguLi5yKX19KSxbInJvdXRlQ2hhbmdlU3RhcnQiLCJiZWZvcmVIaXN0b3J5Q2hhbmdlIiwicm91dGVDaGFuZ2VDb21wbGV0ZSIsInJvdXRlQ2hhbmdlRXJyb3IiLCJoYXNoQ2hhbmdlU3RhcnQiLCJoYXNoQ2hhbmdlQ29tcGxldGUiXS5mb3JFYWNoKGU9PntzLnJlYWR5KCgpPT57YS5kZWZhdWx0LmV2ZW50cy5vbihlLGZ1bmN0aW9uKCl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgscj1BcnJheSh0KSxuPTA7bjx0O24rKylyW25dPWFyZ3VtZW50c1tuXTtsZXQgbz0ib24iK2UuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrZS5zdWJzdHJpbmcoMSk7aWYoc1tvXSl0cnl7c1tvXSguLi5yKX1jYXRjaChlKXtjb25zb2xlLmVycm9yKCJFcnJvciB3aGVuIHJ1bm5pbmcgdGhlIFJvdXRlciBldmVudDogIitvKSxjb25zb2xlLmVycm9yKCgwLHUuZGVmYXVsdCkoZSk/ZS5tZXNzYWdlKyJcbiIrZS5zdGFjazplKyIiKX19KX0pfSk7bGV0IHA9cztmdW5jdGlvbiBoKCl7bGV0IGU9by5kZWZhdWx0LnVzZUNvbnRleHQoaS5Sb3V0ZXJDb250ZXh0KTtpZighZSl0aHJvdyBFcnJvcigiTmV4dFJvdXRlciB3YXMgbm90IG1vdW50ZWQuIGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL21lc3NhZ2VzL25leHQtcm91dGVyLW5vdC1tb3VudGVkIik7cmV0dXJuIGV9ZnVuY3Rpb24gbSgpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHQ9QXJyYXkoZSkscj0wO3I8ZTtyKyspdFtyXT1hcmd1bWVudHNbcl07cmV0dXJuIHMucm91dGVyPW5ldyBhLmRlZmF1bHQoLi4udCkscy5yZWFkeUNhbGxiYWNrcy5mb3JFYWNoKGU9PmUoKSkscy5yZWFkeUNhbGxiYWNrcz1bXSxzLnJvdXRlcn1mdW5jdGlvbiBfKGUpe2xldCB0PXt9O2ZvcihsZXQgciBvZiBjKXtpZigib2JqZWN0Ij09dHlwZW9mIGVbcl0pe3Rbcl09T2JqZWN0LmFzc2lnbihBcnJheS5pc0FycmF5KGVbcl0pP1tdOnt9LGVbcl0pO2NvbnRpbnVlfXRbcl09ZVtyXX1yZXR1cm4gdC5ldmVudHM9YS5kZWZhdWx0LmV2ZW50cyxmLmZvckVhY2gocj0+e3Rbcl09ZnVuY3Rpb24oKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPUFycmF5KHQpLG89MDtvPHQ7bysrKW5bb109YXJndW1lbnRzW29dO3JldHVybiBlW3JdKC4uLm4pfX0pLHR9KCJmdW5jdGlvbiI9PXR5cGVvZiB0LmRlZmF1bHR8fCJvYmplY3QiPT10eXBlb2YgdC5kZWZhdWx0JiZudWxsIT09dC5kZWZhdWx0KSYmdm9pZCAwPT09dC5kZWZhdWx0Ll9fZXNNb2R1bGUmJihPYmplY3QuZGVmaW5lUHJvcGVydHkodC5kZWZhdWx0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxPYmplY3QuYXNzaWduKHQuZGVmYXVsdCx0KSxlLmV4cG9ydHM9dC5kZWZhdWx0KX0sMTY3MjE6ZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdClPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLHtlbnVtZXJhYmxlOiEwLGdldDp0W3JdfSl9KHQse2RlZmF1bHQ6ZnVuY3Rpb24oKXtyZXR1cm4gYn0saGFuZGxlQ2xpZW50U2NyaXB0TG9hZDpmdW5jdGlvbigpe3JldHVybiBffSxpbml0U2NyaXB0TG9hZGVyOmZ1bmN0aW9uKCl7cmV0dXJuIGd9fSk7bGV0IG49cig0MjQzMCksbz1yKDExNzc4KSxhPXIoNTI2NzYpLGk9bi5fKHIoMzA5NjcpKSx1PW8uXyhyKDc1MjcxKSksbD1yKDc4ODAxKSxzPXIoMzA1OTYpLGM9cig5NDcwOSksZj1uZXcgTWFwLGQ9bmV3IFNldCxwPVsib25Mb2FkIiwib25SZWFkeSIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiY2hpbGRyZW4iLCJvbkVycm9yIiwic3RyYXRlZ3kiLCJzdHlsZXNoZWV0cyJdLGg9ZT0+e2lmKGkuZGVmYXVsdC5wcmVpbml0KXtlLmZvckVhY2goZT0+e2kuZGVmYXVsdC5wcmVpbml0KGUse2FzOiJzdHlsZSJ9KX0pO3JldHVybn17bGV0IHQ9ZG9jdW1lbnQuaGVhZDtlLmZvckVhY2goZT0+e2xldCByPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImxpbmsiKTtyLnR5cGU9InRleHQvY3NzIixyLnJlbD0ic3R5bGVzaGVldCIsci5ocmVmPWUsdC5hcHBlbmRDaGlsZChyKX0pfX0sbT1lPT57bGV0e3NyYzp0LGlkOnIsb25Mb2FkOm49KCk9Pnt9LG9uUmVhZHk6bz1udWxsLGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOmEsY2hpbGRyZW46aT0iIixzdHJhdGVneTp1PSJhZnRlckludGVyYWN0aXZlIixvbkVycm9yOmwsc3R5bGVzaGVldHM6Y309ZSxtPXJ8fHQ7aWYobSYmZC5oYXMobSkpcmV0dXJuO2lmKGYuaGFzKHQpKXtkLmFkZChtKSxmLmdldCh0KS50aGVuKG4sbCk7cmV0dXJufWxldCBfPSgpPT57byYmbygpLGQuYWRkKG0pfSxnPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpLHk9bmV3IFByb21pc2UoKGUsdCk9PntnLmFkZEV2ZW50TGlzdGVuZXIoImxvYWQiLGZ1bmN0aW9uKHQpe2UoKSxuJiZuLmNhbGwodGhpcyx0KSxfKCl9KSxnLmFkZEV2ZW50TGlzdGVuZXIoImVycm9yIixmdW5jdGlvbihlKXt0KGUpfSl9KS5jYXRjaChmdW5jdGlvbihlKXtsJiZsKGUpfSk7Zm9yKGxldFtyLG5db2YoYT8oZy5pbm5lckhUTUw9YS5fX2h0bWx8fCIiLF8oKSk6aT8oZy50ZXh0Q29udGVudD0ic3RyaW5nIj09dHlwZW9mIGk/aTpBcnJheS5pc0FycmF5KGkpP2kuam9pbigiIik6IiIsXygpKTp0JiYoZy5zcmM9dCxmLnNldCh0LHkpKSxPYmplY3QuZW50cmllcyhlKSkpe2lmKHZvaWQgMD09PW58fHAuaW5jbHVkZXMocikpY29udGludWU7bGV0IGU9cy5ET01BdHRyaWJ1dGVOYW1lc1tyXXx8ci50b0xvd2VyQ2FzZSgpO2cuc2V0QXR0cmlidXRlKGUsbil9IndvcmtlciI9PT11JiZnLnNldEF0dHJpYnV0ZSgidHlwZSIsInRleHQvcGFydHl0b3duIiksZy5zZXRBdHRyaWJ1dGUoImRhdGEtbnNjcmlwdCIsdSksYyYmaChjKSxkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGcpfTtmdW5jdGlvbiBfKGUpe2xldHtzdHJhdGVneTp0PSJhZnRlckludGVyYWN0aXZlIn09ZTsibGF6eU9ubG9hZCI9PT10P3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJsb2FkIiwoKT0+eygwLGMucmVxdWVzdElkbGVDYWxsYmFjaykoKCk9Pm0oZSkpfSk6bShlKX1mdW5jdGlvbiBnKGUpe2UuZm9yRWFjaChfKSxbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtbnNjcmlwdD0iYmVmb3JlSW50ZXJhY3RpdmUiXScpLC4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLW5zY3JpcHQ9ImJlZm9yZVBhZ2VSZW5kZXIiXScpXS5mb3JFYWNoKGU9PntsZXQgdD1lLmlkfHxlLmdldEF0dHJpYnV0ZSgic3JjIik7ZC5hZGQodCl9KX1mdW5jdGlvbiB5KGUpe2xldHtpZDp0LHNyYzpyPSIiLG9uTG9hZDpuPSgpPT57fSxvblJlYWR5Om89bnVsbCxzdHJhdGVneTpzPSJhZnRlckludGVyYWN0aXZlIixvbkVycm9yOmYsc3R5bGVzaGVldHM6cCwuLi5ofT1lLHt1cGRhdGVTY3JpcHRzOl8sc2NyaXB0czpnLGdldElzU3NyOnksYXBwRGlyOmIsbm9uY2U6UH09KDAsdS51c2VDb250ZXh0KShsLkhlYWRNYW5hZ2VyQ29udGV4dCksdj0oMCx1LnVzZVJlZikoITEpOygwLHUudXNlRWZmZWN0KSgoKT0+e2xldCBlPXR8fHI7di5jdXJyZW50fHwobyYmZSYmZC5oYXMoZSkmJm8oKSx2LmN1cnJlbnQ9ITApfSxbbyx0LHJdKTtsZXQgRT0oMCx1LnVzZVJlZikoITEpO2lmKCgwLHUudXNlRWZmZWN0KSgoKT0+eyFFLmN1cnJlbnQmJigiYWZ0ZXJJbnRlcmFjdGl2ZSI9PT1zP20oZSk6ImxhenlPbmxvYWQiPT09cyYmKCJjb21wbGV0ZSI9PT1kb2N1bWVudC5yZWFkeVN0YXRlPygwLGMucmVxdWVzdElkbGVDYWxsYmFjaykoKCk9Pm0oZSkpOndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJsb2FkIiwoKT0+eygwLGMucmVxdWVzdElkbGVDYWxsYmFjaykoKCk9Pm0oZSkpfSkpLEUuY3VycmVudD0hMCl9LFtlLHNdKSwoImJlZm9yZUludGVyYWN0aXZlIj09PXN8fCJ3b3JrZXIiPT09cykmJihfPyhnW3NdPShnW3NdfHxbXSkuY29uY2F0KFt7aWQ6dCxzcmM6cixvbkxvYWQ6bixvblJlYWR5Om8sb25FcnJvcjpmLC4uLmh9XSksXyhnKSk6eSYmeSgpP2QuYWRkKHR8fHIpOnkmJiF5KCkmJm0oZSkpLGIpe2lmKHAmJnAuZm9yRWFjaChlPT57aS5kZWZhdWx0LnByZWluaXQoZSx7YXM6InN0eWxlIn0pfSksImJlZm9yZUludGVyYWN0aXZlIj09PXMpcmV0dXJuIHI/KGkuZGVmYXVsdC5wcmVsb2FkKHIsaC5pbnRlZ3JpdHk/e2FzOiJzY3JpcHQiLGludGVncml0eTpoLmludGVncml0eSxub25jZTpQLGNyb3NzT3JpZ2luOmguY3Jvc3NPcmlnaW59Onthczoic2NyaXB0Iixub25jZTpQLGNyb3NzT3JpZ2luOmguY3Jvc3NPcmlnaW59KSwoMCxhLmpzeCkoInNjcmlwdCIse25vbmNlOlAsZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6e19faHRtbDoiKHNlbGYuX19uZXh0X3M9c2VsZi5fX25leHRfc3x8W10pLnB1c2goIitKU09OLnN0cmluZ2lmeShbcix7Li4uaCxpZDp0fV0pKyIpIn19KSk6KGguZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJihoLmNoaWxkcmVuPWguZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sLGRlbGV0ZSBoLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSwoMCxhLmpzeCkoInNjcmlwdCIse25vbmNlOlAsZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6e19faHRtbDoiKHNlbGYuX19uZXh0X3M9c2VsZi5fX25leHRfc3x8W10pLnB1c2goIitKU09OLnN0cmluZ2lmeShbMCx7Li4uaCxpZDp0fV0pKyIpIn19KSk7ImFmdGVySW50ZXJhY3RpdmUiPT09cyYmciYmaS5kZWZhdWx0LnByZWxvYWQocixoLmludGVncml0eT97YXM6InNjcmlwdCIsaW50ZWdyaXR5OmguaW50ZWdyaXR5LG5vbmNlOlAsY3Jvc3NPcmlnaW46aC5jcm9zc09yaWdpbn06e2FzOiJzY3JpcHQiLG5vbmNlOlAsY3Jvc3NPcmlnaW46aC5jcm9zc09yaWdpbn0pfXJldHVybiBudWxsfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh5LCJfX25leHRTY3JpcHQiLHt2YWx1ZTohMH0pO2xldCBiPXk7KCJmdW5jdGlvbiI9PXR5cGVvZiB0LmRlZmF1bHR8fCJvYmplY3QiPT10eXBlb2YgdC5kZWZhdWx0JiZudWxsIT09dC5kZWZhdWx0KSYmdm9pZCAwPT09dC5kZWZhdWx0Ll9fZXNNb2R1bGUmJihPYmplY3QuZGVmaW5lUHJvcGVydHkodC5kZWZhdWx0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxPYmplY3QuYXNzaWduKHQuZGVmYXVsdCx0KSxlLmV4cG9ydHM9dC5kZWZhdWx0KX0sNzk5MTg6ZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsImRlZmF1bHQiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBvfX0pO2xldCBuPXIoNTU1MjMpO2Z1bmN0aW9uIG8oZSl7aWYoImVuZGVkIiE9PWUuc3RhdGUuc3RhdGUpdGhyb3cgRXJyb3IoIkV4cGVjdGVkIHNwYW4gdG8gYmUgZW5kZWQiKTsoMCxuLnNlbmRNZXNzYWdlKShKU09OLnN0cmluZ2lmeSh7ZXZlbnQ6InNwYW4tZW5kIixzdGFydFRpbWU6ZS5zdGFydFRpbWUsZW5kVGltZTplLnN0YXRlLmVuZFRpbWUsc3Bhbk5hbWU6ZS5uYW1lLGF0dHJpYnV0ZXM6ZS5hdHRyaWJ1dGVzfSkpfSgiZnVuY3Rpb24iPT10eXBlb2YgdC5kZWZhdWx0fHwib2JqZWN0Ij09dHlwZW9mIHQuZGVmYXVsdCYmbnVsbCE9PXQuZGVmYXVsdCkmJnZvaWQgMD09PXQuZGVmYXVsdC5fX2VzTW9kdWxlJiYoT2JqZWN0LmRlZmluZVByb3BlcnR5KHQuZGVmYXVsdCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksT2JqZWN0LmFzc2lnbih0LmRlZmF1bHQsdCksZS5leHBvcnRzPXQuZGVmYXVsdCl9LDU3NTY4OmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJkZWZhdWx0Iix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaX19KTtsZXQgbj1yKDQyNDMwKS5fKHIoNjY0MDYpKTtjbGFzcyBve2VuZChlKXtpZigiZW5kZWQiPT09dGhpcy5zdGF0ZS5zdGF0ZSl0aHJvdyBFcnJvcigiU3BhbiBoYXMgYWxyZWFkeSBlbmRlZCIpO3RoaXMuc3RhdGU9e3N0YXRlOiJlbmRlZCIsZW5kVGltZTpudWxsIT1lP2U6RGF0ZS5ub3coKX0sdGhpcy5vblNwYW5FbmQodGhpcyl9Y29uc3RydWN0b3IoZSx0LHIpe3ZhciBuLG87dGhpcy5uYW1lPWUsdGhpcy5hdHRyaWJ1dGVzPW51bGwhPShuPXQuYXR0cmlidXRlcyk/bjp7fSx0aGlzLnN0YXJ0VGltZT1udWxsIT0obz10LnN0YXJ0VGltZSk/bzpEYXRlLm5vdygpLHRoaXMub25TcGFuRW5kPXIsdGhpcy5zdGF0ZT17c3RhdGU6ImlucHJvZ3Jlc3MifX19Y2xhc3MgYXtzdGFydFNwYW4oZSx0KXtyZXR1cm4gbmV3IG8oZSx0LHRoaXMuaGFuZGxlU3BhbkVuZCl9b25TcGFuRW5kKGUpe3JldHVybiB0aGlzLl9lbWl0dGVyLm9uKCJzcGFuZW5kIixlKSwoKT0+e3RoaXMuX2VtaXR0ZXIub2ZmKCJzcGFuZW5kIixlKX19Y29uc3RydWN0b3IoKXt0aGlzLl9lbWl0dGVyPSgwLG4uZGVmYXVsdCkoKSx0aGlzLmhhbmRsZVNwYW5FbmQ9ZT0+e3RoaXMuX2VtaXR0ZXIuZW1pdCgic3BhbmVuZCIsZSl9fX1sZXQgaT1uZXcgYTsoImZ1bmN0aW9uIj09dHlwZW9mIHQuZGVmYXVsdHx8Im9iamVjdCI9PXR5cGVvZiB0LmRlZmF1bHQmJm51bGwhPT10LmRlZmF1bHQpJiZ2b2lkIDA9PT10LmRlZmF1bHQuX19lc01vZHVsZSYmKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LmRlZmF1bHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLE9iamVjdC5hc3NpZ24odC5kZWZhdWx0LHQpLGUuZXhwb3J0cz10LmRlZmF1bHQpfSw1OTkzMDpmdW5jdGlvbihlLHQpeyJ1c2Ugc3RyaWN0IjtsZXQgcjtmdW5jdGlvbiBuKGUpe3ZhciB0O3JldHVybihudWxsPT0odD1mdW5jdGlvbigpe2lmKHZvaWQgMD09PXIpe3ZhciBlO3I9KG51bGw9PShlPXdpbmRvdy50cnVzdGVkVHlwZXMpP3ZvaWQgMDplLmNyZWF0ZVBvbGljeSgibmV4dGpzIix7Y3JlYXRlSFRNTDplPT5lLGNyZWF0ZVNjcmlwdDplPT5lLGNyZWF0ZVNjcmlwdFVSTDplPT5lfSkpfHxudWxsfXJldHVybiByfSgpKT92b2lkIDA6dC5jcmVhdGVTY3JpcHRVUkwoZSkpfHxlfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX191bnNhZmVDcmVhdGVUcnVzdGVkU2NyaXB0VVJMIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbn19KSwoImZ1bmN0aW9uIj09dHlwZW9mIHQuZGVmYXVsdHx8Im9iamVjdCI9PXR5cGVvZiB0LmRlZmF1bHQmJm51bGwhPT10LmRlZmF1bHQpJiZ2b2lkIDA9PT10LmRlZmF1bHQuX19lc01vZHVsZSYmKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LmRlZmF1bHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLE9iamVjdC5hc3NpZ24odC5kZWZhdWx0LHQpLGUuZXhwb3J0cz10LmRlZmF1bHQpfSwxMTIwOTpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxyKDk4MzUyKSxzZWxmLl9fbmV4dF9zZXRfcHVibGljX3BhdGhfXz1lPT57ci5wPWV9LCgiZnVuY3Rpb24iPT10eXBlb2YgdC5kZWZhdWx0fHwib2JqZWN0Ij09dHlwZW9mIHQuZGVmYXVsdCYmbnVsbCE9PXQuZGVmYXVsdCkmJnZvaWQgMD09PXQuZGVmYXVsdC5fX2VzTW9kdWxlJiYoT2JqZWN0LmRlZmluZVByb3BlcnR5KHQuZGVmYXVsdCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksT2JqZWN0LmFzc2lnbih0LmRlZmF1bHQsdCksZS5leHBvcnRzPXQuZGVmYXVsdCl9LDE0MjM4OmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJkZWZhdWx0Iix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYX19KSxyKDQyNDMwKTtsZXQgbj1yKDUyNjc2KTtyKDc1MjcxKTtsZXQgbz1yKDY0MTY1KTtmdW5jdGlvbiBhKGUpe2Z1bmN0aW9uIHQodCl7cmV0dXJuKDAsbi5qc3gpKGUse3JvdXRlcjooMCxvLnVzZVJvdXRlcikoKSwuLi50fSl9cmV0dXJuIHQuZ2V0SW5pdGlhbFByb3BzPWUuZ2V0SW5pdGlhbFByb3BzLHQub3JpZ0dldEluaXRpYWxQcm9wcz1lLm9yaWdHZXRJbml0aWFsUHJvcHMsdH0oImZ1bmN0aW9uIj09dHlwZW9mIHQuZGVmYXVsdHx8Im9iamVjdCI9PXR5cGVvZiB0LmRlZmF1bHQmJm51bGwhPT10LmRlZmF1bHQpJiZ2b2lkIDA9PT10LmRlZmF1bHQuX19lc01vZHVsZSYmKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LmRlZmF1bHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLE9iamVjdC5hc3NpZ24odC5kZWZhdWx0LHQpLGUuZXhwb3J0cz10LmRlZmF1bHQpfSwzMTIwNDpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiZGVmYXVsdCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGx9fSk7bGV0IG49cig0MjQzMCksbz1yKDUyNjc2KSxhPW4uXyhyKDc1MjcxKSksaT1yKDczMDA2KTthc3luYyBmdW5jdGlvbiB1KGUpe2xldHtDb21wb25lbnQ6dCxjdHg6cn09ZTtyZXR1cm57cGFnZVByb3BzOmF3YWl0ICgwLGkubG9hZEdldEluaXRpYWxQcm9wcykodCxyKX19Y2xhc3MgbCBleHRlbmRzIGEuZGVmYXVsdC5Db21wb25lbnR7cmVuZGVyKCl7bGV0e0NvbXBvbmVudDplLHBhZ2VQcm9wczp0fT10aGlzLnByb3BzO3JldHVybigwLG8uanN4KShlLHsuLi50fSl9fWwub3JpZ0dldEluaXRpYWxQcm9wcz11LGwuZ2V0SW5pdGlhbFByb3BzPXUsKCJmdW5jdGlvbiI9PXR5cGVvZiB0LmRlZmF1bHR8fCJvYmplY3QiPT10eXBlb2YgdC5kZWZhdWx0JiZudWxsIT09dC5kZWZhdWx0KSYmdm9pZCAwPT09dC5kZWZhdWx0Ll9fZXNNb2R1bGUmJihPYmplY3QuZGVmaW5lUHJvcGVydHkodC5kZWZhdWx0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxPYmplY3QuYXNzaWduKHQuZGVmYXVsdCx0KSxlLmV4cG9ydHM9dC5kZWZhdWx0KX0sMTEyOTI6ZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsImRlZmF1bHQiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBjfX0pO2xldCBuPXIoNDI0MzApLG89cig1MjY3NiksYT1uLl8ocig3NTI3MSkpLGk9bi5fKHIoNzQ3MTQpKSx1PXs0MDA6IkJhZCBSZXF1ZXN0Iiw0MDQ6IlRoaXMgcGFnZSBjb3VsZCBub3QgYmUgZm91bmQiLDQwNToiTWV0aG9kIE5vdCBBbGxvd2VkIiw1MDA6IkludGVybmFsIFNlcnZlciBFcnJvciJ9O2Z1bmN0aW9uIGwoZSl7bGV0e3Jlczp0LGVycjpyfT1lO3JldHVybntzdGF0dXNDb2RlOnQmJnQuc3RhdHVzQ29kZT90LnN0YXR1c0NvZGU6cj9yLnN0YXR1c0NvZGU6NDA0fX1sZXQgcz17ZXJyb3I6e2ZvbnRGYW1pbHk6J3N5c3RlbS11aSwiU2Vnb2UgVUkiLFJvYm90byxIZWx2ZXRpY2EsQXJpYWwsc2Fucy1zZXJpZiwiQXBwbGUgQ29sb3IgRW1vamkiLCJTZWdvZSBVSSBFbW9qaSInLGhlaWdodDoiMTAwdmgiLHRleHRBbGlnbjoiY2VudGVyIixkaXNwbGF5OiJmbGV4IixmbGV4RGlyZWN0aW9uOiJjb2x1bW4iLGFsaWduSXRlbXM6ImNlbnRlciIsanVzdGlmeUNvbnRlbnQ6ImNlbnRlciJ9LGRlc2M6e2xpbmVIZWlnaHQ6IjQ4cHgifSxoMTp7ZGlzcGxheToiaW5saW5lLWJsb2NrIixtYXJnaW46IjAgMjBweCAwIDAiLHBhZGRpbmdSaWdodDoyMyxmb250U2l6ZToyNCxmb250V2VpZ2h0OjUwMCx2ZXJ0aWNhbEFsaWduOiJ0b3AifSxoMjp7Zm9udFNpemU6MTQsZm9udFdlaWdodDo0MDAsbGluZUhlaWdodDoiMjhweCJ9LHdyYXA6e2Rpc3BsYXk6ImlubGluZS1ibG9jayJ9fTtjbGFzcyBjIGV4dGVuZHMgYS5kZWZhdWx0LkNvbXBvbmVudHtyZW5kZXIoKXtsZXR7c3RhdHVzQ29kZTplLHdpdGhEYXJrTW9kZTp0PSEwfT10aGlzLnByb3BzLHI9dGhpcy5wcm9wcy50aXRsZXx8dVtlXXx8IkFuIHVuZXhwZWN0ZWQgZXJyb3IgaGFzIG9jY3VycmVkIjtyZXR1cm4oMCxvLmpzeHMpKCJkaXYiLHtzdHlsZTpzLmVycm9yLGNoaWxkcmVuOlsoMCxvLmpzeCkoaS5kZWZhdWx0LHtjaGlsZHJlbjooMCxvLmpzeCkoInRpdGxlIix7Y2hpbGRyZW46ZT9lKyI6ICIrcjoiQXBwbGljYXRpb24gZXJyb3I6IGEgY2xpZW50LXNpZGUgZXhjZXB0aW9uIGhhcyBvY2N1cnJlZCJ9KX0pLCgwLG8uanN4cykoImRpdiIse3N0eWxlOnMuZGVzYyxjaGlsZHJlbjpbKDAsby5qc3gpKCJzdHlsZSIse2Rhbmdlcm91c2x5U2V0SW5uZXJIVE1MOntfX2h0bWw6ImJvZHl7Y29sb3I6IzAwMDtiYWNrZ3JvdW5kOiNmZmY7bWFyZ2luOjB9Lm5leHQtZXJyb3ItaDF7Ym9yZGVyLXJpZ2h0OjFweCBzb2xpZCByZ2JhKDAsMCwwLC4zKX0iKyh0PyJAbWVkaWEgKHByZWZlcnMtY29sb3Itc2NoZW1lOmRhcmspe2JvZHl7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kOiMwMDB9Lm5leHQtZXJyb3ItaDF7Ym9yZGVyLXJpZ2h0OjFweCBzb2xpZCByZ2JhKDI1NSwyNTUsMjU1LC4zKX19IjoiIil9fSksZT8oMCxvLmpzeCkoImgxIix7Y2xhc3NOYW1lOiJuZXh0LWVycm9yLWgxIixzdHlsZTpzLmgxLGNoaWxkcmVuOmV9KTpudWxsLCgwLG8uanN4KSgiZGl2Iix7c3R5bGU6cy53cmFwLGNoaWxkcmVuOigwLG8uanN4cykoImgyIix7c3R5bGU6cy5oMixjaGlsZHJlbjpbdGhpcy5wcm9wcy50aXRsZXx8ZT9yOigwLG8uanN4KShvLkZyYWdtZW50LHtjaGlsZHJlbjoiQXBwbGljYXRpb24gZXJyb3I6IGEgY2xpZW50LXNpZGUgZXhjZXB0aW9uIGhhcyBvY2N1cnJlZCAoc2VlIHRoZSBicm93c2VyIGNvbnNvbGUgZm9yIG1vcmUgaW5mb3JtYXRpb24pIn0pLCIuIl19KX0pXX0pXX0pfX1jLmRpc3BsYXlOYW1lPSJFcnJvclBhZ2UiLGMuZ2V0SW5pdGlhbFByb3BzPWwsYy5vcmlnR2V0SW5pdGlhbFByb3BzPWwsKCJmdW5jdGlvbiI9PXR5cGVvZiB0LmRlZmF1bHR8fCJvYmplY3QiPT10eXBlb2YgdC5kZWZhdWx0JiZudWxsIT09dC5kZWZhdWx0KSYmdm9pZCAwPT09dC5kZWZhdWx0Ll9fZXNNb2R1bGUmJihPYmplY3QuZGVmaW5lUHJvcGVydHkodC5kZWZhdWx0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxPYmplY3QuYXNzaWduKHQuZGVmYXVsdCx0KSxlLmV4cG9ydHM9dC5kZWZhdWx0KX0sMzk0MDM6ZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIkFtcFN0YXRlQ29udGV4dCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG59fSk7bGV0IG49cig0MjQzMCkuXyhyKDc1MjcxKSkuZGVmYXVsdC5jcmVhdGVDb250ZXh0KHt9KX0sMzQ4NDA6ZnVuY3Rpb24oZSx0KXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcihlKXtsZXR7YW1wRmlyc3Q6dD0hMSxoeWJyaWQ6cj0hMSxoYXNRdWVyeTpuPSExfT12b2lkIDA9PT1lP3t9OmU7cmV0dXJuIHR8fHImJm59T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJpc0luQW1wTW9kZSIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHJ9fSl9LDk0NzA2OmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpT2JqZWN0LmRlZmluZVByb3BlcnR5KGUscix7ZW51bWVyYWJsZTohMCxnZXQ6dFtyXX0pfSh0LHtBcHBSb3V0ZXJDb250ZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIG99LEdsb2JhbExheW91dFJvdXRlckNvbnRleHQ6ZnVuY3Rpb24oKXtyZXR1cm4gaX0sTGF5b3V0Um91dGVyQ29udGV4dDpmdW5jdGlvbigpe3JldHVybiBhfSxNaXNzaW5nU2xvdENvbnRleHQ6ZnVuY3Rpb24oKXtyZXR1cm4gbH0sVGVtcGxhdGVDb250ZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIHV9fSk7bGV0IG49cig0MjQzMCkuXyhyKDc1MjcxKSksbz1uLmRlZmF1bHQuY3JlYXRlQ29udGV4dChudWxsKSxhPW4uZGVmYXVsdC5jcmVhdGVDb250ZXh0KG51bGwpLGk9bi5kZWZhdWx0LmNyZWF0ZUNvbnRleHQobnVsbCksdT1uLmRlZmF1bHQuY3JlYXRlQ29udGV4dChudWxsKSxsPW4uZGVmYXVsdC5jcmVhdGVDb250ZXh0KG5ldyBTZXQpfSw1ODEzNTpmdW5jdGlvbihlLHQpeyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIkJsb29tRmlsdGVyIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcn19KTtjbGFzcyBye3N0YXRpYyBmcm9tKGUsdCl7dm9pZCAwPT09dCYmKHQ9MWUtNCk7bGV0IG49bmV3IHIoZS5sZW5ndGgsdCk7Zm9yKGxldCB0IG9mIGUpbi5hZGQodCk7cmV0dXJuIG59ZXhwb3J0KCl7cmV0dXJue251bUl0ZW1zOnRoaXMubnVtSXRlbXMsZXJyb3JSYXRlOnRoaXMuZXJyb3JSYXRlLG51bUJpdHM6dGhpcy5udW1CaXRzLG51bUhhc2hlczp0aGlzLm51bUhhc2hlcyxiaXRBcnJheTp0aGlzLmJpdEFycmF5fX1pbXBvcnQoZSl7dGhpcy5udW1JdGVtcz1lLm51bUl0ZW1zLHRoaXMuZXJyb3JSYXRlPWUuZXJyb3JSYXRlLHRoaXMubnVtQml0cz1lLm51bUJpdHMsdGhpcy5udW1IYXNoZXM9ZS5udW1IYXNoZXMsdGhpcy5iaXRBcnJheT1lLmJpdEFycmF5fWFkZChlKXt0aGlzLmdldEhhc2hWYWx1ZXMoZSkuZm9yRWFjaChlPT57dGhpcy5iaXRBcnJheVtlXT0xfSl9Y29udGFpbnMoZSl7cmV0dXJuIHRoaXMuZ2V0SGFzaFZhbHVlcyhlKS5ldmVyeShlPT50aGlzLmJpdEFycmF5W2VdKX1nZXRIYXNoVmFsdWVzKGUpe2xldCB0PVtdO2ZvcihsZXQgcj0xO3I8PXRoaXMubnVtSGFzaGVzO3IrKyl7bGV0IG49ZnVuY3Rpb24oZSl7bGV0IHQ9MDtmb3IobGV0IHI9MDtyPGUubGVuZ3RoO3IrKyl0PU1hdGguaW11bCh0XmUuY2hhckNvZGVBdChyKSwxNTQwNDgzNDc3KSx0Xj10Pj4+MTMsdD1NYXRoLmltdWwodCwxNTQwNDgzNDc3KTtyZXR1cm4gdD4+PjB9KCIiK2UrcikldGhpcy5udW1CaXRzO3QucHVzaChuKX1yZXR1cm4gdH1jb25zdHJ1Y3RvcihlLHQ9MWUtNCl7dGhpcy5udW1JdGVtcz1lLHRoaXMuZXJyb3JSYXRlPXQsdGhpcy5udW1CaXRzPU1hdGguY2VpbCgtKGUqTWF0aC5sb2codCkpLyhNYXRoLmxvZygyKSpNYXRoLmxvZygyKSkpLHRoaXMubnVtSGFzaGVzPU1hdGguY2VpbCh0aGlzLm51bUJpdHMvZSpNYXRoLmxvZygyKSksdGhpcy5iaXRBcnJheT1BcnJheSh0aGlzLm51bUJpdHMpLmZpbGwoMCl9fX0sODI0MTI6ZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdClPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLHtlbnVtZXJhYmxlOiEwLGdldDp0W3JdfSl9KHQse0FQUF9CVUlMRF9NQU5JRkVTVDpmdW5jdGlvbigpe3JldHVybiB5fSxBUFBfQ0xJRU5UX0lOVEVSTkFMUzpmdW5jdGlvbigpe3JldHVybiBLfSxBUFBfUEFUSFNfTUFOSUZFU1Q6ZnVuY3Rpb24oKXtyZXR1cm4gbX0sQVBQX1BBVEhfUk9VVEVTX01BTklGRVNUOmZ1bmN0aW9uKCl7cmV0dXJuIF99LEFVVE9NQVRJQ19GT05UX09QVElNSVpBVElPTl9NQU5JRkVTVDpmdW5jdGlvbigpe3JldHVybiBDfSxCQVJSRUxfT1BUSU1JWkFUSU9OX1BSRUZJWDpmdW5jdGlvbigpe3JldHVybiBIfSxCTE9DS0VEX1BBR0VTOmZ1bmN0aW9uKCl7cmV0dXJuIER9LEJVSUxEX0lEX0ZJTEU6ZnVuY3Rpb24oKXtyZXR1cm4gTn0sQlVJTERfTUFOSUZFU1Q6ZnVuY3Rpb24oKXtyZXR1cm4gZ30sQ0xJRU5UX1BVQkxJQ19GSUxFU19QQVRIOmZ1bmN0aW9uKCl7cmV0dXJuIGt9LENMSUVOVF9SRUZFUkVOQ0VfTUFOSUZFU1Q6ZnVuY3Rpb24oKXtyZXR1cm4gV30sQ0xJRU5UX1NUQVRJQ19GSUxFU19QQVRIOmZ1bmN0aW9uKCl7cmV0dXJuIEZ9LENMSUVOVF9TVEFUSUNfRklMRVNfUlVOVElNRV9BTVA6ZnVuY3Rpb24oKXtyZXR1cm4gSn0sQ0xJRU5UX1NUQVRJQ19GSUxFU19SVU5USU1FX01BSU46ZnVuY3Rpb24oKXtyZXR1cm4gWH0sQ0xJRU5UX1NUQVRJQ19GSUxFU19SVU5USU1FX01BSU5fQVBQOmZ1bmN0aW9uKCl7cmV0dXJuIFl9LENMSUVOVF9TVEFUSUNfRklMRVNfUlVOVElNRV9QT0xZRklMTFM6ZnVuY3Rpb24oKXtyZXR1cm4gWn0sQ0xJRU5UX1NUQVRJQ19GSUxFU19SVU5USU1FX1BPTFlGSUxMU19TWU1CT0w6ZnVuY3Rpb24oKXtyZXR1cm4gZWV9LENMSUVOVF9TVEFUSUNfRklMRVNfUlVOVElNRV9SRUFDVF9SRUZSRVNIOmZ1bmN0aW9uKCl7cmV0dXJuICR9LENMSUVOVF9TVEFUSUNfRklMRVNfUlVOVElNRV9XRUJQQUNLOmZ1bmN0aW9uKCl7cmV0dXJuIFF9LENPTVBJTEVSX0lOREVYRVM6ZnVuY3Rpb24oKXtyZXR1cm4gYX0sQ09NUElMRVJfTkFNRVM6ZnVuY3Rpb24oKXtyZXR1cm4gb30sQ09ORklHX0ZJTEVTOmZ1bmN0aW9uKCl7cmV0dXJuIEx9LERFRkFVTFRfUlVOVElNRV9XRUJQQUNLOmZ1bmN0aW9uKCl7cmV0dXJuIGV0fSxERUZBVUxUX1NBTlNfU0VSSUZfRk9OVDpmdW5jdGlvbigpe3JldHVybiBlbH0sREVGQVVMVF9TRVJJRl9GT05UOmZ1bmN0aW9uKCl7cmV0dXJuIGV1fSxERVZfQ0xJRU5UX1BBR0VTX01BTklGRVNUOmZ1bmN0aW9uKCl7cmV0dXJuIFR9LERFVl9NSURETEVXQVJFX01BTklGRVNUOmZ1bmN0aW9uKCl7cmV0dXJuIHh9LEVER0VfUlVOVElNRV9XRUJQQUNLOmZ1bmN0aW9uKCl7cmV0dXJuIGVyfSxFREdFX1VOU1VQUE9SVEVEX05PREVfQVBJUzpmdW5jdGlvbigpe3JldHVybiBlcH0sRVhQT1JUX0RFVEFJTDpmdW5jdGlvbigpe3JldHVybiBTfSxFWFBPUlRfTUFSS0VSOmZ1bmN0aW9uKCl7cmV0dXJuIEV9LEZVTkNUSU9OU19DT05GSUdfTUFOSUZFU1Q6ZnVuY3Rpb24oKXtyZXR1cm4gYn0sR09PR0xFX0ZPTlRfUFJPVklERVI6ZnVuY3Rpb24oKXtyZXR1cm4gZWF9LElNQUdFU19NQU5JRkVTVDpmdW5jdGlvbigpe3JldHVybiB3fSxJTlRFUkNFUFRJT05fUk9VVEVfUkVXUklURV9NQU5JRkVTVDpmdW5jdGlvbigpe3JldHVybiBWfSxNSURETEVXQVJFX0JVSUxEX01BTklGRVNUOmZ1bmN0aW9uKCl7cmV0dXJuIEd9LE1JRERMRVdBUkVfTUFOSUZFU1Q6ZnVuY3Rpb24oKXtyZXR1cm4gTX0sTUlERExFV0FSRV9SRUFDVF9MT0FEQUJMRV9NQU5JRkVTVDpmdW5jdGlvbigpe3JldHVybiB6fSxNT0RFUk5fQlJPV1NFUlNMSVNUX1RBUkdFVDpmdW5jdGlvbigpe3JldHVybiBuLmRlZmF1bHR9LE5FWFRfQlVJTFRJTl9ET0NVTUVOVDpmdW5jdGlvbigpe3JldHVybiBCfSxORVhUX0ZPTlRfTUFOSUZFU1Q6ZnVuY3Rpb24oKXtyZXR1cm4gdn0sT1BUSU1JWkVEX0ZPTlRfUFJPVklERVJTOmZ1bmN0aW9uKCl7cmV0dXJuIGVpfSxQQUdFU19NQU5JRkVTVDpmdW5jdGlvbigpe3JldHVybiBofSxQSEFTRV9ERVZFTE9QTUVOVF9TRVJWRVI6ZnVuY3Rpb24oKXtyZXR1cm4gZn0sUEhBU0VfRVhQT1JUOmZ1bmN0aW9uKCl7cmV0dXJuIGx9LFBIQVNFX0lORk86ZnVuY3Rpb24oKXtyZXR1cm4gcH0sUEhBU0VfUFJPRFVDVElPTl9CVUlMRDpmdW5jdGlvbigpe3JldHVybiBzfSxQSEFTRV9QUk9EVUNUSU9OX1NFUlZFUjpmdW5jdGlvbigpe3JldHVybiBjfSxQSEFTRV9URVNUOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LFBSRVJFTkRFUl9NQU5JRkVTVDpmdW5jdGlvbigpe3JldHVybiBPfSxSRUFDVF9MT0FEQUJMRV9NQU5JRkVTVDpmdW5jdGlvbigpe3JldHVybiBJfSxST1VURVNfTUFOSUZFU1Q6ZnVuY3Rpb24oKXtyZXR1cm4gan0sUlNDX01PRFVMRV9UWVBFUzpmdW5jdGlvbigpe3JldHVybiBlZH0sU0VSVkVSX0RJUkVDVE9SWTpmdW5jdGlvbigpe3JldHVybiBBfSxTRVJWRVJfRklMRVNfTUFOSUZFU1Q6ZnVuY3Rpb24oKXtyZXR1cm4gUn0sU0VSVkVSX1BST1BTX0lEOmZ1bmN0aW9uKCl7cmV0dXJuIGVvfSxTRVJWRVJfUkVGRVJFTkNFX01BTklGRVNUOmZ1bmN0aW9uKCl7cmV0dXJuIHF9LFNUQVRJQ19QUk9QU19JRDpmdW5jdGlvbigpe3JldHVybiBlbn0sU1RBVElDX1NUQVRVU19QQUdFUzpmdW5jdGlvbigpe3JldHVybiBlc30sU1RSSU5HX0xJVEVSQUxfRFJPUF9CVU5ETEU6ZnVuY3Rpb24oKXtyZXR1cm4gVX0sU1VCUkVTT1VSQ0VfSU5URUdSSVRZX01BTklGRVNUOmZ1bmN0aW9uKCl7cmV0dXJuIFB9LFNZU1RFTV9FTlRSWVBPSU5UUzpmdW5jdGlvbigpe3JldHVybiBlaH0sVFJBQ0VfT1VUUFVUX1ZFUlNJT046ZnVuY3Rpb24oKXtyZXR1cm4gZWN9LFRVUkJPX1RSQUNFX0RFRkFVTFRfTUVNT1JZX0xJTUlUOmZ1bmN0aW9uKCl7cmV0dXJuIGVmfSxVTkRFUlNDT1JFX05PVF9GT1VORF9ST1VURTpmdW5jdGlvbigpe3JldHVybiBpfSxVTkRFUlNDT1JFX05PVF9GT1VORF9ST1VURV9FTlRSWTpmdW5jdGlvbigpe3JldHVybiB1fX0pO2xldCBuPXIoNDI0MzApLl8ocigzMjYwNykpLG89e2NsaWVudDoiY2xpZW50IixzZXJ2ZXI6InNlcnZlciIsZWRnZVNlcnZlcjoiZWRnZS1zZXJ2ZXIifSxhPXtbby5jbGllbnRdOjAsW28uc2VydmVyXToxLFtvLmVkZ2VTZXJ2ZXJdOjJ9LGk9Ii9fbm90LWZvdW5kIix1PSIiK2krIi9wYWdlIixsPSJwaGFzZS1leHBvcnQiLHM9InBoYXNlLXByb2R1Y3Rpb24tYnVpbGQiLGM9InBoYXNlLXByb2R1Y3Rpb24tc2VydmVyIixmPSJwaGFzZS1kZXZlbG9wbWVudC1zZXJ2ZXIiLGQ9InBoYXNlLXRlc3QiLHA9InBoYXNlLWluZm8iLGg9InBhZ2VzLW1hbmlmZXN0Lmpzb24iLG09ImFwcC1wYXRocy1tYW5pZmVzdC5qc29uIixfPSJhcHAtcGF0aC1yb3V0ZXMtbWFuaWZlc3QuanNvbiIsZz0iYnVpbGQtbWFuaWZlc3QuanNvbiIseT0iYXBwLWJ1aWxkLW1hbmlmZXN0Lmpzb24iLGI9ImZ1bmN0aW9ucy1jb25maWctbWFuaWZlc3QuanNvbiIsUD0ic3VicmVzb3VyY2UtaW50ZWdyaXR5LW1hbmlmZXN0Iix2PSJuZXh0LWZvbnQtbWFuaWZlc3QiLEU9ImV4cG9ydC1tYXJrZXIuanNvbiIsUz0iZXhwb3J0LWRldGFpbC5qc29uIixPPSJwcmVyZW5kZXItbWFuaWZlc3QuanNvbiIsaj0icm91dGVzLW1hbmlmZXN0Lmpzb24iLHc9ImltYWdlcy1tYW5pZmVzdC5qc29uIixSPSJyZXF1aXJlZC1zZXJ2ZXItZmlsZXMuanNvbiIsVD0iX2RldlBhZ2VzTWFuaWZlc3QuanNvbiIsTT0ibWlkZGxld2FyZS1tYW5pZmVzdC5qc29uIix4PSJfZGV2TWlkZGxld2FyZU1hbmlmZXN0Lmpzb24iLEk9InJlYWN0LWxvYWRhYmxlLW1hbmlmZXN0Lmpzb24iLEM9ImZvbnQtbWFuaWZlc3QuanNvbiIsQT0ic2VydmVyIixMPVsibmV4dC5jb25maWcuanMiLCJuZXh0LmNvbmZpZy5tanMiXSxOPSJCVUlMRF9JRCIsRD1bIi9fZG9jdW1lbnQiLCIvX2FwcCIsIi9fZXJyb3IiXSxrPSJwdWJsaWMiLEY9InN0YXRpYyIsVT0iX19ORVhUX0RST1BfQ0xJRU5UX0ZJTEVfXyIsQj0iX19ORVhUX0JVSUxUSU5fRE9DVU1FTlRfXyIsSD0iX19iYXJyZWxfb3B0aW1pemVfXyIsVz0iY2xpZW50LXJlZmVyZW5jZS1tYW5pZmVzdCIscT0ic2VydmVyLXJlZmVyZW5jZS1tYW5pZmVzdCIsRz0ibWlkZGxld2FyZS1idWlsZC1tYW5pZmVzdCIsej0ibWlkZGxld2FyZS1yZWFjdC1sb2FkYWJsZS1tYW5pZmVzdCIsVj0iaW50ZXJjZXB0aW9uLXJvdXRlLXJld3JpdGUtbWFuaWZlc3QiLFg9Im1haW4iLFk9IiIrWCsiLWFwcCIsSz0iYXBwLXBhZ2VzLWludGVybmFscyIsJD0icmVhY3QtcmVmcmVzaCIsSj0iYW1wIixRPSJ3ZWJwYWNrIixaPSJwb2x5ZmlsbHMiLGVlPVN5bWJvbChaKSxldD0id2VicGFjay1ydW50aW1lIixlcj0iZWRnZS1ydW50aW1lLXdlYnBhY2siLGVuPSJfX05fU1NHIixlbz0iX19OX1NTUCIsZWE9Imh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vIixlaT1be3VybDplYSxwcmVjb25uZWN0OiJodHRwczovL2ZvbnRzLmdzdGF0aWMuY29tIn0se3VybDoiaHR0cHM6Ly91c2UudHlwZWtpdC5uZXQiLHByZWNvbm5lY3Q6Imh0dHBzOi8vdXNlLnR5cGVraXQubmV0In1dLGV1PXtuYW1lOiJUaW1lcyBOZXcgUm9tYW4iLHhBdmdDaGFyV2lkdGg6ODIxLGF6QXZnV2lkdGg6ODU0LjM5NTM0ODgzNzIwOTMsdW5pdHNQZXJFbToyMDQ4fSxlbD17bmFtZToiQXJpYWwiLHhBdmdDaGFyV2lkdGg6OTA0LGF6QXZnV2lkdGg6OTM0LjUxMTYyNzkwNjk3NjcsdW5pdHNQZXJFbToyMDQ4fSxlcz1bIi81MDAiXSxlYz0xLGVmPTZlMyxlZD17Y2xpZW50OiJjbGllbnQiLHNlcnZlcjoic2VydmVyIn0sZXA9WyJjbGVhckltbWVkaWF0ZSIsInNldEltbWVkaWF0ZSIsIkJyb2FkY2FzdENoYW5uZWwiLCJCeXRlTGVuZ3RoUXVldWluZ1N0cmF0ZWd5IiwiQ29tcHJlc3Npb25TdHJlYW0iLCJDb3VudFF1ZXVpbmdTdHJhdGVneSIsIkRlY29tcHJlc3Npb25TdHJlYW0iLCJEb21FeGNlcHRpb24iLCJNZXNzYWdlQ2hhbm5lbCIsIk1lc3NhZ2VFdmVudCIsIk1lc3NhZ2VQb3J0IiwiUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlciIsIlJlYWRhYmxlU3RyZWFtQllPQlJlcXVlc3QiLCJSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyIiwiVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIiLCJXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyIl0sZWg9bmV3IFNldChbWCwkLEosWV0pOygiZnVuY3Rpb24iPT10eXBlb2YgdC5kZWZhdWx0fHwib2JqZWN0Ij09dHlwZW9mIHQuZGVmYXVsdCYmbnVsbCE9PXQuZGVmYXVsdCkmJnZvaWQgMD09PXQuZGVmYXVsdC5fX2VzTW9kdWxlJiYoT2JqZWN0LmRlZmluZVByb3BlcnR5KHQuZGVmYXVsdCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksT2JqZWN0LmFzc2lnbih0LmRlZmF1bHQsdCksZS5leHBvcnRzPXQuZGVmYXVsdCl9LDE0MTE6ZnVuY3Rpb24oZSx0KXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJlc2NhcGVTdHJpbmdSZWdleHAiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBvfX0pO2xldCByPS9bfFxce30oKVtcXV4kKyo/Li1dLyxuPS9bfFxce30oKVtcXV4kKyo/Li1dL2c7ZnVuY3Rpb24gbyhlKXtyZXR1cm4gci50ZXN0KGUpP2UucmVwbGFjZShuLCJcXCQmIik6ZX19LDc4ODAxOmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJIZWFkTWFuYWdlckNvbnRleHQiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBufX0pO2xldCBuPXIoNDI0MzApLl8ocig3NTI3MSkpLmRlZmF1bHQuY3JlYXRlQ29udGV4dCh7fSl9LDc0NzE0OmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpT2JqZWN0LmRlZmluZVByb3BlcnR5KGUscix7ZW51bWVyYWJsZTohMCxnZXQ6dFtyXX0pfSh0LHtkZWZhdWx0OmZ1bmN0aW9uKCl7cmV0dXJuIG19LGRlZmF1bHRIZWFkOmZ1bmN0aW9uKCl7cmV0dXJuIGZ9fSk7bGV0IG49cig0MjQzMCksbz1yKDExNzc4KSxhPXIoNTI2NzYpLGk9by5fKHIoNzUyNzEpKSx1PW4uXyhyKDQyNTk5KSksbD1yKDM5NDAzKSxzPXIoNzg4MDEpLGM9cigzNDg0MCk7ZnVuY3Rpb24gZihlKXt2b2lkIDA9PT1lJiYoZT0hMSk7bGV0IHQ9WygwLGEuanN4KSgibWV0YSIse2NoYXJTZXQ6InV0Zi04In0pXTtyZXR1cm4gZXx8dC5wdXNoKCgwLGEuanN4KSgibWV0YSIse25hbWU6InZpZXdwb3J0Iixjb250ZW50OiJ3aWR0aD1kZXZpY2Utd2lkdGgifSkpLHR9ZnVuY3Rpb24gZChlLHQpe3JldHVybiJzdHJpbmciPT10eXBlb2YgdHx8Im51bWJlciI9PXR5cGVvZiB0P2U6dC50eXBlPT09aS5kZWZhdWx0LkZyYWdtZW50P2UuY29uY2F0KGkuZGVmYXVsdC5DaGlsZHJlbi50b0FycmF5KHQucHJvcHMuY2hpbGRyZW4pLnJlZHVjZSgoZSx0KT0+InN0cmluZyI9PXR5cGVvZiB0fHwibnVtYmVyIj09dHlwZW9mIHQ/ZTplLmNvbmNhdCh0KSxbXSkpOmUuY29uY2F0KHQpfXIoMzM0OTgpO2xldCBwPVsibmFtZSIsImh0dHBFcXVpdiIsImNoYXJTZXQiLCJpdGVtUHJvcCJdO2Z1bmN0aW9uIGgoZSx0KXtsZXR7aW5BbXBNb2RlOnJ9PXQ7cmV0dXJuIGUucmVkdWNlKGQsW10pLnJldmVyc2UoKS5jb25jYXQoZihyKS5yZXZlcnNlKCkpLmZpbHRlcihmdW5jdGlvbigpe2xldCBlPW5ldyBTZXQsdD1uZXcgU2V0LHI9bmV3IFNldCxuPXt9O3JldHVybiBvPT57bGV0IGE9ITAsaT0hMTtpZihvLmtleSYmIm51bWJlciIhPXR5cGVvZiBvLmtleSYmby5rZXkuaW5kZXhPZigiJCIpPjApe2k9ITA7bGV0IHQ9by5rZXkuc2xpY2Uoby5rZXkuaW5kZXhPZigiJCIpKzEpO2UuaGFzKHQpP2E9ITE6ZS5hZGQodCl9c3dpdGNoKG8udHlwZSl7Y2FzZSJ0aXRsZSI6Y2FzZSJiYXNlIjp0LmhhcyhvLnR5cGUpP2E9ITE6dC5hZGQoby50eXBlKTticmVhaztjYXNlIm1ldGEiOmZvcihsZXQgZT0wLHQ9cC5sZW5ndGg7ZTx0O2UrKyl7bGV0IHQ9cFtlXTtpZihvLnByb3BzLmhhc093blByb3BlcnR5KHQpKXtpZigiY2hhclNldCI9PT10KXIuaGFzKHQpP2E9ITE6ci5hZGQodCk7ZWxzZXtsZXQgZT1vLnByb3BzW3RdLHI9blt0XXx8bmV3IFNldDsoIm5hbWUiIT09dHx8IWkpJiZyLmhhcyhlKT9hPSExOihyLmFkZChlKSxuW3RdPXIpfX19fXJldHVybiBhfX0oKSkucmV2ZXJzZSgpLm1hcCgoZSx0KT0+e2xldCBuPWUua2V5fHx0O2lmKCFyJiYibGluayI9PT1lLnR5cGUmJmUucHJvcHMuaHJlZiYmWyJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzcyIsImh0dHBzOi8vdXNlLnR5cGVraXQubmV0LyJdLnNvbWUodD0+ZS5wcm9wcy5ocmVmLnN0YXJ0c1dpdGgodCkpKXtsZXQgdD17Li4uZS5wcm9wc3x8e319O3JldHVybiB0WyJkYXRhLWhyZWYiXT10LmhyZWYsdC5ocmVmPXZvaWQgMCx0WyJkYXRhLW9wdGltaXplZC1mb250cyJdPSEwLGkuZGVmYXVsdC5jbG9uZUVsZW1lbnQoZSx0KX1yZXR1cm4gaS5kZWZhdWx0LmNsb25lRWxlbWVudChlLHtrZXk6bn0pfSl9bGV0IG09ZnVuY3Rpb24oZSl7bGV0e2NoaWxkcmVuOnR9PWUscj0oMCxpLnVzZUNvbnRleHQpKGwuQW1wU3RhdGVDb250ZXh0KSxuPSgwLGkudXNlQ29udGV4dCkocy5IZWFkTWFuYWdlckNvbnRleHQpO3JldHVybigwLGEuanN4KSh1LmRlZmF1bHQse3JlZHVjZUNvbXBvbmVudHNUb1N0YXRlOmgsaGVhZE1hbmFnZXI6bixpbkFtcE1vZGU6KDAsYy5pc0luQW1wTW9kZSkociksY2hpbGRyZW46dH0pfTsoImZ1bmN0aW9uIj09dHlwZW9mIHQuZGVmYXVsdHx8Im9iamVjdCI9PXR5cGVvZiB0LmRlZmF1bHQmJm51bGwhPT10LmRlZmF1bHQpJiZ2b2lkIDA9PT10LmRlZmF1bHQuX19lc01vZHVsZSYmKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LmRlZmF1bHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLE9iamVjdC5hc3NpZ24odC5kZWZhdWx0LHQpLGUuZXhwb3J0cz10LmRlZmF1bHQpfSwzODMxODpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHIse2VudW1lcmFibGU6ITAsZ2V0OnRbcl19KX0odCx7UGF0aFBhcmFtc0NvbnRleHQ6ZnVuY3Rpb24oKXtyZXR1cm4gaX0sUGF0aG5hbWVDb250ZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGF9LFNlYXJjaFBhcmFtc0NvbnRleHQ6ZnVuY3Rpb24oKXtyZXR1cm4gb319KTtsZXQgbj1yKDc1MjcxKSxvPSgwLG4uY3JlYXRlQ29udGV4dCkobnVsbCksYT0oMCxuLmNyZWF0ZUNvbnRleHQpKG51bGwpLGk9KDAsbi5jcmVhdGVDb250ZXh0KShudWxsKX0sNTEyNDk6ZnVuY3Rpb24oZSx0KXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcihlLHQpe2xldCByO2xldCBuPWUuc3BsaXQoIi8iKTtyZXR1cm4odHx8W10pLnNvbWUodD0+ISFuWzFdJiZuWzFdLnRvTG93ZXJDYXNlKCk9PT10LnRvTG93ZXJDYXNlKCkmJihyPXQsbi5zcGxpY2UoMSwxKSxlPW4uam9pbigiLyIpfHwiLyIsITApKSx7cGF0aG5hbWU6ZSxkZXRlY3RlZExvY2FsZTpyfX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIm5vcm1hbGl6ZUxvY2FsZVBhdGgiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiByfX0pfSw2NDkwMzpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiSW1hZ2VDb25maWdDb250ZXh0Iix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYX19KTtsZXQgbj1yKDQyNDMwKS5fKHIoNzUyNzEpKSxvPXIoNTc0MzApLGE9bi5kZWZhdWx0LmNyZWF0ZUNvbnRleHQoby5pbWFnZUNvbmZpZ0RlZmF1bHQpfSw1NzQzMDpmdW5jdGlvbihlLHQpeyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdClPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLHtlbnVtZXJhYmxlOiEwLGdldDp0W3JdfSl9KHQse1ZBTElEX0xPQURFUlM6ZnVuY3Rpb24oKXtyZXR1cm4gcn0saW1hZ2VDb25maWdEZWZhdWx0OmZ1bmN0aW9uKCl7cmV0dXJuIG59fSk7bGV0IHI9WyJkZWZhdWx0IiwiaW1naXgiLCJjbG91ZGluYXJ5IiwiYWthbWFpIiwiY3VzdG9tIl0sbj17ZGV2aWNlU2l6ZXM6WzY0MCw3NTAsODI4LDEwODAsMTIwMCwxOTIwLDIwNDgsMzg0MF0saW1hZ2VTaXplczpbMTYsMzIsNDgsNjQsOTYsMTI4LDI1NiwzODRdLHBhdGg6Ii9fbmV4dC9pbWFnZSIsbG9hZGVyOiJkZWZhdWx0Iixsb2FkZXJGaWxlOiIiLGRvbWFpbnM6W10sZGlzYWJsZVN0YXRpY0ltYWdlczohMSxtaW5pbXVtQ2FjaGVUVEw6NjAsZm9ybWF0czpbImltYWdlL3dlYnAiXSxkYW5nZXJvdXNseUFsbG93U1ZHOiExLGNvbnRlbnRTZWN1cml0eVBvbGljeToic2NyaXB0LXNyYyAnbm9uZSc7IGZyYW1lLXNyYyAnbm9uZSc7IHNhbmRib3g7Iixjb250ZW50RGlzcG9zaXRpb25UeXBlOiJpbmxpbmUiLHJlbW90ZVBhdHRlcm5zOltdLHVub3B0aW1pemVkOiExfX0sMzYzMTg6ZnVuY3Rpb24oZSx0KXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcihlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfWZ1bmN0aW9uIG4oZSl7aWYoIltvYmplY3QgT2JqZWN0XSIhPT1yKGUpKXJldHVybiExO2xldCB0PU9iamVjdC5nZXRQcm90b3R5cGVPZihlKTtyZXR1cm4gbnVsbD09PXR8fHQuaGFzT3duUHJvcGVydHkoImlzUHJvdG90eXBlT2YiKX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdClPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLHtlbnVtZXJhYmxlOiEwLGdldDp0W3JdfSl9KHQse2dldE9iamVjdENsYXNzTGFiZWw6ZnVuY3Rpb24oKXtyZXR1cm4gcn0saXNQbGFpbk9iamVjdDpmdW5jdGlvbigpe3JldHVybiBufX0pfSwyMTgzMDpmdW5jdGlvbihlLHQpeyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdClPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLHtlbnVtZXJhYmxlOiEwLGdldDp0W3JdfSl9KHQse0JhaWxvdXRUb0NTUkVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIG59LGlzQmFpbG91dFRvQ1NSRXJyb3I6ZnVuY3Rpb24oKXtyZXR1cm4gb319KTtsZXQgcj0iQkFJTE9VVF9UT19DTElFTlRfU0lERV9SRU5ERVJJTkciO2NsYXNzIG4gZXh0ZW5kcyBFcnJvcntjb25zdHJ1Y3RvcihlKXtzdXBlcigiQmFpbCBvdXQgdG8gY2xpZW50LXNpZGUgcmVuZGVyaW5nOiAiK2UpLHRoaXMucmVhc29uPWUsdGhpcy5kaWdlc3Q9cn19ZnVuY3Rpb24gbyhlKXtyZXR1cm4ib2JqZWN0Ij09dHlwZW9mIGUmJm51bGwhPT1lJiYiZGlnZXN0ImluIGUmJmUuZGlnZXN0PT09cn19LDY2NDA2OmZ1bmN0aW9uKGUsdCl7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIoKXtsZXQgZT1PYmplY3QuY3JlYXRlKG51bGwpO3JldHVybntvbih0LHIpeyhlW3RdfHwoZVt0XT1bXSkpLnB1c2gocil9LG9mZih0LHIpe2VbdF0mJmVbdF0uc3BsaWNlKGVbdF0uaW5kZXhPZihyKT4+PjAsMSl9LGVtaXQodCl7Zm9yKHZhciByPWFyZ3VtZW50cy5sZW5ndGgsbj1BcnJheShyPjE/ci0xOjApLG89MTtvPHI7bysrKW5bby0xXT1hcmd1bWVudHNbb107KGVbdF18fFtdKS5zbGljZSgpLm1hcChlPT57ZSguLi5uKX0pfX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJkZWZhdWx0Iix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcn19KX0sMzI2MDc6ZnVuY3Rpb24oZSl7InVzZSBzdHJpY3QiO2UuZXhwb3J0cz1bImNocm9tZSA2NCIsImVkZ2UgNzkiLCJmaXJlZm94IDY3Iiwib3BlcmEgNTEiLCJzYWZhcmkgMTIiXX0sNzAwMDI6ZnVuY3Rpb24oZSx0KXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcihlKXtsZXQgdD0obnVsbD09ZT92b2lkIDA6ZS5yZXBsYWNlKC9eXC8rLywiIikpfHwhMTtyZXR1cm4gdCYmdC5zdGFydHNXaXRoKCI6Ly8iKT90LnNwbGl0KCI6Ly8iLDIpWzFdOnQ/Ii8iK3Q6IiJ9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJub3JtYWxpemVkQXNzZXRQcmVmaXgiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiByfX0pfSwzMzMyODpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiZGVub3JtYWxpemVQYWdlUGF0aCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGF9fSk7bGV0IG49cig1ODc3Nyksbz1yKDU1MjI2KTtmdW5jdGlvbiBhKGUpe2xldCB0PSgwLG8ubm9ybWFsaXplUGF0aFNlcCkoZSk7cmV0dXJuIHQuc3RhcnRzV2l0aCgiL2luZGV4LyIpJiYhKDAsbi5pc0R5bmFtaWNSb3V0ZSkodCk/dC5zbGljZSg2KToiL2luZGV4IiE9PXQ/dDoiLyJ9fSw2OTcyMDpmdW5jdGlvbihlLHQpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiByKGUpe3JldHVybiBlLnN0YXJ0c1dpdGgoIi8iKT9lOiIvIitlfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiZW5zdXJlTGVhZGluZ1NsYXNoIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcn19KX0sNTUyMjY6ZnVuY3Rpb24oZSx0KXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcihlKXtyZXR1cm4gZS5yZXBsYWNlKC9cXC9nLCIvIil9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJub3JtYWxpemVQYXRoU2VwIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcn19KX0sNTUzNjg6ZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIlJvdXRlckNvbnRleHQiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBufX0pO2xldCBuPXIoNDI0MzApLl8ocig3NTI3MSkpLmRlZmF1bHQuY3JlYXRlQ29udGV4dChudWxsKX0sNzQyMjQ6ZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdClPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLHtlbnVtZXJhYmxlOiEwLGdldDp0W3JdfSl9KHQse1BhdGhuYW1lQ29udGV4dFByb3ZpZGVyQWRhcHRlcjpmdW5jdGlvbigpe3JldHVybiBwfSxhZGFwdEZvckFwcFJvdXRlckluc3RhbmNlOmZ1bmN0aW9uKCl7cmV0dXJuIGN9LGFkYXB0Rm9yUGF0aFBhcmFtczpmdW5jdGlvbigpe3JldHVybiBkfSxhZGFwdEZvclNlYXJjaFBhcmFtczpmdW5jdGlvbigpe3JldHVybiBmfX0pO2xldCBuPXIoMTE3NzgpLG89cig1MjY3NiksYT1uLl8ocig3NTI3MSkpLGk9cigzODMxOCksdT1yKDU4Nzc3KSxsPXIoNDY5NDkpLHM9cigzNjI0Mik7ZnVuY3Rpb24gYyhlKXtyZXR1cm57YmFjaygpe2UuYmFjaygpfSxmb3J3YXJkKCl7ZS5mb3J3YXJkKCl9LHJlZnJlc2goKXtlLnJlbG9hZCgpfSxmYXN0UmVmcmVzaCgpe30scHVzaCh0LHIpe2xldHtzY3JvbGw6bn09dm9pZCAwPT09cj97fTpyO2UucHVzaCh0LHZvaWQgMCx7c2Nyb2xsOm59KX0scmVwbGFjZSh0LHIpe2xldHtzY3JvbGw6bn09dm9pZCAwPT09cj97fTpyO2UucmVwbGFjZSh0LHZvaWQgMCx7c2Nyb2xsOm59KX0scHJlZmV0Y2godCl7ZS5wcmVmZXRjaCh0KX19fWZ1bmN0aW9uIGYoZSl7cmV0dXJuIGUuaXNSZWFkeSYmZS5xdWVyeT8oMCxsLmFzUGF0aFRvU2VhcmNoUGFyYW1zKShlLmFzUGF0aCk6bmV3IFVSTFNlYXJjaFBhcmFtc31mdW5jdGlvbiBkKGUpe2lmKCFlLmlzUmVhZHl8fCFlLnF1ZXJ5KXJldHVybiBudWxsO2xldCB0PXt9O2ZvcihsZXQgciBvZiBPYmplY3Qua2V5cygoMCxzLmdldFJvdXRlUmVnZXgpKGUucGF0aG5hbWUpLmdyb3VwcykpdFtyXT1lLnF1ZXJ5W3JdO3JldHVybiB0fWZ1bmN0aW9uIHAoZSl7bGV0e2NoaWxkcmVuOnQscm91dGVyOnIsLi4ubn09ZSxsPSgwLGEudXNlUmVmKShuLmlzQXV0b0V4cG9ydCkscz0oMCxhLnVzZU1lbW8pKCgpPT57bGV0IGU7bGV0IHQ9bC5jdXJyZW50O2lmKHQmJihsLmN1cnJlbnQ9ITEpLCgwLHUuaXNEeW5hbWljUm91dGUpKHIucGF0aG5hbWUpJiYoci5pc0ZhbGxiYWNrfHx0JiYhci5pc1JlYWR5KSlyZXR1cm4gbnVsbDt0cnl7ZT1uZXcgVVJMKHIuYXNQYXRoLCJodHRwOi8vZiIpfWNhdGNoKGUpe3JldHVybiIvIn1yZXR1cm4gZS5wYXRobmFtZX0sW3IuYXNQYXRoLHIuaXNGYWxsYmFjayxyLmlzUmVhZHksci5wYXRobmFtZV0pO3JldHVybigwLG8uanN4KShpLlBhdGhuYW1lQ29udGV4dC5Qcm92aWRlcix7dmFsdWU6cyxjaGlsZHJlbjp0fSl9fSw4MjY0MzpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHIse2VudW1lcmFibGU6ITAsZ2V0OnRbcl19KX0odCx7Y3JlYXRlS2V5OmZ1bmN0aW9uKCl7cmV0dXJuIHF9LGRlZmF1bHQ6ZnVuY3Rpb24oKXtyZXR1cm4gVn0sbWF0Y2hlc01pZGRsZXdhcmU6ZnVuY3Rpb24oKXtyZXR1cm4gTn19KTtsZXQgbj1yKDQyNDMwKSxvPXIoMTE3NzgpLGE9cig4NjYyMyksaT1yKDY4MzgxKSx1PXIoMTY3MjEpLGw9by5fKHIoMTg2MTgpKSxzPXIoMzMzMjgpLGM9cig1MTI0OSksZj1uLl8ocig2NjQwNikpLGQ9cig3MzAwNikscD1yKDU5OTIxKSxoPXIoOTk2OTgpO3IoMzQzODIpO2xldCBtPXIoMjg0MzMpLF89cigzNjI0MiksZz1yKDM1MjI3KTtyKDczMzk3KTtsZXQgeT1yKDc2NDc4KSxiPXIoMzcwOTUpLFA9cigzMTA2KSx2PXIoNDc4ODkpLEU9cig4MTgxNyksUz1yKDk0ODgyKSxPPXIoMjI5OTEpLGo9cigyOTU2Niksdz1yKDI0NDEyKSxSPXIoMTY1NTQpLFQ9cig4Mzk4MyksTT1yKDM3MDMzKSx4PXIoNDIzMiksST1yKDQxNDIyKSxDPXIoNzQ5NDMpLEE9cig2MTAzMCk7ZnVuY3Rpb24gTCgpe3JldHVybiBPYmplY3QuYXNzaWduKEVycm9yKCJSb3V0ZSBDYW5jZWxsZWQiKSx7Y2FuY2VsbGVkOiEwfSl9YXN5bmMgZnVuY3Rpb24gTihlKXtsZXQgdD1hd2FpdCBQcm9taXNlLnJlc29sdmUoZS5yb3V0ZXIucGFnZUxvYWRlci5nZXRNaWRkbGV3YXJlKCkpO2lmKCF0KXJldHVybiExO2xldHtwYXRobmFtZTpyfT0oMCx5LnBhcnNlUGF0aCkoZS5hc1BhdGgpLG49KDAsUy5oYXNCYXNlUGF0aCkocik/KDAsdi5yZW1vdmVCYXNlUGF0aCkocik6cixvPSgwLEUuYWRkQmFzZVBhdGgpKCgwLGIuYWRkTG9jYWxlKShuLGUubG9jYWxlKSk7cmV0dXJuIHQuc29tZShlPT5uZXcgUmVnRXhwKGUucmVnZXhwKS50ZXN0KG8pKX1mdW5jdGlvbiBEKGUpe2xldCB0PSgwLGQuZ2V0TG9jYXRpb25PcmlnaW4pKCk7cmV0dXJuIGUuc3RhcnRzV2l0aCh0KT9lLnN1YnN0cmluZyh0Lmxlbmd0aCk6ZX1mdW5jdGlvbiBrKGUsdCxyKXtsZXRbbixvXT0oMCxPLnJlc29sdmVIcmVmKShlLHQsITApLGE9KDAsZC5nZXRMb2NhdGlvbk9yaWdpbikoKSxpPW4uc3RhcnRzV2l0aChhKSx1PW8mJm8uc3RhcnRzV2l0aChhKTtuPUQobiksbz1vP0Qobyk6bztsZXQgbD1pP246KDAsRS5hZGRCYXNlUGF0aCkobikscz1yP0QoKDAsTy5yZXNvbHZlSHJlZikoZSxyKSk6b3x8bjtyZXR1cm57dXJsOmwsYXM6dT9zOigwLEUuYWRkQmFzZVBhdGgpKHMpfX1mdW5jdGlvbiBGKGUsdCl7bGV0IHI9KDAsYS5yZW1vdmVUcmFpbGluZ1NsYXNoKSgoMCxzLmRlbm9ybWFsaXplUGFnZVBhdGgpKGUpKTtyZXR1cm4iLzQwNCI9PT1yfHwiL19lcnJvciI9PT1yP2U6KHQuaW5jbHVkZXMocil8fHQuc29tZSh0PT57aWYoKDAscC5pc0R5bmFtaWNSb3V0ZSkodCkmJigwLF8uZ2V0Um91dGVSZWdleCkodCkucmUudGVzdChyKSlyZXR1cm4gZT10LCEwfSksKDAsYS5yZW1vdmVUcmFpbGluZ1NsYXNoKShlKSl9YXN5bmMgZnVuY3Rpb24gVShlKXtpZighYXdhaXQgTihlKXx8IWUuZmV0Y2hEYXRhKXJldHVybiBudWxsO2xldCB0PWF3YWl0IGUuZmV0Y2hEYXRhKCkscj1hd2FpdCBmdW5jdGlvbihlLHQscil7bGV0IG49e2Jhc2VQYXRoOnIucm91dGVyLmJhc2VQYXRoLGkxOG46e2xvY2FsZXM6ci5yb3V0ZXIubG9jYWxlc30sdHJhaWxpbmdTbGFzaDohMX0sbz10LmhlYWRlcnMuZ2V0KCJ4LW5leHRqcy1yZXdyaXRlIiksdT1vfHx0LmhlYWRlcnMuZ2V0KCJ4LW5leHRqcy1tYXRjaGVkLXBhdGgiKSxsPXQuaGVhZGVycy5nZXQoIngtbWF0Y2hlZC1wYXRoIik7aWYoIWx8fHV8fGwuaW5jbHVkZXMoIl9fbmV4dF9kYXRhX2NhdGNoYWxsIil8fGwuaW5jbHVkZXMoIi9fZXJyb3IiKXx8bC5pbmNsdWRlcygiLzQwNCIpfHwodT1sKSx1KXtpZih1LnN0YXJ0c1dpdGgoIi8iKSl7bGV0IHQ9KDAsaC5wYXJzZVJlbGF0aXZlVXJsKSh1KSxsPSgwLHcuZ2V0TmV4dFBhdGhuYW1lSW5mbykodC5wYXRobmFtZSx7bmV4dENvbmZpZzpuLHBhcnNlRGF0YTohMH0pLHM9KDAsYS5yZW1vdmVUcmFpbGluZ1NsYXNoKShsLnBhdGhuYW1lKTtyZXR1cm4gUHJvbWlzZS5hbGwoW3Iucm91dGVyLnBhZ2VMb2FkZXIuZ2V0UGFnZUxpc3QoKSwoMCxpLmdldENsaWVudEJ1aWxkTWFuaWZlc3QpKCldKS50aGVuKGE9PntsZXRbaSx7X19yZXdyaXRlczp1fV09YSxmPSgwLGIuYWRkTG9jYWxlKShsLnBhdGhuYW1lLGwubG9jYWxlKTtpZigoMCxwLmlzRHluYW1pY1JvdXRlKShmKXx8IW8mJmkuaW5jbHVkZXMoKDAsYy5ub3JtYWxpemVMb2NhbGVQYXRoKSgoMCx2LnJlbW92ZUJhc2VQYXRoKShmKSxyLnJvdXRlci5sb2NhbGVzKS5wYXRobmFtZSkpe2xldCByPSgwLHcuZ2V0TmV4dFBhdGhuYW1lSW5mbykoKDAsaC5wYXJzZVJlbGF0aXZlVXJsKShlKS5wYXRobmFtZSx7bmV4dENvbmZpZzpuLHBhcnNlRGF0YTohMH0pO2Y9KDAsRS5hZGRCYXNlUGF0aCkoci5wYXRobmFtZSksdC5wYXRobmFtZT1mfWlmKCFpLmluY2x1ZGVzKHMpKXtsZXQgZT1GKHMsaSk7ZSE9PXMmJihzPWUpfWxldCBkPWkuaW5jbHVkZXMocyk/czpGKCgwLGMubm9ybWFsaXplTG9jYWxlUGF0aCkoKDAsdi5yZW1vdmVCYXNlUGF0aCkodC5wYXRobmFtZSksci5yb3V0ZXIubG9jYWxlcykucGF0aG5hbWUsaSk7aWYoKDAscC5pc0R5bmFtaWNSb3V0ZSkoZCkpe2xldCBlPSgwLG0uZ2V0Um91dGVNYXRjaGVyKSgoMCxfLmdldFJvdXRlUmVnZXgpKGQpKShmKTtPYmplY3QuYXNzaWduKHQucXVlcnksZXx8e30pfXJldHVybnt0eXBlOiJyZXdyaXRlIixwYXJzZWRBczp0LHJlc29sdmVkSHJlZjpkfX0pfWxldCB0PSgwLHkucGFyc2VQYXRoKShlKTtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHt0eXBlOiJyZWRpcmVjdC1leHRlcm5hbCIsZGVzdGluYXRpb246IiIrKDAsUi5mb3JtYXROZXh0UGF0aG5hbWVJbmZvKSh7Li4uKDAsdy5nZXROZXh0UGF0aG5hbWVJbmZvKSh0LnBhdGhuYW1lLHtuZXh0Q29uZmlnOm4scGFyc2VEYXRhOiEwfSksZGVmYXVsdExvY2FsZTpyLnJvdXRlci5kZWZhdWx0TG9jYWxlLGJ1aWxkSWQ6IiJ9KSt0LnF1ZXJ5K3QuaGFzaH0pfWxldCBzPXQuaGVhZGVycy5nZXQoIngtbmV4dGpzLXJlZGlyZWN0Iik7aWYocyl7aWYocy5zdGFydHNXaXRoKCIvIikpe2xldCBlPSgwLHkucGFyc2VQYXRoKShzKSx0PSgwLFIuZm9ybWF0TmV4dFBhdGhuYW1lSW5mbykoey4uLigwLHcuZ2V0TmV4dFBhdGhuYW1lSW5mbykoZS5wYXRobmFtZSx7bmV4dENvbmZpZzpuLHBhcnNlRGF0YTohMH0pLGRlZmF1bHRMb2NhbGU6ci5yb3V0ZXIuZGVmYXVsdExvY2FsZSxidWlsZElkOiIifSk7cmV0dXJuIFByb21pc2UucmVzb2x2ZSh7dHlwZToicmVkaXJlY3QtaW50ZXJuYWwiLG5ld0FzOiIiK3QrZS5xdWVyeStlLmhhc2gsbmV3VXJsOiIiK3QrZS5xdWVyeStlLmhhc2h9KX1yZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHt0eXBlOiJyZWRpcmVjdC1leHRlcm5hbCIsZGVzdGluYXRpb246c30pfXJldHVybiBQcm9taXNlLnJlc29sdmUoe3R5cGU6Im5leHQifSl9KHQuZGF0YUhyZWYsdC5yZXNwb25zZSxlKTtyZXR1cm57ZGF0YUhyZWY6dC5kYXRhSHJlZixqc29uOnQuanNvbixyZXNwb25zZTp0LnJlc3BvbnNlLHRleHQ6dC50ZXh0LGNhY2hlS2V5OnQuY2FjaGVLZXksZWZmZWN0OnJ9fWxldCBCPVN5bWJvbCgiU1NHX0RBVEFfTk9UX0ZPVU5EIik7ZnVuY3Rpb24gSChlKXt0cnl7cmV0dXJuIEpTT04ucGFyc2UoZSl9Y2F0Y2goZSl7cmV0dXJuIG51bGx9fWZ1bmN0aW9uIFcoZSl7bGV0e2RhdGFIcmVmOnQsaW5mbGlnaHRDYWNoZTpyLGlzUHJlZmV0Y2g6bixoYXNNaWRkbGV3YXJlOm8saXNTZXJ2ZXJSZW5kZXI6YSxwYXJzZUpTT046dSxwZXJzaXN0Q2FjaGU6bCxpc0JhY2tncm91bmQ6cyx1bnN0YWJsZV9za2lwQ2xpZW50Q2FjaGU6Y309ZSx7aHJlZjpmfT1uZXcgVVJMKHQsd2luZG93LmxvY2F0aW9uLmhyZWYpLGQ9ZT0+e3ZhciBzO3JldHVybihmdW5jdGlvbiBlKHQscixuKXtyZXR1cm4gZmV0Y2godCx7Y3JlZGVudGlhbHM6InNhbWUtb3JpZ2luIixtZXRob2Q6bi5tZXRob2R8fCJHRVQiLGhlYWRlcnM6T2JqZWN0LmFzc2lnbih7fSxuLmhlYWRlcnMseyJ4LW5leHRqcy1kYXRhIjoiMSJ9KX0pLnRoZW4obz0+IW8ub2smJnI+MSYmby5zdGF0dXM+PTUwMD9lKHQsci0xLG4pOm8pfSkodCxhPzM6MSx7aGVhZGVyczpPYmplY3QuYXNzaWduKHt9LG4/e3B1cnBvc2U6InByZWZldGNoIn06e30sbiYmbz97IngtbWlkZGxld2FyZS1wcmVmZXRjaCI6IjEifTp7fSksbWV0aG9kOm51bGwhPShzPW51bGw9PWU/dm9pZCAwOmUubWV0aG9kKT9zOiJHRVQifSkudGhlbihyPT5yLm9rJiYobnVsbD09ZT92b2lkIDA6ZS5tZXRob2QpPT09IkhFQUQiP3tkYXRhSHJlZjp0LHJlc3BvbnNlOnIsdGV4dDoiIixqc29uOnt9LGNhY2hlS2V5OmZ9OnIudGV4dCgpLnRoZW4oZT0+e2lmKCFyLm9rKXtpZihvJiZbMzAxLDMwMiwzMDcsMzA4XS5pbmNsdWRlcyhyLnN0YXR1cykpcmV0dXJue2RhdGFIcmVmOnQscmVzcG9uc2U6cix0ZXh0OmUsanNvbjp7fSxjYWNoZUtleTpmfTtpZig0MDQ9PT1yLnN0YXR1cyl7dmFyIG47aWYobnVsbD09KG49SChlKSk/dm9pZCAwOm4ubm90Rm91bmQpcmV0dXJue2RhdGFIcmVmOnQsanNvbjp7bm90Rm91bmQ6Qn0scmVzcG9uc2U6cix0ZXh0OmUsY2FjaGVLZXk6Zn19bGV0IHU9RXJyb3IoIkZhaWxlZCB0byBsb2FkIHN0YXRpYyBwcm9wcyIpO3Rocm93IGF8fCgwLGkubWFya0Fzc2V0RXJyb3IpKHUpLHV9cmV0dXJue2RhdGFIcmVmOnQsanNvbjp1P0goZSk6bnVsbCxyZXNwb25zZTpyLHRleHQ6ZSxjYWNoZUtleTpmfX0pKS50aGVuKGU9PihsJiYibm8tY2FjaGUiIT09ZS5yZXNwb25zZS5oZWFkZXJzLmdldCgieC1taWRkbGV3YXJlLWNhY2hlIil8fGRlbGV0ZSByW2ZdLGUpKS5jYXRjaChlPT57dGhyb3cgY3x8ZGVsZXRlIHJbZl0sKCJGYWlsZWQgdG8gZmV0Y2giPT09ZS5tZXNzYWdlfHwiTmV0d29ya0Vycm9yIHdoZW4gYXR0ZW1wdGluZyB0byBmZXRjaCByZXNvdXJjZS4iPT09ZS5tZXNzYWdlfHwiTG9hZCBmYWlsZWQiPT09ZS5tZXNzYWdlKSYmKDAsaS5tYXJrQXNzZXRFcnJvcikoZSksZX0pfTtyZXR1cm4gYyYmbD9kKHt9KS50aGVuKGU9Pigibm8tY2FjaGUiIT09ZS5yZXNwb25zZS5oZWFkZXJzLmdldCgieC1taWRkbGV3YXJlLWNhY2hlIikmJihyW2ZdPVByb21pc2UucmVzb2x2ZShlKSksZSkpOnZvaWQgMCE9PXJbZl0/cltmXTpyW2ZdPWQocz97bWV0aG9kOiJIRUFEIn06e30pfWZ1bmN0aW9uIHEoKXtyZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiwxMCl9ZnVuY3Rpb24gRyhlKXtsZXR7dXJsOnQscm91dGVyOnJ9PWU7aWYodD09PSgwLEUuYWRkQmFzZVBhdGgpKCgwLGIuYWRkTG9jYWxlKShyLmFzUGF0aCxyLmxvY2FsZSkpKXRocm93IEVycm9yKCJJbnZhcmlhbnQ6IGF0dGVtcHRlZCB0byBoYXJkIG5hdmlnYXRlIHRvIHRoZSBzYW1lIFVSTCAiK3QrIiAiK2xvY2F0aW9uLmhyZWYpO3dpbmRvdy5sb2NhdGlvbi5ocmVmPXR9bGV0IHo9ZT0+e2xldHtyb3V0ZTp0LHJvdXRlcjpyfT1lLG49ITEsbz1yLmNsYz0oKT0+e249ITB9O3JldHVybigpPT57aWYobil7bGV0IGU9RXJyb3IoJ0Fib3J0IGZldGNoaW5nIGNvbXBvbmVudCBmb3Igcm91dGU6ICInK3QrJyInKTt0aHJvdyBlLmNhbmNlbGxlZD0hMCxlfW89PT1yLmNsYyYmKHIuY2xjPW51bGwpfX07Y2xhc3MgVntyZWxvYWQoKXt3aW5kb3cubG9jYXRpb24ucmVsb2FkKCl9YmFjaygpe3dpbmRvdy5oaXN0b3J5LmJhY2soKX1mb3J3YXJkKCl7d2luZG93Lmhpc3RvcnkuZm9yd2FyZCgpfXB1c2goZSx0LHIpe3JldHVybiB2b2lkIDA9PT1yJiYocj17fSkse3VybDplLGFzOnR9PWsodGhpcyxlLHQpLHRoaXMuY2hhbmdlKCJwdXNoU3RhdGUiLGUsdCxyKX1yZXBsYWNlKGUsdCxyKXtyZXR1cm4gdm9pZCAwPT09ciYmKHI9e30pLHt1cmw6ZSxhczp0fT1rKHRoaXMsZSx0KSx0aGlzLmNoYW5nZSgicmVwbGFjZVN0YXRlIixlLHQscil9YXN5bmMgX2JmbChlLHQscixuKXt7bGV0IGw9ITEscz0hMTtmb3IobGV0IGMgb2ZbZSx0XSlpZihjKXtsZXQgdD0oMCxhLnJlbW92ZVRyYWlsaW5nU2xhc2gpKG5ldyBVUkwoYywiaHR0cDovL24iKS5wYXRobmFtZSksZj0oMCxFLmFkZEJhc2VQYXRoKSgoMCxiLmFkZExvY2FsZSkodCxyfHx0aGlzLmxvY2FsZSkpO2lmKHQhPT0oMCxhLnJlbW92ZVRyYWlsaW5nU2xhc2gpKG5ldyBVUkwodGhpcy5hc1BhdGgsImh0dHA6Ly9uIikucGF0aG5hbWUpKXt2YXIgbyxpLHU7Zm9yKGxldCBlIG9mKGw9bHx8ISEobnVsbD09KG89dGhpcy5fYmZsX3MpP3ZvaWQgMDpvLmNvbnRhaW5zKHQpKXx8ISEobnVsbD09KGk9dGhpcy5fYmZsX3MpP3ZvaWQgMDppLmNvbnRhaW5zKGYpKSxbdCxmXSkpe2xldCB0PWUuc3BsaXQoIi8iKTtmb3IobGV0IGU9MDshcyYmZTx0Lmxlbmd0aCsxO2UrKyl7bGV0IHI9dC5zbGljZSgwLGUpLmpvaW4oIi8iKTtpZihyJiYobnVsbD09KHU9dGhpcy5fYmZsX2QpP3ZvaWQgMDp1LmNvbnRhaW5zKHIpKSl7cz0hMDticmVha319fWlmKGx8fHMpe2lmKG4pcmV0dXJuITA7cmV0dXJuIEcoe3VybDooMCxFLmFkZEJhc2VQYXRoKSgoMCxiLmFkZExvY2FsZSkoZSxyfHx0aGlzLmxvY2FsZSx0aGlzLmRlZmF1bHRMb2NhbGUpKSxyb3V0ZXI6dGhpc30pLG5ldyBQcm9taXNlKCgpPT57fSl9fX19cmV0dXJuITF9YXN5bmMgY2hhbmdlKGUsdCxyLG4sbyl7dmFyIHMsYyxmLE8saix3LFIseCxBO2xldCBELFU7aWYoISgwLE0uaXNMb2NhbFVSTCkodCkpcmV0dXJuIEcoe3VybDp0LHJvdXRlcjp0aGlzfSksITE7bGV0IEg9MT09PW4uX2g7SHx8bi5zaGFsbG93fHxhd2FpdCB0aGlzLl9iZmwocix2b2lkIDAsbi5sb2NhbGUpO2xldCBXPUh8fG4uX3Nob3VsZFJlc29sdmVIcmVmfHwoMCx5LnBhcnNlUGF0aCkodCkucGF0aG5hbWU9PT0oMCx5LnBhcnNlUGF0aCkocikucGF0aG5hbWUscT17Li4udGhpcy5zdGF0ZX0sej0hMCE9PXRoaXMuaXNSZWFkeTt0aGlzLmlzUmVhZHk9ITA7bGV0IFg9dGhpcy5pc1NzcjtpZihIfHwodGhpcy5pc1Nzcj0hMSksSCYmdGhpcy5jbGMpcmV0dXJuITE7bGV0IFk9cS5sb2NhbGU7ZC5TVCYmcGVyZm9ybWFuY2UubWFyaygicm91dGVDaGFuZ2UiKTtsZXR7c2hhbGxvdzpLPSExLHNjcm9sbDokPSEwfT1uLEo9e3NoYWxsb3c6S307dGhpcy5faW5GbGlnaHRSb3V0ZSYmdGhpcy5jbGMmJihYfHxWLmV2ZW50cy5lbWl0KCJyb3V0ZUNoYW5nZUVycm9yIixMKCksdGhpcy5faW5GbGlnaHRSb3V0ZSxKKSx0aGlzLmNsYygpLHRoaXMuY2xjPW51bGwpLHI9KDAsRS5hZGRCYXNlUGF0aCkoKDAsYi5hZGRMb2NhbGUpKCgwLFMuaGFzQmFzZVBhdGgpKHIpPygwLHYucmVtb3ZlQmFzZVBhdGgpKHIpOnIsbi5sb2NhbGUsdGhpcy5kZWZhdWx0TG9jYWxlKSk7bGV0IFE9KDAsUC5yZW1vdmVMb2NhbGUpKCgwLFMuaGFzQmFzZVBhdGgpKHIpPygwLHYucmVtb3ZlQmFzZVBhdGgpKHIpOnIscS5sb2NhbGUpO3RoaXMuX2luRmxpZ2h0Um91dGU9cjtsZXQgWj1ZIT09cS5sb2NhbGU7aWYoIUgmJnRoaXMub25seUFIYXNoQ2hhbmdlKFEpJiYhWil7cS5hc1BhdGg9USxWLmV2ZW50cy5lbWl0KCJoYXNoQ2hhbmdlU3RhcnQiLHIsSiksdGhpcy5jaGFuZ2VTdGF0ZShlLHQscix7Li4ubixzY3JvbGw6ITF9KSwkJiZ0aGlzLnNjcm9sbFRvSGFzaChRKTt0cnl7YXdhaXQgdGhpcy5zZXQocSx0aGlzLmNvbXBvbmVudHNbcS5yb3V0ZV0sbnVsbCl9Y2F0Y2goZSl7dGhyb3coMCxsLmRlZmF1bHQpKGUpJiZlLmNhbmNlbGxlZCYmVi5ldmVudHMuZW1pdCgicm91dGVDaGFuZ2VFcnJvciIsZSxRLEopLGV9cmV0dXJuIFYuZXZlbnRzLmVtaXQoImhhc2hDaGFuZ2VDb21wbGV0ZSIscixKKSwhMH1sZXQgZWU9KDAsaC5wYXJzZVJlbGF0aXZlVXJsKSh0KSx7cGF0aG5hbWU6ZXQscXVlcnk6ZXJ9PWVlO3RyeXtbRCx7X19yZXdyaXRlczpVfV09YXdhaXQgUHJvbWlzZS5hbGwoW3RoaXMucGFnZUxvYWRlci5nZXRQYWdlTGlzdCgpLCgwLGkuZ2V0Q2xpZW50QnVpbGRNYW5pZmVzdCkoKSx0aGlzLnBhZ2VMb2FkZXIuZ2V0TWlkZGxld2FyZSgpXSl9Y2F0Y2goZSl7cmV0dXJuIEcoe3VybDpyLHJvdXRlcjp0aGlzfSksITF9dGhpcy51cmxJc05ldyhRKXx8Wnx8KGU9InJlcGxhY2VTdGF0ZSIpO2xldCBlbj1yO2V0PWV0PygwLGEucmVtb3ZlVHJhaWxpbmdTbGFzaCkoKDAsdi5yZW1vdmVCYXNlUGF0aCkoZXQpKTpldDtsZXQgZW89KDAsYS5yZW1vdmVUcmFpbGluZ1NsYXNoKShldCksZWE9ci5zdGFydHNXaXRoKCIvIikmJigwLGgucGFyc2VSZWxhdGl2ZVVybCkocikucGF0aG5hbWU7aWYobnVsbD09KHM9dGhpcy5jb21wb25lbnRzW2V0XSk/dm9pZCAwOnMuX19hcHBSb3V0ZXIpcmV0dXJuIEcoe3VybDpyLHJvdXRlcjp0aGlzfSksbmV3IFByb21pc2UoKCk9Pnt9KTtsZXQgZWk9ISEoZWEmJmVvIT09ZWEmJighKDAscC5pc0R5bmFtaWNSb3V0ZSkoZW8pfHwhKDAsbS5nZXRSb3V0ZU1hdGNoZXIpKCgwLF8uZ2V0Um91dGVSZWdleCkoZW8pKShlYSkpKSxldT0hbi5zaGFsbG93JiZhd2FpdCBOKHthc1BhdGg6cixsb2NhbGU6cS5sb2NhbGUscm91dGVyOnRoaXN9KTtpZihIJiZldSYmKFc9ITEpLFcmJiIvX2Vycm9yIiE9PWV0JiYobi5fc2hvdWxkUmVzb2x2ZUhyZWY9ITAsZWUucGF0aG5hbWU9RihldCxEKSxlZS5wYXRobmFtZT09PWV0fHwoZXQ9ZWUucGF0aG5hbWUsZWUucGF0aG5hbWU9KDAsRS5hZGRCYXNlUGF0aCkoZXQpLGV1fHwodD0oMCxnLmZvcm1hdFdpdGhWYWxpZGF0aW9uKShlZSkpKSksISgwLE0uaXNMb2NhbFVSTCkocikpcmV0dXJuIEcoe3VybDpyLHJvdXRlcjp0aGlzfSksITE7ZW49KDAsUC5yZW1vdmVMb2NhbGUpKCgwLHYucmVtb3ZlQmFzZVBhdGgpKGVuKSxxLmxvY2FsZSksZW89KDAsYS5yZW1vdmVUcmFpbGluZ1NsYXNoKShldCk7bGV0IGVsPSExO2lmKCgwLHAuaXNEeW5hbWljUm91dGUpKGVvKSl7bGV0IGU9KDAsaC5wYXJzZVJlbGF0aXZlVXJsKShlbiksbj1lLnBhdGhuYW1lLG89KDAsXy5nZXRSb3V0ZVJlZ2V4KShlbyk7ZWw9KDAsbS5nZXRSb3V0ZU1hdGNoZXIpKG8pKG4pO2xldCBhPWVvPT09bixpPWE/KDAsQy5pbnRlcnBvbGF0ZUFzKShlbyxuLGVyKTp7fTtpZihlbCYmKCFhfHxpLnJlc3VsdCkpYT9yPSgwLGcuZm9ybWF0V2l0aFZhbGlkYXRpb24pKE9iamVjdC5hc3NpZ24oe30sZSx7cGF0aG5hbWU6aS5yZXN1bHQscXVlcnk6KDAsSS5vbWl0KShlcixpLnBhcmFtcyl9KSk6T2JqZWN0LmFzc2lnbihlcixlbCk7ZWxzZXtsZXQgZT1PYmplY3Qua2V5cyhvLmdyb3VwcykuZmlsdGVyKGU9PiFlcltlXSYmIW8uZ3JvdXBzW2VdLm9wdGlvbmFsKTtpZihlLmxlbmd0aD4wJiYhZXUpdGhyb3cgRXJyb3IoKGE/IlRoZSBwcm92aWRlZCBgaHJlZmAgKCIrdCsiKSB2YWx1ZSBpcyBtaXNzaW5nIHF1ZXJ5IHZhbHVlcyAoIitlLmpvaW4oIiwgIikrIikgdG8gYmUgaW50ZXJwb2xhdGVkIHByb3Blcmx5LiAiOiJUaGUgcHJvdmlkZWQgYGFzYCB2YWx1ZSAoIituKyIpIGlzIGluY29tcGF0aWJsZSB3aXRoIHRoZSBgaHJlZmAgdmFsdWUgKCIrZW8rIikuICIpKyJSZWFkIG1vcmU6IGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL21lc3NhZ2VzLyIrKGE/ImhyZWYtaW50ZXJwb2xhdGlvbi1mYWlsZWQiOiJpbmNvbXBhdGlibGUtaHJlZi1hcyIpKX19SHx8Vi5ldmVudHMuZW1pdCgicm91dGVDaGFuZ2VTdGFydCIscixKKTtsZXQgZXM9Ii80MDQiPT09dGhpcy5wYXRobmFtZXx8Ii9fZXJyb3IiPT09dGhpcy5wYXRobmFtZTt0cnl7bGV0IGE9YXdhaXQgdGhpcy5nZXRSb3V0ZUluZm8oe3JvdXRlOmVvLHBhdGhuYW1lOmV0LHF1ZXJ5OmVyLGFzOnIscmVzb2x2ZWRBczplbixyb3V0ZVByb3BzOkosbG9jYWxlOnEubG9jYWxlLGlzUHJldmlldzpxLmlzUHJldmlldyxoYXNNaWRkbGV3YXJlOmV1LHVuc3RhYmxlX3NraXBDbGllbnRDYWNoZTpuLnVuc3RhYmxlX3NraXBDbGllbnRDYWNoZSxpc1F1ZXJ5VXBkYXRpbmc6SCYmIXRoaXMuaXNGYWxsYmFjayxpc01pZGRsZXdhcmVSZXdyaXRlOmVpfSk7aWYoSHx8bi5zaGFsbG93fHxhd2FpdCB0aGlzLl9iZmwociwicmVzb2x2ZWRBcyJpbiBhP2EucmVzb2x2ZWRBczp2b2lkIDAscS5sb2NhbGUpLCJyb3V0ZSJpbiBhJiZldSl7ZW89ZXQ9YS5yb3V0ZXx8ZW8sSi5zaGFsbG93fHwoZXI9T2JqZWN0LmFzc2lnbih7fSxhLnF1ZXJ5fHx7fSxlcikpO2xldCBlPSgwLFMuaGFzQmFzZVBhdGgpKGVlLnBhdGhuYW1lKT8oMCx2LnJlbW92ZUJhc2VQYXRoKShlZS5wYXRobmFtZSk6ZWUucGF0aG5hbWU7aWYoZWwmJmV0IT09ZSYmT2JqZWN0LmtleXMoZWwpLmZvckVhY2goZT0+e2VsJiZlcltlXT09PWVsW2VdJiZkZWxldGUgZXJbZV19KSwoMCxwLmlzRHluYW1pY1JvdXRlKShldCkpe2xldCBlPSFKLnNoYWxsb3cmJmEucmVzb2x2ZWRBcz9hLnJlc29sdmVkQXM6KDAsRS5hZGRCYXNlUGF0aCkoKDAsYi5hZGRMb2NhbGUpKG5ldyBVUkwocixsb2NhdGlvbi5ocmVmKS5wYXRobmFtZSxxLmxvY2FsZSksITApOygwLFMuaGFzQmFzZVBhdGgpKGUpJiYoZT0oMCx2LnJlbW92ZUJhc2VQYXRoKShlKSk7bGV0IHQ9KDAsXy5nZXRSb3V0ZVJlZ2V4KShldCksbj0oMCxtLmdldFJvdXRlTWF0Y2hlcikodCkobmV3IFVSTChlLGxvY2F0aW9uLmhyZWYpLnBhdGhuYW1lKTtuJiZPYmplY3QuYXNzaWduKGVyLG4pfX1pZigidHlwZSJpbiBhKXtpZigicmVkaXJlY3QtaW50ZXJuYWwiPT09YS50eXBlKXJldHVybiB0aGlzLmNoYW5nZShlLGEubmV3VXJsLGEubmV3QXMsbik7cmV0dXJuIEcoe3VybDphLmRlc3RpbmF0aW9uLHJvdXRlcjp0aGlzfSksbmV3IFByb21pc2UoKCk9Pnt9KX1sZXQgaT1hLkNvbXBvbmVudDtpZihpJiZpLnVuc3RhYmxlX3NjcmlwdExvYWRlciYmW10uY29uY2F0KGkudW5zdGFibGVfc2NyaXB0TG9hZGVyKCkpLmZvckVhY2goZT0+eygwLHUuaGFuZGxlQ2xpZW50U2NyaXB0TG9hZCkoZS5wcm9wcyl9KSwoYS5fX05fU1NHfHxhLl9fTl9TU1ApJiZhLnByb3BzKXtpZihhLnByb3BzLnBhZ2VQcm9wcyYmYS5wcm9wcy5wYWdlUHJvcHMuX19OX1JFRElSRUNUKXtuLmxvY2FsZT0hMTtsZXQgdD1hLnByb3BzLnBhZ2VQcm9wcy5fX05fUkVESVJFQ1Q7aWYodC5zdGFydHNXaXRoKCIvIikmJiExIT09YS5wcm9wcy5wYWdlUHJvcHMuX19OX1JFRElSRUNUX0JBU0VfUEFUSCl7bGV0IHI9KDAsaC5wYXJzZVJlbGF0aXZlVXJsKSh0KTtyLnBhdGhuYW1lPUYoci5wYXRobmFtZSxEKTtsZXR7dXJsOm8sYXM6YX09ayh0aGlzLHQsdCk7cmV0dXJuIHRoaXMuY2hhbmdlKGUsbyxhLG4pfXJldHVybiBHKHt1cmw6dCxyb3V0ZXI6dGhpc30pLG5ldyBQcm9taXNlKCgpPT57fSl9aWYocS5pc1ByZXZpZXc9ISFhLnByb3BzLl9fTl9QUkVWSUVXLGEucHJvcHMubm90Rm91bmQ9PT1CKXtsZXQgZTt0cnl7YXdhaXQgdGhpcy5mZXRjaENvbXBvbmVudCgiLzQwNCIpLGU9Ii80MDQifWNhdGNoKHQpe2U9Ii9fZXJyb3IifWlmKGE9YXdhaXQgdGhpcy5nZXRSb3V0ZUluZm8oe3JvdXRlOmUscGF0aG5hbWU6ZSxxdWVyeTplcixhczpyLHJlc29sdmVkQXM6ZW4scm91dGVQcm9wczp7c2hhbGxvdzohMX0sbG9jYWxlOnEubG9jYWxlLGlzUHJldmlldzpxLmlzUHJldmlldyxpc05vdEZvdW5kOiEwfSksInR5cGUiaW4gYSl0aHJvdyBFcnJvcigiVW5leHBlY3RlZCBtaWRkbGV3YXJlIGVmZmVjdCBvbiAvNDA0Iil9fUgmJiIvX2Vycm9yIj09PXRoaXMucGF0aG5hbWUmJihudWxsPT0oZj1zZWxmLl9fTkVYVF9EQVRBX18ucHJvcHMpP3ZvaWQgMDpudWxsPT0oYz1mLnBhZ2VQcm9wcyk/dm9pZCAwOmMuc3RhdHVzQ29kZSk9PT01MDAmJihudWxsPT0oTz1hLnByb3BzKT92b2lkIDA6Ty5wYWdlUHJvcHMpJiYoYS5wcm9wcy5wYWdlUHJvcHMuc3RhdHVzQ29kZT01MDApO2xldCBzPW4uc2hhbGxvdyYmcS5yb3V0ZT09PShudWxsIT0oaj1hLnJvdXRlKT9qOmVvKSxkPW51bGwhPSh3PW4uc2Nyb2xsKT93OiFIJiYhcyxnPW51bGwhPW8/bzpkP3t4OjAseTowfTpudWxsLHk9ey4uLnEscm91dGU6ZW8scGF0aG5hbWU6ZXQscXVlcnk6ZXIsYXNQYXRoOlEsaXNGYWxsYmFjazohMX07aWYoSCYmZXMpe2lmKGE9YXdhaXQgdGhpcy5nZXRSb3V0ZUluZm8oe3JvdXRlOnRoaXMucGF0aG5hbWUscGF0aG5hbWU6dGhpcy5wYXRobmFtZSxxdWVyeTplcixhczpyLHJlc29sdmVkQXM6ZW4scm91dGVQcm9wczp7c2hhbGxvdzohMX0sbG9jYWxlOnEubG9jYWxlLGlzUHJldmlldzpxLmlzUHJldmlldyxpc1F1ZXJ5VXBkYXRpbmc6SCYmIXRoaXMuaXNGYWxsYmFja30pLCJ0eXBlImluIGEpdGhyb3cgRXJyb3IoIlVuZXhwZWN0ZWQgbWlkZGxld2FyZSBlZmZlY3Qgb24gIit0aGlzLnBhdGhuYW1lKTsiL19lcnJvciI9PT10aGlzLnBhdGhuYW1lJiYobnVsbD09KHg9c2VsZi5fX05FWFRfREFUQV9fLnByb3BzKT92b2lkIDA6bnVsbD09KFI9eC5wYWdlUHJvcHMpP3ZvaWQgMDpSLnN0YXR1c0NvZGUpPT09NTAwJiYobnVsbD09KEE9YS5wcm9wcyk/dm9pZCAwOkEucGFnZVByb3BzKSYmKGEucHJvcHMucGFnZVByb3BzLnN0YXR1c0NvZGU9NTAwKTt0cnl7YXdhaXQgdGhpcy5zZXQoeSxhLGcpfWNhdGNoKGUpe3Rocm93KDAsbC5kZWZhdWx0KShlKSYmZS5jYW5jZWxsZWQmJlYuZXZlbnRzLmVtaXQoInJvdXRlQ2hhbmdlRXJyb3IiLGUsUSxKKSxlfXJldHVybiEwfWlmKFYuZXZlbnRzLmVtaXQoImJlZm9yZUhpc3RvcnlDaGFuZ2UiLHIsSiksdGhpcy5jaGFuZ2VTdGF0ZShlLHQscixuKSwhKEgmJiFnJiYheiYmIVomJigwLFQuY29tcGFyZVJvdXRlclN0YXRlcykoeSx0aGlzLnN0YXRlKSkpe3RyeXthd2FpdCB0aGlzLnNldCh5LGEsZyl9Y2F0Y2goZSl7aWYoZS5jYW5jZWxsZWQpYS5lcnJvcj1hLmVycm9yfHxlO2Vsc2UgdGhyb3cgZX1pZihhLmVycm9yKXRocm93IEh8fFYuZXZlbnRzLmVtaXQoInJvdXRlQ2hhbmdlRXJyb3IiLGEuZXJyb3IsUSxKKSxhLmVycm9yO0h8fFYuZXZlbnRzLmVtaXQoInJvdXRlQ2hhbmdlQ29tcGxldGUiLHIsSiksZCYmLyMuKyQvLnRlc3QocikmJnRoaXMuc2Nyb2xsVG9IYXNoKHIpfXJldHVybiEwfWNhdGNoKGUpe2lmKCgwLGwuZGVmYXVsdCkoZSkmJmUuY2FuY2VsbGVkKXJldHVybiExO3Rocm93IGV9fWNoYW5nZVN0YXRlKGUsdCxyLG4pe3ZvaWQgMD09PW4mJihuPXt9KSwoInB1c2hTdGF0ZSIhPT1lfHwoMCxkLmdldFVSTCkoKSE9PXIpJiYodGhpcy5fc2hhbGxvdz1uLnNoYWxsb3csd2luZG93Lmhpc3RvcnlbZV0oe3VybDp0LGFzOnIsb3B0aW9uczpuLF9fTjohMCxrZXk6dGhpcy5fa2V5PSJwdXNoU3RhdGUiIT09ZT90aGlzLl9rZXk6cSgpfSwiIixyKSl9YXN5bmMgaGFuZGxlUm91dGVJbmZvRXJyb3IoZSx0LHIsbixvLGEpe2lmKGNvbnNvbGUuZXJyb3IoZSksZS5jYW5jZWxsZWQpdGhyb3cgZTtpZigoMCxpLmlzQXNzZXRFcnJvcikoZSl8fGEpdGhyb3cgVi5ldmVudHMuZW1pdCgicm91dGVDaGFuZ2VFcnJvciIsZSxuLG8pLEcoe3VybDpuLHJvdXRlcjp0aGlzfSksTCgpO3RyeXtsZXQgbjtsZXR7cGFnZTpvLHN0eWxlU2hlZXRzOmF9PWF3YWl0IHRoaXMuZmV0Y2hDb21wb25lbnQoIi9fZXJyb3IiKSxpPXtwcm9wczpuLENvbXBvbmVudDpvLHN0eWxlU2hlZXRzOmEsZXJyOmUsZXJyb3I6ZX07aWYoIWkucHJvcHMpdHJ5e2kucHJvcHM9YXdhaXQgdGhpcy5nZXRJbml0aWFsUHJvcHMobyx7ZXJyOmUscGF0aG5hbWU6dCxxdWVyeTpyfSl9Y2F0Y2goZSl7Y29uc29sZS5lcnJvcigiRXJyb3IgaW4gZXJyb3IgcGFnZSBgZ2V0SW5pdGlhbFByb3BzYDogIixlKSxpLnByb3BzPXt9fXJldHVybiBpfWNhdGNoKGUpe3JldHVybiB0aGlzLmhhbmRsZVJvdXRlSW5mb0Vycm9yKCgwLGwuZGVmYXVsdCkoZSk/ZTpFcnJvcihlKyIiKSx0LHIsbixvLCEwKX19YXN5bmMgZ2V0Um91dGVJbmZvKGUpe2xldHtyb3V0ZTp0LHBhdGhuYW1lOnIscXVlcnk6bixhczpvLHJlc29sdmVkQXM6aSxyb3V0ZVByb3BzOnUsbG9jYWxlOnMsaGFzTWlkZGxld2FyZTpmLGlzUHJldmlldzpkLHVuc3RhYmxlX3NraXBDbGllbnRDYWNoZTpwLGlzUXVlcnlVcGRhdGluZzpoLGlzTWlkZGxld2FyZVJld3JpdGU6bSxpc05vdEZvdW5kOl99PWUseT10O3RyeXt2YXIgYixQLEUsUztsZXQgZT10aGlzLmNvbXBvbmVudHNbeV07aWYodS5zaGFsbG93JiZlJiZ0aGlzLnJvdXRlPT09eSlyZXR1cm4gZTtsZXQgdD16KHtyb3V0ZTp5LHJvdXRlcjp0aGlzfSk7ZiYmKGU9dm9pZCAwKTtsZXQgbD0hZXx8ImluaXRpYWwiaW4gZT92b2lkIDA6ZSxPPXtkYXRhSHJlZjp0aGlzLnBhZ2VMb2FkZXIuZ2V0RGF0YUhyZWYoe2hyZWY6KDAsZy5mb3JtYXRXaXRoVmFsaWRhdGlvbikoe3BhdGhuYW1lOnIscXVlcnk6bn0pLHNraXBJbnRlcnBvbGF0aW9uOiEwLGFzUGF0aDpfPyIvNDA0IjppLGxvY2FsZTpzfSksaGFzTWlkZGxld2FyZTohMCxpc1NlcnZlclJlbmRlcjp0aGlzLmlzU3NyLHBhcnNlSlNPTjohMCxpbmZsaWdodENhY2hlOmg/dGhpcy5zYmM6dGhpcy5zZGMscGVyc2lzdENhY2hlOiFkLGlzUHJlZmV0Y2g6ITEsdW5zdGFibGVfc2tpcENsaWVudENhY2hlOnAsaXNCYWNrZ3JvdW5kOmh9LHc9aCYmIW0/bnVsbDphd2FpdCBVKHtmZXRjaERhdGE6KCk9PlcoTyksYXNQYXRoOl8/Ii80MDQiOmksbG9jYWxlOnMscm91dGVyOnRoaXN9KS5jYXRjaChlPT57aWYoaClyZXR1cm4gbnVsbDt0aHJvdyBlfSk7aWYodyYmKCIvX2Vycm9yIj09PXJ8fCIvNDA0Ij09PXIpJiYody5lZmZlY3Q9dm9pZCAwKSxoJiYodz93Lmpzb249c2VsZi5fX05FWFRfREFUQV9fLnByb3BzOnc9e2pzb246c2VsZi5fX05FWFRfREFUQV9fLnByb3BzfSksdCgpLChudWxsPT13P3ZvaWQgMDpudWxsPT0oYj13LmVmZmVjdCk/dm9pZCAwOmIudHlwZSk9PT0icmVkaXJlY3QtaW50ZXJuYWwifHwobnVsbD09dz92b2lkIDA6bnVsbD09KFA9dy5lZmZlY3QpP3ZvaWQgMDpQLnR5cGUpPT09InJlZGlyZWN0LWV4dGVybmFsIilyZXR1cm4gdy5lZmZlY3Q7aWYoKG51bGw9PXc/dm9pZCAwOm51bGw9PShFPXcuZWZmZWN0KT92b2lkIDA6RS50eXBlKT09PSJyZXdyaXRlIil7bGV0IHQ9KDAsYS5yZW1vdmVUcmFpbGluZ1NsYXNoKSh3LmVmZmVjdC5yZXNvbHZlZEhyZWYpLG89YXdhaXQgdGhpcy5wYWdlTG9hZGVyLmdldFBhZ2VMaXN0KCk7aWYoKCFofHxvLmluY2x1ZGVzKHQpKSYmKHk9dCxyPXcuZWZmZWN0LnJlc29sdmVkSHJlZixuPXsuLi5uLC4uLncuZWZmZWN0LnBhcnNlZEFzLnF1ZXJ5fSxpPSgwLHYucmVtb3ZlQmFzZVBhdGgpKCgwLGMubm9ybWFsaXplTG9jYWxlUGF0aCkody5lZmZlY3QucGFyc2VkQXMucGF0aG5hbWUsdGhpcy5sb2NhbGVzKS5wYXRobmFtZSksZT10aGlzLmNvbXBvbmVudHNbeV0sdS5zaGFsbG93JiZlJiZ0aGlzLnJvdXRlPT09eSYmIWYpKXJldHVybnsuLi5lLHJvdXRlOnl9fWlmKCgwLGouaXNBUElSb3V0ZSkoeSkpcmV0dXJuIEcoe3VybDpvLHJvdXRlcjp0aGlzfSksbmV3IFByb21pc2UoKCk9Pnt9KTtsZXQgUj1sfHxhd2FpdCB0aGlzLmZldGNoQ29tcG9uZW50KHkpLnRoZW4oZT0+KHtDb21wb25lbnQ6ZS5wYWdlLHN0eWxlU2hlZXRzOmUuc3R5bGVTaGVldHMsX19OX1NTRzplLm1vZC5fX05fU1NHLF9fTl9TU1A6ZS5tb2QuX19OX1NTUH0pKSxUPW51bGw9PXc/dm9pZCAwOm51bGw9PShTPXcucmVzcG9uc2UpP3ZvaWQgMDpTLmhlYWRlcnMuZ2V0KCJ4LW1pZGRsZXdhcmUtc2tpcCIpLE09Ui5fX05fU1NHfHxSLl9fTl9TU1A7VCYmKG51bGw9PXc/dm9pZCAwOncuZGF0YUhyZWYpJiZkZWxldGUgdGhpcy5zZGNbdy5kYXRhSHJlZl07bGV0e3Byb3BzOngsY2FjaGVLZXk6SX09YXdhaXQgdGhpcy5fZ2V0RGF0YShhc3luYygpPT57aWYoTSl7aWYoKG51bGw9PXc/dm9pZCAwOncuanNvbikmJiFUKXJldHVybntjYWNoZUtleTp3LmNhY2hlS2V5LHByb3BzOncuanNvbn07bGV0IGU9KG51bGw9PXc/dm9pZCAwOncuZGF0YUhyZWYpP3cuZGF0YUhyZWY6dGhpcy5wYWdlTG9hZGVyLmdldERhdGFIcmVmKHtocmVmOigwLGcuZm9ybWF0V2l0aFZhbGlkYXRpb24pKHtwYXRobmFtZTpyLHF1ZXJ5Om59KSxhc1BhdGg6aSxsb2NhbGU6c30pLHQ9YXdhaXQgVyh7ZGF0YUhyZWY6ZSxpc1NlcnZlclJlbmRlcjp0aGlzLmlzU3NyLHBhcnNlSlNPTjohMCxpbmZsaWdodENhY2hlOlQ/e306dGhpcy5zZGMscGVyc2lzdENhY2hlOiFkLGlzUHJlZmV0Y2g6ITEsdW5zdGFibGVfc2tpcENsaWVudENhY2hlOnB9KTtyZXR1cm57Y2FjaGVLZXk6dC5jYWNoZUtleSxwcm9wczp0Lmpzb258fHt9fX1yZXR1cm57aGVhZGVyczp7fSxwcm9wczphd2FpdCB0aGlzLmdldEluaXRpYWxQcm9wcyhSLkNvbXBvbmVudCx7cGF0aG5hbWU6cixxdWVyeTpuLGFzUGF0aDpvLGxvY2FsZTpzLGxvY2FsZXM6dGhpcy5sb2NhbGVzLGRlZmF1bHRMb2NhbGU6dGhpcy5kZWZhdWx0TG9jYWxlfSl9fSk7cmV0dXJuIFIuX19OX1NTUCYmTy5kYXRhSHJlZiYmSSYmZGVsZXRlIHRoaXMuc2RjW0ldLHRoaXMuaXNQcmV2aWV3fHwhUi5fX05fU1NHfHxofHxXKE9iamVjdC5hc3NpZ24oe30sTyx7aXNCYWNrZ3JvdW5kOiEwLHBlcnNpc3RDYWNoZTohMSxpbmZsaWdodENhY2hlOnRoaXMuc2JjfSkpLmNhdGNoKCgpPT57fSkseC5wYWdlUHJvcHM9T2JqZWN0LmFzc2lnbih7fSx4LnBhZ2VQcm9wcyksUi5wcm9wcz14LFIucm91dGU9eSxSLnF1ZXJ5PW4sUi5yZXNvbHZlZEFzPWksdGhpcy5jb21wb25lbnRzW3ldPVIsUn1jYXRjaChlKXtyZXR1cm4gdGhpcy5oYW5kbGVSb3V0ZUluZm9FcnJvcigoMCxsLmdldFByb3BlckVycm9yKShlKSxyLG4sbyx1KX19c2V0KGUsdCxyKXtyZXR1cm4gdGhpcy5zdGF0ZT1lLHRoaXMuc3ViKHQsdGhpcy5jb21wb25lbnRzWyIvX2FwcCJdLkNvbXBvbmVudCxyKX1iZWZvcmVQb3BTdGF0ZShlKXt0aGlzLl9icHM9ZX1vbmx5QUhhc2hDaGFuZ2UoZSl7aWYoIXRoaXMuYXNQYXRoKXJldHVybiExO2xldFt0LHJdPXRoaXMuYXNQYXRoLnNwbGl0KCIjIiwyKSxbbixvXT1lLnNwbGl0KCIjIiwyKTtyZXR1cm4hIW8mJnQ9PT1uJiZyPT09b3x8dD09PW4mJnIhPT1vfXNjcm9sbFRvSGFzaChlKXtsZXRbLHQ9IiJdPWUuc3BsaXQoIiMiLDIpOygwLEEuaGFuZGxlU21vb3RoU2Nyb2xsKSgoKT0+e2lmKCIiPT09dHx8InRvcCI9PT10KXt3aW5kb3cuc2Nyb2xsVG8oMCwwKTtyZXR1cm59bGV0IGU9ZGVjb2RlVVJJQ29tcG9uZW50KHQpLHI9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZSk7aWYocil7ci5zY3JvbGxJbnRvVmlldygpO3JldHVybn1sZXQgbj1kb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZShlKVswXTtuJiZuLnNjcm9sbEludG9WaWV3KCl9LHtvbmx5SGFzaENoYW5nZTp0aGlzLm9ubHlBSGFzaENoYW5nZShlKX0pfXVybElzTmV3KGUpe3JldHVybiB0aGlzLmFzUGF0aCE9PWV9YXN5bmMgcHJlZmV0Y2goZSx0LHIpe2lmKHZvaWQgMD09PXQmJih0PWUpLHZvaWQgMD09PXImJihyPXt9KSwoMCx4LmlzQm90KSh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCkpcmV0dXJuO2xldCBuPSgwLGgucGFyc2VSZWxhdGl2ZVVybCkoZSksbz1uLnBhdGhuYW1lLHtwYXRobmFtZTppLHF1ZXJ5OnV9PW4sbD1pLHM9YXdhaXQgdGhpcy5wYWdlTG9hZGVyLmdldFBhZ2VMaXN0KCksYz10LGY9dm9pZCAwIT09ci5sb2NhbGU/ci5sb2NhbGV8fHZvaWQgMDp0aGlzLmxvY2FsZSxkPWF3YWl0IE4oe2FzUGF0aDp0LGxvY2FsZTpmLHJvdXRlcjp0aGlzfSk7bi5wYXRobmFtZT1GKG4ucGF0aG5hbWUscyksKDAscC5pc0R5bmFtaWNSb3V0ZSkobi5wYXRobmFtZSkmJihpPW4ucGF0aG5hbWUsbi5wYXRobmFtZT1pLE9iamVjdC5hc3NpZ24odSwoMCxtLmdldFJvdXRlTWF0Y2hlcikoKDAsXy5nZXRSb3V0ZVJlZ2V4KShuLnBhdGhuYW1lKSkoKDAseS5wYXJzZVBhdGgpKHQpLnBhdGhuYW1lKXx8e30pLGR8fChlPSgwLGcuZm9ybWF0V2l0aFZhbGlkYXRpb24pKG4pKSk7bGV0IGI9YXdhaXQgVSh7ZmV0Y2hEYXRhOigpPT5XKHtkYXRhSHJlZjp0aGlzLnBhZ2VMb2FkZXIuZ2V0RGF0YUhyZWYoe2hyZWY6KDAsZy5mb3JtYXRXaXRoVmFsaWRhdGlvbikoe3BhdGhuYW1lOmwscXVlcnk6dX0pLHNraXBJbnRlcnBvbGF0aW9uOiEwLGFzUGF0aDpjLGxvY2FsZTpmfSksaGFzTWlkZGxld2FyZTohMCxpc1NlcnZlclJlbmRlcjohMSxwYXJzZUpTT046ITAsaW5mbGlnaHRDYWNoZTp0aGlzLnNkYyxwZXJzaXN0Q2FjaGU6IXRoaXMuaXNQcmV2aWV3LGlzUHJlZmV0Y2g6ITB9KSxhc1BhdGg6dCxsb2NhbGU6Zixyb3V0ZXI6dGhpc30pO2lmKChudWxsPT1iP3ZvaWQgMDpiLmVmZmVjdC50eXBlKT09PSJyZXdyaXRlIiYmKG4ucGF0aG5hbWU9Yi5lZmZlY3QucmVzb2x2ZWRIcmVmLGk9Yi5lZmZlY3QucmVzb2x2ZWRIcmVmLHU9ey4uLnUsLi4uYi5lZmZlY3QucGFyc2VkQXMucXVlcnl9LGM9Yi5lZmZlY3QucGFyc2VkQXMucGF0aG5hbWUsZT0oMCxnLmZvcm1hdFdpdGhWYWxpZGF0aW9uKShuKSksKG51bGw9PWI/dm9pZCAwOmIuZWZmZWN0LnR5cGUpPT09InJlZGlyZWN0LWV4dGVybmFsIilyZXR1cm47bGV0IFA9KDAsYS5yZW1vdmVUcmFpbGluZ1NsYXNoKShpKTthd2FpdCB0aGlzLl9iZmwodCxjLHIubG9jYWxlLCEwKSYmKHRoaXMuY29tcG9uZW50c1tvXT17X19hcHBSb3V0ZXI6ITB9KSxhd2FpdCBQcm9taXNlLmFsbChbdGhpcy5wYWdlTG9hZGVyLl9pc1NzZyhQKS50aGVuKHQ9PiEhdCYmVyh7ZGF0YUhyZWY6KG51bGw9PWI/dm9pZCAwOmIuanNvbik/bnVsbD09Yj92b2lkIDA6Yi5kYXRhSHJlZjp0aGlzLnBhZ2VMb2FkZXIuZ2V0RGF0YUhyZWYoe2hyZWY6ZSxhc1BhdGg6Yyxsb2NhbGU6Zn0pLGlzU2VydmVyUmVuZGVyOiExLHBhcnNlSlNPTjohMCxpbmZsaWdodENhY2hlOnRoaXMuc2RjLHBlcnNpc3RDYWNoZTohdGhpcy5pc1ByZXZpZXcsaXNQcmVmZXRjaDohMCx1bnN0YWJsZV9za2lwQ2xpZW50Q2FjaGU6ci51bnN0YWJsZV9za2lwQ2xpZW50Q2FjaGV8fHIucHJpb3JpdHkmJiEwfSkudGhlbigoKT0+ITEpLmNhdGNoKCgpPT4hMSkpLHRoaXMucGFnZUxvYWRlcltyLnByaW9yaXR5PyJsb2FkUGFnZSI6InByZWZldGNoIl0oUCldKX1hc3luYyBmZXRjaENvbXBvbmVudChlKXtsZXQgdD16KHtyb3V0ZTplLHJvdXRlcjp0aGlzfSk7dHJ5e2xldCByPWF3YWl0IHRoaXMucGFnZUxvYWRlci5sb2FkUGFnZShlKTtyZXR1cm4gdCgpLHJ9Y2F0Y2goZSl7dGhyb3cgdCgpLGV9fV9nZXREYXRhKGUpe2xldCB0PSExLHI9KCk9Pnt0PSEwfTtyZXR1cm4gdGhpcy5jbGM9cixlKCkudGhlbihlPT57aWYocj09PXRoaXMuY2xjJiYodGhpcy5jbGM9bnVsbCksdCl7bGV0IGU9RXJyb3IoIkxvYWRpbmcgaW5pdGlhbCBwcm9wcyBjYW5jZWxsZWQiKTt0aHJvdyBlLmNhbmNlbGxlZD0hMCxlfXJldHVybiBlfSl9X2dldEZsaWdodERhdGEoZSl7cmV0dXJuIFcoe2RhdGFIcmVmOmUsaXNTZXJ2ZXJSZW5kZXI6ITAscGFyc2VKU09OOiExLGluZmxpZ2h0Q2FjaGU6dGhpcy5zZGMscGVyc2lzdENhY2hlOiExLGlzUHJlZmV0Y2g6ITF9KS50aGVuKGU9PntsZXR7dGV4dDp0fT1lO3JldHVybntkYXRhOnR9fSl9Z2V0SW5pdGlhbFByb3BzKGUsdCl7bGV0e0NvbXBvbmVudDpyfT10aGlzLmNvbXBvbmVudHNbIi9fYXBwIl0sbj10aGlzLl93cmFwQXBwKHIpO3JldHVybiB0LkFwcFRyZWU9biwoMCxkLmxvYWRHZXRJbml0aWFsUHJvcHMpKHIse0FwcFRyZWU6bixDb21wb25lbnQ6ZSxyb3V0ZXI6dGhpcyxjdHg6dH0pfWdldCByb3V0ZSgpe3JldHVybiB0aGlzLnN0YXRlLnJvdXRlfWdldCBwYXRobmFtZSgpe3JldHVybiB0aGlzLnN0YXRlLnBhdGhuYW1lfWdldCBxdWVyeSgpe3JldHVybiB0aGlzLnN0YXRlLnF1ZXJ5fWdldCBhc1BhdGgoKXtyZXR1cm4gdGhpcy5zdGF0ZS5hc1BhdGh9Z2V0IGxvY2FsZSgpe3JldHVybiB0aGlzLnN0YXRlLmxvY2FsZX1nZXQgaXNGYWxsYmFjaygpe3JldHVybiB0aGlzLnN0YXRlLmlzRmFsbGJhY2t9Z2V0IGlzUHJldmlldygpe3JldHVybiB0aGlzLnN0YXRlLmlzUHJldmlld31jb25zdHJ1Y3RvcihlLHQsbix7aW5pdGlhbFByb3BzOm8scGFnZUxvYWRlcjppLEFwcDp1LHdyYXBBcHA6bCxDb21wb25lbnQ6cyxlcnI6YyxzdWJzY3JpcHRpb246Zixpc0ZhbGxiYWNrOm0sbG9jYWxlOl8sbG9jYWxlczp5LGRlZmF1bHRMb2NhbGU6Yixkb21haW5Mb2NhbGVzOlAsaXNQcmV2aWV3OnZ9KXt0aGlzLnNkYz17fSx0aGlzLnNiYz17fSx0aGlzLmlzRmlyc3RQb3BTdGF0ZUV2ZW50PSEwLHRoaXMuX2tleT1xKCksdGhpcy5vblBvcFN0YXRlPWU9PntsZXQgdDtsZXR7aXNGaXJzdFBvcFN0YXRlRXZlbnQ6cn09dGhpczt0aGlzLmlzRmlyc3RQb3BTdGF0ZUV2ZW50PSExO2xldCBuPWUuc3RhdGU7aWYoIW4pe2xldHtwYXRobmFtZTplLHF1ZXJ5OnR9PXRoaXM7dGhpcy5jaGFuZ2VTdGF0ZSgicmVwbGFjZVN0YXRlIiwoMCxnLmZvcm1hdFdpdGhWYWxpZGF0aW9uKSh7cGF0aG5hbWU6KDAsRS5hZGRCYXNlUGF0aCkoZSkscXVlcnk6dH0pLCgwLGQuZ2V0VVJMKSgpKTtyZXR1cm59aWYobi5fX05BKXt3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7cmV0dXJufWlmKCFuLl9fTnx8ciYmdGhpcy5sb2NhbGU9PT1uLm9wdGlvbnMubG9jYWxlJiZuLmFzPT09dGhpcy5hc1BhdGgpcmV0dXJuO2xldHt1cmw6byxhczphLG9wdGlvbnM6aSxrZXk6dX09bjt0aGlzLl9rZXk9dTtsZXR7cGF0aG5hbWU6bH09KDAsaC5wYXJzZVJlbGF0aXZlVXJsKShvKTsoIXRoaXMuaXNTc3J8fGEhPT0oMCxFLmFkZEJhc2VQYXRoKSh0aGlzLmFzUGF0aCl8fGwhPT0oMCxFLmFkZEJhc2VQYXRoKSh0aGlzLnBhdGhuYW1lKSkmJighdGhpcy5fYnBzfHx0aGlzLl9icHMobikpJiZ0aGlzLmNoYW5nZSgicmVwbGFjZVN0YXRlIixvLGEsT2JqZWN0LmFzc2lnbih7fSxpLHtzaGFsbG93Omkuc2hhbGxvdyYmdGhpcy5fc2hhbGxvdyxsb2NhbGU6aS5sb2NhbGV8fHRoaXMuZGVmYXVsdExvY2FsZSxfaDowfSksdCl9O2xldCBTPSgwLGEucmVtb3ZlVHJhaWxpbmdTbGFzaCkoZSk7dGhpcy5jb21wb25lbnRzPXt9LCIvX2Vycm9yIiE9PWUmJih0aGlzLmNvbXBvbmVudHNbU109e0NvbXBvbmVudDpzLGluaXRpYWw6ITAscHJvcHM6byxlcnI6YyxfX05fU1NHOm8mJm8uX19OX1NTRyxfX05fU1NQOm8mJm8uX19OX1NTUH0pLHRoaXMuY29tcG9uZW50c1siL19hcHAiXT17Q29tcG9uZW50OnUsc3R5bGVTaGVldHM6W119O3tsZXR7Qmxvb21GaWx0ZXI6ZX09cig1ODEzNSksdD17bnVtSXRlbXM6OCxlcnJvclJhdGU6MWUtNCxudW1CaXRzOjE1NCxudW1IYXNoZXM6MTQsYml0QXJyYXk6WzEsMCwwLDEsMSwwLDAsMSwwLDEsMCwwLDEsMSwwLDEsMSwxLDAsMCwxLDAsMSwwLDEsMSwwLDEsMCwwLDAsMCwwLDAsMCwwLDAsMCwxLDAsMCwwLDAsMCwwLDEsMCwwLDEsMSwxLDAsMSwwLDAsMSwxLDEsMCwwLDEsMSwxLDEsMCwxLDAsMSwwLDEsMSwwLDEsMCwwLDAsMSwxLDAsMSwwLDAsMSwwLDAsMSwxLDAsMSwwLDAsMSwwLDEsMCwxLDAsMSwxLDEsMSwxLDEsMCwxLDAsMCwxLDAsMSwxLDEsMSwwLDEsMSwwLDAsMCwwLDEsMCwwLDAsMCwwLDEsMCwwLDEsMSwxLDAsMCwwLDEsMCwwLDAsMSwwLDEsMCwxLDEsMSwxLDAsMSwxLDAsMCwwLDFdfSxuPXtudW1JdGVtczowLGVycm9yUmF0ZToxZS00LG51bUJpdHM6MCxudW1IYXNoZXM6bnVsbCxiaXRBcnJheTpbXX07KG51bGw9PXQ/dm9pZCAwOnQubnVtSGFzaGVzKSYmKHRoaXMuX2JmbF9zPW5ldyBlKHQubnVtSXRlbXMsdC5lcnJvclJhdGUpLHRoaXMuX2JmbF9zLmltcG9ydCh0KSksKG51bGw9PW4/dm9pZCAwOm4ubnVtSGFzaGVzKSYmKHRoaXMuX2JmbF9kPW5ldyBlKG4ubnVtSXRlbXMsbi5lcnJvclJhdGUpLHRoaXMuX2JmbF9kLmltcG9ydChuKSl9dGhpcy5ldmVudHM9Vi5ldmVudHMsdGhpcy5wYWdlTG9hZGVyPWk7bGV0IE89KDAscC5pc0R5bmFtaWNSb3V0ZSkoZSkmJnNlbGYuX19ORVhUX0RBVEFfXy5hdXRvRXhwb3J0O2lmKHRoaXMuYmFzZVBhdGg9IiIsdGhpcy5zdWI9Zix0aGlzLmNsYz1udWxsLHRoaXMuX3dyYXBBcHA9bCx0aGlzLmlzU3NyPSEwLHRoaXMuaXNMb2NhbGVEb21haW49ITEsdGhpcy5pc1JlYWR5PSEhKHNlbGYuX19ORVhUX0RBVEFfXy5nc3NwfHxzZWxmLl9fTkVYVF9EQVRBX18uZ2lwfHxzZWxmLl9fTkVYVF9EQVRBX18uaXNFeHBlcmltZW50YWxDb21waWxlfHxzZWxmLl9fTkVYVF9EQVRBX18uYXBwR2lwJiYhc2VsZi5fX05FWFRfREFUQV9fLmdzcHx8IU8mJiFzZWxmLmxvY2F0aW9uLnNlYXJjaCksdGhpcy5zdGF0ZT17cm91dGU6UyxwYXRobmFtZTplLHF1ZXJ5OnQsYXNQYXRoOk8/ZTpuLGlzUHJldmlldzohIXYsbG9jYWxlOnZvaWQgMCxpc0ZhbGxiYWNrOm19LHRoaXMuX2luaXRpYWxNYXRjaGVzTWlkZGxld2FyZVByb21pc2U9UHJvbWlzZS5yZXNvbHZlKCExKSwhbi5zdGFydHNXaXRoKCIvLyIpKXtsZXQgcj17bG9jYWxlOl99LG89KDAsZC5nZXRVUkwpKCk7dGhpcy5faW5pdGlhbE1hdGNoZXNNaWRkbGV3YXJlUHJvbWlzZT1OKHtyb3V0ZXI6dGhpcyxsb2NhbGU6Xyxhc1BhdGg6b30pLnRoZW4oYT0+KHIuX3Nob3VsZFJlc29sdmVIcmVmPW4hPT1lLHRoaXMuY2hhbmdlU3RhdGUoInJlcGxhY2VTdGF0ZSIsYT9vOigwLGcuZm9ybWF0V2l0aFZhbGlkYXRpb24pKHtwYXRobmFtZTooMCxFLmFkZEJhc2VQYXRoKShlKSxxdWVyeTp0fSksbyxyKSxhKSl9d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoInBvcHN0YXRlIix0aGlzLm9uUG9wU3RhdGUpfX1WLmV2ZW50cz0oMCxmLmRlZmF1bHQpKCl9LDg2Nzk6ZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsImFkZExvY2FsZSIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGF9fSk7bGV0IG49cig1Njg5MCksbz1yKDg5NDMyKTtmdW5jdGlvbiBhKGUsdCxyLGEpe2lmKCF0fHx0PT09cilyZXR1cm4gZTtsZXQgaT1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIWEmJigoMCxvLnBhdGhIYXNQcmVmaXgpKGksIi9hcGkiKXx8KDAsby5wYXRoSGFzUHJlZml4KShpLCIvIit0LnRvTG93ZXJDYXNlKCkpKT9lOigwLG4uYWRkUGF0aFByZWZpeCkoZSwiLyIrdCl9fSw1Njg5MDpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiYWRkUGF0aFByZWZpeCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG99fSk7bGV0IG49cig3NjQ3OCk7ZnVuY3Rpb24gbyhlLHQpe2lmKCFlLnN0YXJ0c1dpdGgoIi8iKXx8IXQpcmV0dXJuIGU7bGV0e3BhdGhuYW1lOnIscXVlcnk6byxoYXNoOmF9PSgwLG4ucGFyc2VQYXRoKShlKTtyZXR1cm4iIit0K3IrbythfX0sNzU1Mzg6ZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsImFkZFBhdGhTdWZmaXgiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBvfX0pO2xldCBuPXIoNzY0NzgpO2Z1bmN0aW9uIG8oZSx0KXtpZighZS5zdGFydHNXaXRoKCIvIil8fCF0KXJldHVybiBlO2xldHtwYXRobmFtZTpyLHF1ZXJ5Om8saGFzaDphfT0oMCxuLnBhcnNlUGF0aCkoZSk7cmV0dXJuIiIrcit0K28rYX19LDMzNjY2OmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpT2JqZWN0LmRlZmluZVByb3BlcnR5KGUscix7ZW51bWVyYWJsZTohMCxnZXQ6dFtyXX0pfSh0LHtub3JtYWxpemVBcHBQYXRoOmZ1bmN0aW9uKCl7cmV0dXJuIGF9LG5vcm1hbGl6ZVJzY1VSTDpmdW5jdGlvbigpe3JldHVybiBpfX0pO2xldCBuPXIoNjk3MjApLG89cig1NzI3OSk7ZnVuY3Rpb24gYShlKXtyZXR1cm4oMCxuLmVuc3VyZUxlYWRpbmdTbGFzaCkoZS5zcGxpdCgiLyIpLnJlZHVjZSgoZSx0LHIsbik9PiF0fHwoMCxvLmlzR3JvdXBTZWdtZW50KSh0KXx8IkAiPT09dFswXXx8KCJwYWdlIj09PXR8fCJyb3V0ZSI9PT10KSYmcj09PW4ubGVuZ3RoLTE/ZTplKyIvIit0LCIiKSl9ZnVuY3Rpb24gaShlKXtyZXR1cm4gZS5yZXBsYWNlKC9cLnJzYygkfFw/KS8sIiQxIil9fSw0Njk0OTpmdW5jdGlvbihlLHQpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiByKGUpe3JldHVybiBuZXcgVVJMKGUsImh0dHA6Ly9uIikuc2VhcmNoUGFyYW1zfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiYXNQYXRoVG9TZWFyY2hQYXJhbXMiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiByfX0pfSw4Mzk4MzpmdW5jdGlvbihlLHQpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiByKGUsdCl7bGV0IHI9T2JqZWN0LmtleXMoZSk7aWYoci5sZW5ndGghPT1PYmplY3Qua2V5cyh0KS5sZW5ndGgpcmV0dXJuITE7Zm9yKGxldCBuPXIubGVuZ3RoO24tLTspe2xldCBvPXJbbl07aWYoInF1ZXJ5Ij09PW8pe2xldCByPU9iamVjdC5rZXlzKGUucXVlcnkpO2lmKHIubGVuZ3RoIT09T2JqZWN0LmtleXModC5xdWVyeSkubGVuZ3RoKXJldHVybiExO2ZvcihsZXQgbj1yLmxlbmd0aDtuLS07KXtsZXQgbz1yW25dO2lmKCF0LnF1ZXJ5Lmhhc093blByb3BlcnR5KG8pfHxlLnF1ZXJ5W29dIT09dC5xdWVyeVtvXSlyZXR1cm4hMX19ZWxzZSBpZighdC5oYXNPd25Qcm9wZXJ0eShvKXx8ZVtvXSE9PXRbb10pcmV0dXJuITF9cmV0dXJuITB9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJjb21wYXJlUm91dGVyU3RhdGVzIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcn19KX0sMTY1NTQ6ZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsImZvcm1hdE5leHRQYXRobmFtZUluZm8iLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB1fX0pO2xldCBuPXIoODY2MjMpLG89cig1Njg5MCksYT1yKDc1NTM4KSxpPXIoODY3OSk7ZnVuY3Rpb24gdShlKXtsZXQgdD0oMCxpLmFkZExvY2FsZSkoZS5wYXRobmFtZSxlLmxvY2FsZSxlLmJ1aWxkSWQ/dm9pZCAwOmUuZGVmYXVsdExvY2FsZSxlLmlnbm9yZVByZWZpeCk7cmV0dXJuKGUuYnVpbGRJZHx8IWUudHJhaWxpbmdTbGFzaCkmJih0PSgwLG4ucmVtb3ZlVHJhaWxpbmdTbGFzaCkodCkpLGUuYnVpbGRJZCYmKHQ9KDAsYS5hZGRQYXRoU3VmZml4KSgoMCxvLmFkZFBhdGhQcmVmaXgpKHQsIi9fbmV4dC9kYXRhLyIrZS5idWlsZElkKSwiLyI9PT1lLnBhdGhuYW1lPyJpbmRleC5qc29uIjoiLmpzb24iKSksdD0oMCxvLmFkZFBhdGhQcmVmaXgpKHQsZS5iYXNlUGF0aCksIWUuYnVpbGRJZCYmZS50cmFpbGluZ1NsYXNoP3QuZW5kc1dpdGgoIi8iKT90OigwLGEuYWRkUGF0aFN1ZmZpeCkodCwiLyIpOigwLG4ucmVtb3ZlVHJhaWxpbmdTbGFzaCkodCl9fSwzNTIyNzpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHIse2VudW1lcmFibGU6ITAsZ2V0OnRbcl19KX0odCx7Zm9ybWF0VXJsOmZ1bmN0aW9uKCl7cmV0dXJuIGF9LGZvcm1hdFdpdGhWYWxpZGF0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIHV9LHVybE9iamVjdEtleXM6ZnVuY3Rpb24oKXtyZXR1cm4gaX19KTtsZXQgbj1yKDExNzc4KS5fKHIoODMwNzkpKSxvPS9odHRwcz98ZnRwfGdvcGhlcnxmaWxlLztmdW5jdGlvbiBhKGUpe2xldHthdXRoOnQsaG9zdG5hbWU6cn09ZSxhPWUucHJvdG9jb2x8fCIiLGk9ZS5wYXRobmFtZXx8IiIsdT1lLmhhc2h8fCIiLGw9ZS5xdWVyeXx8IiIscz0hMTt0PXQ/ZW5jb2RlVVJJQ29tcG9uZW50KHQpLnJlcGxhY2UoLyUzQS9pLCI6IikrIkAiOiIiLGUuaG9zdD9zPXQrZS5ob3N0OnImJihzPXQrKH5yLmluZGV4T2YoIjoiKT8iWyIrcisiXSI6ciksZS5wb3J0JiYocys9IjoiK2UucG9ydCkpLGwmJiJvYmplY3QiPT10eXBlb2YgbCYmKGw9U3RyaW5nKG4udXJsUXVlcnlUb1NlYXJjaFBhcmFtcyhsKSkpO2xldCBjPWUuc2VhcmNofHxsJiYiPyIrbHx8IiI7cmV0dXJuIGEmJiFhLmVuZHNXaXRoKCI6IikmJihhKz0iOiIpLGUuc2xhc2hlc3x8KCFhfHxvLnRlc3QoYSkpJiYhMSE9PXM/KHM9Ii8vIisoc3x8IiIpLGkmJiIvIiE9PWlbMF0mJihpPSIvIitpKSk6c3x8KHM9IiIpLHUmJiIjIiE9PXVbMF0mJih1PSIjIit1KSxjJiYiPyIhPT1jWzBdJiYoYz0iPyIrYyksIiIrYStzKyhpPWkucmVwbGFjZSgvWz8jXS9nLGVuY29kZVVSSUNvbXBvbmVudCkpKyhjPWMucmVwbGFjZSgiIyIsIiUyMyIpKSt1fWxldCBpPVsiYXV0aCIsImhhc2giLCJob3N0IiwiaG9zdG5hbWUiLCJocmVmIiwicGF0aCIsInBhdGhuYW1lIiwicG9ydCIsInByb3RvY29sIiwicXVlcnkiLCJzZWFyY2giLCJzbGFzaGVzIl07ZnVuY3Rpb24gdShlKXtyZXR1cm4gYShlKX19LDI4MjcxOmZ1bmN0aW9uKGUsdCl7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIoZSx0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9IiIpLCgiLyI9PT1lPyIvaW5kZXgiOi9eXC9pbmRleChcL3wkKS8udGVzdChlKT8iL2luZGV4IitlOmUpK3R9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJkZWZhdWx0Iix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcn19KX0sMjQ0MTI6ZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsImdldE5leHRQYXRobmFtZUluZm8iLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBpfX0pO2xldCBuPXIoNTEyNDkpLG89cig4Mjk0NSksYT1yKDg5NDMyKTtmdW5jdGlvbiBpKGUsdCl7dmFyIHIsaTtsZXR7YmFzZVBhdGg6dSxpMThuOmwsdHJhaWxpbmdTbGFzaDpzfT1udWxsIT0ocj10Lm5leHRDb25maWcpP3I6e30sYz17cGF0aG5hbWU6ZSx0cmFpbGluZ1NsYXNoOiIvIiE9PWU/ZS5lbmRzV2l0aCgiLyIpOnN9O3UmJigwLGEucGF0aEhhc1ByZWZpeCkoYy5wYXRobmFtZSx1KSYmKGMucGF0aG5hbWU9KDAsby5yZW1vdmVQYXRoUHJlZml4KShjLnBhdGhuYW1lLHUpLGMuYmFzZVBhdGg9dSk7bGV0IGY9Yy5wYXRobmFtZTtpZihjLnBhdGhuYW1lLnN0YXJ0c1dpdGgoIi9fbmV4dC9kYXRhLyIpJiZjLnBhdGhuYW1lLmVuZHNXaXRoKCIuanNvbiIpKXtsZXQgZT1jLnBhdGhuYW1lLnJlcGxhY2UoL15cL19uZXh0XC9kYXRhXC8vLCIiKS5yZXBsYWNlKC9cLmpzb24kLywiIikuc3BsaXQoIi8iKSxyPWVbMF07Yy5idWlsZElkPXIsZj0iaW5kZXgiIT09ZVsxXT8iLyIrZS5zbGljZSgxKS5qb2luKCIvIik6Ii8iLCEwPT09dC5wYXJzZURhdGEmJihjLnBhdGhuYW1lPWYpfWlmKGwpe2xldCBlPXQuaTE4blByb3ZpZGVyP3QuaTE4blByb3ZpZGVyLmFuYWx5emUoYy5wYXRobmFtZSk6KDAsbi5ub3JtYWxpemVMb2NhbGVQYXRoKShjLnBhdGhuYW1lLGwubG9jYWxlcyk7Yy5sb2NhbGU9ZS5kZXRlY3RlZExvY2FsZSxjLnBhdGhuYW1lPW51bGwhPShpPWUucGF0aG5hbWUpP2k6Yy5wYXRobmFtZSwhZS5kZXRlY3RlZExvY2FsZSYmYy5idWlsZElkJiYoZT10LmkxOG5Qcm92aWRlcj90LmkxOG5Qcm92aWRlci5hbmFseXplKGYpOigwLG4ubm9ybWFsaXplTG9jYWxlUGF0aCkoZixsLmxvY2FsZXMpKS5kZXRlY3RlZExvY2FsZSYmKGMubG9jYWxlPWUuZGV0ZWN0ZWRMb2NhbGUpfXJldHVybiBjfX0sNjEwMzA6ZnVuY3Rpb24oZSx0KXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcihlLHQpe2lmKHZvaWQgMD09PXQmJih0PXt9KSx0Lm9ubHlIYXNoQ2hhbmdlKXtlKCk7cmV0dXJufWxldCByPWRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxuPXIuc3R5bGUuc2Nyb2xsQmVoYXZpb3I7ci5zdHlsZS5zY3JvbGxCZWhhdmlvcj0iYXV0byIsdC5kb250Rm9yY2VMYXlvdXR8fHIuZ2V0Q2xpZW50UmVjdHMoKSxlKCksci5zdHlsZS5zY3JvbGxCZWhhdmlvcj1ufU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiaGFuZGxlU21vb3RoU2Nyb2xsIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcn19KX0sNTg3Nzc6ZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdClPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLHtlbnVtZXJhYmxlOiEwLGdldDp0W3JdfSl9KHQse2dldFNvcnRlZFJvdXRlczpmdW5jdGlvbigpe3JldHVybiBuLmdldFNvcnRlZFJvdXRlc30saXNEeW5hbWljUm91dGU6ZnVuY3Rpb24oKXtyZXR1cm4gby5pc0R5bmFtaWNSb3V0ZX19KTtsZXQgbj1yKDI0MzcwKSxvPXIoNTk5MjEpfSw3NDk0MzpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiaW50ZXJwb2xhdGVBcyIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGF9fSk7bGV0IG49cigyODQzMyksbz1yKDM2MjQyKTtmdW5jdGlvbiBhKGUsdCxyKXtsZXQgYT0iIixpPSgwLG8uZ2V0Um91dGVSZWdleCkoZSksdT1pLmdyb3VwcyxsPSh0IT09ZT8oMCxuLmdldFJvdXRlTWF0Y2hlcikoaSkodCk6IiIpfHxyO2E9ZTtsZXQgcz1PYmplY3Qua2V5cyh1KTtyZXR1cm4gcy5ldmVyeShlPT57bGV0IHQ9bFtlXXx8IiIse3JlcGVhdDpyLG9wdGlvbmFsOm59PXVbZV0sbz0iWyIrKHI/Ii4uLiI6IiIpK2UrIl0iO3JldHVybiBuJiYobz0odD8iIjoiLyIpKyJbIitvKyJdIiksciYmIUFycmF5LmlzQXJyYXkodCkmJih0PVt0XSksKG58fGUgaW4gbCkmJihhPWEucmVwbGFjZShvLHI/dC5tYXAoZT0+ZW5jb2RlVVJJQ29tcG9uZW50KGUpKS5qb2luKCIvIik6ZW5jb2RlVVJJQ29tcG9uZW50KHQpKXx8Ii8iKX0pfHwoYT0iIikse3BhcmFtczpzLHJlc3VsdDphfX19LDQyMzI6ZnVuY3Rpb24oZSx0KXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcihlKXtyZXR1cm4vR29vZ2xlYm90fE1lZGlhcGFydG5lcnMtR29vZ2xlfEFkc0JvdC1Hb29nbGV8Z29vZ2xld2VibGlnaHR8U3RvcmVib3QtR29vZ2xlfEdvb2dsZS1QYWdlUmVuZGVyZXJ8QmluZ2JvdHxCaW5nUHJldmlld3xTbHVycHxEdWNrRHVja0JvdHxiYWlkdXNwaWRlcnx5YW5kZXh8c29nb3V8TGlua2VkSW5Cb3R8Yml0bHlib3R8dHVtYmxyfHZrU2hhcmV8cXVvcmEgbGluayBwcmV2aWV3fGZhY2Vib29rZXh0ZXJuYWxoaXR8ZmFjZWJvb2tjYXRhbG9nfFR3aXR0ZXJib3R8YXBwbGVib3R8cmVkZGl0Ym90fFNsYWNrYm90fERpc2NvcmRib3R8V2hhdHNBcHB8U2t5cGVVcmlQcmV2aWV3fGlhX2FyY2hpdmVyL2kudGVzdChlKX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsImlzQm90Iix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcn19KX0sNTk5MjE6ZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsImlzRHluYW1pY1JvdXRlIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYX19KTtsZXQgbj1yKDU3NTk0KSxvPS9cL1xbW14vXSs/XF0oPz1cL3wkKS87ZnVuY3Rpb24gYShlKXtyZXR1cm4oMCxuLmlzSW50ZXJjZXB0aW9uUm91dGVBcHBQYXRoKShlKSYmKGU9KDAsbi5leHRyYWN0SW50ZXJjZXB0aW9uUm91dGVJbmZvcm1hdGlvbikoZSkuaW50ZXJjZXB0ZWRSb3V0ZSksby50ZXN0KGUpfX0sMzcwMzM6ZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsImlzTG9jYWxVUkwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBhfX0pO2xldCBuPXIoNzMwMDYpLG89cig5NDg4Mik7ZnVuY3Rpb24gYShlKXtpZighKDAsbi5pc0Fic29sdXRlVXJsKShlKSlyZXR1cm4hMDt0cnl7bGV0IHQ9KDAsbi5nZXRMb2NhdGlvbk9yaWdpbikoKSxyPW5ldyBVUkwoZSx0KTtyZXR1cm4gci5vcmlnaW49PT10JiYoMCxvLmhhc0Jhc2VQYXRoKShyLnBhdGhuYW1lKX1jYXRjaChlKXtyZXR1cm4hMX19fSw0MTQyMjpmdW5jdGlvbihlLHQpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiByKGUsdCl7bGV0IHI9e307cmV0dXJuIE9iamVjdC5rZXlzKGUpLmZvckVhY2gobj0+e3QuaW5jbHVkZXMobil8fChyW25dPWVbbl0pfSkscn1PYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIm9taXQiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiByfX0pfSw3NjQ3ODpmdW5jdGlvbihlLHQpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiByKGUpe2xldCB0PWUuaW5kZXhPZigiIyIpLHI9ZS5pbmRleE9mKCI/Iiksbj1yPi0xJiYodDwwfHxyPHQpO3JldHVybiBufHx0Pi0xP3twYXRobmFtZTplLnN1YnN0cmluZygwLG4/cjp0KSxxdWVyeTpuP2Uuc3Vic3RyaW5nKHIsdD4tMT90OnZvaWQgMCk6IiIsaGFzaDp0Pi0xP2Uuc2xpY2UodCk6IiJ9OntwYXRobmFtZTplLHF1ZXJ5OiIiLGhhc2g6IiJ9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwicGFyc2VQYXRoIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcn19KX0sOTk2OTg6ZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsInBhcnNlUmVsYXRpdmVVcmwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBhfX0pO2xldCBuPXIoNzMwMDYpLG89cig4MzA3OSk7ZnVuY3Rpb24gYShlLHQpe2xldCByPW5ldyBVUkwoKDAsbi5nZXRMb2NhdGlvbk9yaWdpbikoKSksYT10P25ldyBVUkwodCxyKTplLnN0YXJ0c1dpdGgoIi4iKT9uZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTpyLHtwYXRobmFtZTppLHNlYXJjaFBhcmFtczp1LHNlYXJjaDpsLGhhc2g6cyxocmVmOmMsb3JpZ2luOmZ9PW5ldyBVUkwoZSxhKTtpZihmIT09ci5vcmlnaW4pdGhyb3cgRXJyb3IoImludmFyaWFudDogaW52YWxpZCByZWxhdGl2ZSBVUkwsIHJvdXRlciByZWNlaXZlZCAiK2UpO3JldHVybntwYXRobmFtZTppLHF1ZXJ5OigwLG8uc2VhcmNoUGFyYW1zVG9VcmxRdWVyeSkodSksc2VhcmNoOmwsaGFzaDpzLGhyZWY6Yy5zbGljZShyLm9yaWdpbi5sZW5ndGgpfX19LDg5NDMyOmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJwYXRoSGFzUHJlZml4Iix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gb319KTtsZXQgbj1yKDc2NDc4KTtmdW5jdGlvbiBvKGUsdCl7aWYoInN0cmluZyIhPXR5cGVvZiBlKXJldHVybiExO2xldHtwYXRobmFtZTpyfT0oMCxuLnBhcnNlUGF0aCkoZSk7cmV0dXJuIHI9PT10fHxyLnN0YXJ0c1dpdGgodCsiLyIpfX0sODMwNzk6ZnVuY3Rpb24oZSx0KXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcihlKXtsZXQgdD17fTtyZXR1cm4gZS5mb3JFYWNoKChlLHIpPT57dm9pZCAwPT09dFtyXT90W3JdPWU6QXJyYXkuaXNBcnJheSh0W3JdKT90W3JdLnB1c2goZSk6dFtyXT1bdFtyXSxlXX0pLHR9ZnVuY3Rpb24gbihlKXtyZXR1cm4ic3RyaW5nIiE9dHlwZW9mIGUmJigibnVtYmVyIiE9dHlwZW9mIGV8fGlzTmFOKGUpKSYmImJvb2xlYW4iIT10eXBlb2YgZT8iIjpTdHJpbmcoZSl9ZnVuY3Rpb24gbyhlKXtsZXQgdD1uZXcgVVJMU2VhcmNoUGFyYW1zO3JldHVybiBPYmplY3QuZW50cmllcyhlKS5mb3JFYWNoKGU9PntsZXRbcixvXT1lO0FycmF5LmlzQXJyYXkobyk/by5mb3JFYWNoKGU9PnQuYXBwZW5kKHIsbihlKSkpOnQuc2V0KHIsbihvKSl9KSx0fWZ1bmN0aW9uIGEoZSl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgscj1BcnJheSh0PjE/dC0xOjApLG49MTtuPHQ7bisrKXJbbi0xXT1hcmd1bWVudHNbbl07cmV0dXJuIHIuZm9yRWFjaCh0PT57QXJyYXkuZnJvbSh0LmtleXMoKSkuZm9yRWFjaCh0PT5lLmRlbGV0ZSh0KSksdC5mb3JFYWNoKCh0LHIpPT5lLmFwcGVuZChyLHQpKX0pLGV9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpT2JqZWN0LmRlZmluZVByb3BlcnR5KGUscix7ZW51bWVyYWJsZTohMCxnZXQ6dFtyXX0pfSh0LHthc3NpZ246ZnVuY3Rpb24oKXtyZXR1cm4gYX0sc2VhcmNoUGFyYW1zVG9VcmxRdWVyeTpmdW5jdGlvbigpe3JldHVybiByfSx1cmxRdWVyeVRvU2VhcmNoUGFyYW1zOmZ1bmN0aW9uKCl7cmV0dXJuIG99fSl9LDgyOTQ1OmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJyZW1vdmVQYXRoUHJlZml4Iix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gb319KTtsZXQgbj1yKDg5NDMyKTtmdW5jdGlvbiBvKGUsdCl7aWYoISgwLG4ucGF0aEhhc1ByZWZpeCkoZSx0KSlyZXR1cm4gZTtsZXQgcj1lLnNsaWNlKHQubGVuZ3RoKTtyZXR1cm4gci5zdGFydHNXaXRoKCIvIik/cjoiLyIrcn19LDg2NjIzOmZ1bmN0aW9uKGUsdCl7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIoZSl7cmV0dXJuIGUucmVwbGFjZSgvXC8kLywiIil8fCIvIn1PYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsInJlbW92ZVRyYWlsaW5nU2xhc2giLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiByfX0pfSwyODQzMzpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiZ2V0Um91dGVNYXRjaGVyIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gb319KTtsZXQgbj1yKDczMDA2KTtmdW5jdGlvbiBvKGUpe2xldHtyZTp0LGdyb3VwczpyfT1lO3JldHVybiBlPT57bGV0IG89dC5leGVjKGUpO2lmKCFvKXJldHVybiExO2xldCBhPWU9Pnt0cnl7cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlKX1jYXRjaChlKXt0aHJvdyBuZXcgbi5EZWNvZGVFcnJvcigiZmFpbGVkIHRvIGRlY29kZSBwYXJhbSIpfX0saT17fTtyZXR1cm4gT2JqZWN0LmtleXMocikuZm9yRWFjaChlPT57bGV0IHQ9cltlXSxuPW9bdC5wb3NdO3ZvaWQgMCE9PW4mJihpW2VdPX5uLmluZGV4T2YoIi8iKT9uLnNwbGl0KCIvIikubWFwKGU9PmEoZSkpOnQucmVwZWF0P1thKG4pXTphKG4pKX0pLGl9fX0sMzYyNDI6ZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdClPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLHtlbnVtZXJhYmxlOiEwLGdldDp0W3JdfSl9KHQse2dldE5hbWVkTWlkZGxld2FyZVJlZ2V4OmZ1bmN0aW9uKCl7cmV0dXJuIGR9LGdldE5hbWVkUm91dGVSZWdleDpmdW5jdGlvbigpe3JldHVybiBmfSxnZXRSb3V0ZVJlZ2V4OmZ1bmN0aW9uKCl7cmV0dXJuIGx9fSk7bGV0IG49cig1NzU5NCksbz1yKDE0MTEpLGE9cig4NjYyMyk7ZnVuY3Rpb24gaShlKXtsZXQgdD1lLnN0YXJ0c1dpdGgoIlsiKSYmZS5lbmRzV2l0aCgiXSIpO3QmJihlPWUuc2xpY2UoMSwtMSkpO2xldCByPWUuc3RhcnRzV2l0aCgiLi4uIik7cmV0dXJuIHImJihlPWUuc2xpY2UoMykpLHtrZXk6ZSxyZXBlYXQ6cixvcHRpb25hbDp0fX1mdW5jdGlvbiB1KGUpe2xldCB0PSgwLGEucmVtb3ZlVHJhaWxpbmdTbGFzaCkoZSkuc2xpY2UoMSkuc3BsaXQoIi8iKSxyPXt9LHU9MTtyZXR1cm57cGFyYW1ldGVyaXplZFJvdXRlOnQubWFwKGU9PntsZXQgdD1uLklOVEVSQ0VQVElPTl9ST1VURV9NQVJLRVJTLmZpbmQodD0+ZS5zdGFydHNXaXRoKHQpKSxhPWUubWF0Y2goL1xbKCg/OlxbLipcXSl8LispXF0vKTtpZih0JiZhKXtsZXR7a2V5OmUsb3B0aW9uYWw6bixyZXBlYXQ6bH09aShhWzFdKTtyZXR1cm4gcltlXT17cG9zOnUrKyxyZXBlYXQ6bCxvcHRpb25hbDpufSwiLyIrKDAsby5lc2NhcGVTdHJpbmdSZWdleHApKHQpKyIoW14vXSs/KSJ9aWYoIWEpcmV0dXJuIi8iKygwLG8uZXNjYXBlU3RyaW5nUmVnZXhwKShlKTt7bGV0e2tleTplLHJlcGVhdDp0LG9wdGlvbmFsOm59PWkoYVsxXSk7cmV0dXJuIHJbZV09e3Bvczp1KysscmVwZWF0OnQsb3B0aW9uYWw6bn0sdD9uPyIoPzovKC4rPykpPyI6Ii8oLis/KSI6Ii8oW14vXSs/KSJ9fSkuam9pbigiIiksZ3JvdXBzOnJ9fWZ1bmN0aW9uIGwoZSl7bGV0e3BhcmFtZXRlcml6ZWRSb3V0ZTp0LGdyb3VwczpyfT11KGUpO3JldHVybntyZTpSZWdFeHAoIl4iK3QrIig/Oi8pPyQiKSxncm91cHM6cn19ZnVuY3Rpb24gcyhlKXtsZXR7aW50ZXJjZXB0aW9uTWFya2VyOnQsZ2V0U2FmZVJvdXRlS2V5OnIsc2VnbWVudDpuLHJvdXRlS2V5czphLGtleVByZWZpeDp1fT1lLHtrZXk6bCxvcHRpb25hbDpzLHJlcGVhdDpjfT1pKG4pLGY9bC5yZXBsYWNlKC9cVy9nLCIiKTt1JiYoZj0iIit1K2YpO2xldCBkPSExOygwPT09Zi5sZW5ndGh8fGYubGVuZ3RoPjMwKSYmKGQ9ITApLGlzTmFOKHBhcnNlSW50KGYuc2xpY2UoMCwxKSkpfHwoZD0hMCksZCYmKGY9cigpKSx1P2FbZl09IiIrdStsOmFbZl09bDtsZXQgcD10PygwLG8uZXNjYXBlU3RyaW5nUmVnZXhwKSh0KToiIjtyZXR1cm4gYz9zPyIoPzovIitwKyIoPzwiK2YrIj4uKz8pKT8iOiIvIitwKyIoPzwiK2YrIj4uKz8pIjoiLyIrcCsiKD88IitmKyI+W14vXSs/KSJ9ZnVuY3Rpb24gYyhlLHQpe2xldCByO2xldCBpPSgwLGEucmVtb3ZlVHJhaWxpbmdTbGFzaCkoZSkuc2xpY2UoMSkuc3BsaXQoIi8iKSx1PShyPTAsKCk9PntsZXQgZT0iIix0PSsrcjtmb3IoO3Q+MDspZSs9U3RyaW5nLmZyb21DaGFyQ29kZSg5NysodC0xKSUyNiksdD1NYXRoLmZsb29yKCh0LTEpLzI2KTtyZXR1cm4gZX0pLGw9e307cmV0dXJue25hbWVkUGFyYW1ldGVyaXplZFJvdXRlOmkubWFwKGU9PntsZXQgcj1uLklOVEVSQ0VQVElPTl9ST1VURV9NQVJLRVJTLnNvbWUodD0+ZS5zdGFydHNXaXRoKHQpKSxhPWUubWF0Y2goL1xbKCg/OlxbLipcXSl8LispXF0vKTtpZihyJiZhKXtsZXRbcl09ZS5zcGxpdChhWzBdKTtyZXR1cm4gcyh7Z2V0U2FmZVJvdXRlS2V5OnUsaW50ZXJjZXB0aW9uTWFya2VyOnIsc2VnbWVudDphWzFdLHJvdXRlS2V5czpsLGtleVByZWZpeDp0PyJueHRJIjp2b2lkIDB9KX1yZXR1cm4gYT9zKHtnZXRTYWZlUm91dGVLZXk6dSxzZWdtZW50OmFbMV0scm91dGVLZXlzOmwsa2V5UHJlZml4OnQ/Im54dFAiOnZvaWQgMH0pOiIvIisoMCxvLmVzY2FwZVN0cmluZ1JlZ2V4cCkoZSl9KS5qb2luKCIiKSxyb3V0ZUtleXM6bH19ZnVuY3Rpb24gZihlLHQpe2xldCByPWMoZSx0KTtyZXR1cm57Li4ubChlKSxuYW1lZFJlZ2V4OiJeIityLm5hbWVkUGFyYW1ldGVyaXplZFJvdXRlKyIoPzovKT8kIixyb3V0ZUtleXM6ci5yb3V0ZUtleXN9fWZ1bmN0aW9uIGQoZSx0KXtsZXR7cGFyYW1ldGVyaXplZFJvdXRlOnJ9PXUoZSkse2NhdGNoQWxsOm49ITB9PXQ7aWYoIi8iPT09cilyZXR1cm57bmFtZWRSZWdleDoiXi8iKyhuPyIuKiI6IiIpKyIkIn07bGV0e25hbWVkUGFyYW1ldGVyaXplZFJvdXRlOm99PWMoZSwhMSk7cmV0dXJue25hbWVkUmVnZXg6Il4iK28rKG4/Iig/OigvLiopPykiOiIiKSsiJCJ9fX0sMjQzNzA6ZnVuY3Rpb24oZSx0KXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJnZXRTb3J0ZWRSb3V0ZXMiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBufX0pO2NsYXNzIHJ7aW5zZXJ0KGUpe3RoaXMuX2luc2VydChlLnNwbGl0KCIvIikuZmlsdGVyKEJvb2xlYW4pLFtdLCExKX1zbW9vc2goKXtyZXR1cm4gdGhpcy5fc21vb3NoKCl9X3Ntb29zaChlKXt2b2lkIDA9PT1lJiYoZT0iLyIpO2xldCB0PVsuLi50aGlzLmNoaWxkcmVuLmtleXMoKV0uc29ydCgpO251bGwhPT10aGlzLnNsdWdOYW1lJiZ0LnNwbGljZSh0LmluZGV4T2YoIltdIiksMSksbnVsbCE9PXRoaXMucmVzdFNsdWdOYW1lJiZ0LnNwbGljZSh0LmluZGV4T2YoIlsuLi5dIiksMSksbnVsbCE9PXRoaXMub3B0aW9uYWxSZXN0U2x1Z05hbWUmJnQuc3BsaWNlKHQuaW5kZXhPZigiW1suLi5dXSIpLDEpO2xldCByPXQubWFwKHQ9PnRoaXMuY2hpbGRyZW4uZ2V0KHQpLl9zbW9vc2goIiIrZSt0KyIvIikpLnJlZHVjZSgoZSx0KT0+Wy4uLmUsLi4udF0sW10pO2lmKG51bGwhPT10aGlzLnNsdWdOYW1lJiZyLnB1c2goLi4udGhpcy5jaGlsZHJlbi5nZXQoIltdIikuX3Ntb29zaChlKyJbIit0aGlzLnNsdWdOYW1lKyJdLyIpKSwhdGhpcy5wbGFjZWhvbGRlcil7bGV0IHQ9Ii8iPT09ZT8iLyI6ZS5zbGljZSgwLC0xKTtpZihudWxsIT10aGlzLm9wdGlvbmFsUmVzdFNsdWdOYW1lKXRocm93IEVycm9yKCdZb3UgY2Fubm90IGRlZmluZSBhIHJvdXRlIHdpdGggdGhlIHNhbWUgc3BlY2lmaWNpdHkgYXMgYSBvcHRpb25hbCBjYXRjaC1hbGwgcm91dGUgKCInK3QrJyIgYW5kICInK3QrIltbLi4uIit0aGlzLm9wdGlvbmFsUmVzdFNsdWdOYW1lKyddXSIpLicpO3IudW5zaGlmdCh0KX1yZXR1cm4gbnVsbCE9PXRoaXMucmVzdFNsdWdOYW1lJiZyLnB1c2goLi4udGhpcy5jaGlsZHJlbi5nZXQoIlsuLi5dIikuX3Ntb29zaChlKyJbLi4uIit0aGlzLnJlc3RTbHVnTmFtZSsiXS8iKSksbnVsbCE9PXRoaXMub3B0aW9uYWxSZXN0U2x1Z05hbWUmJnIucHVzaCguLi50aGlzLmNoaWxkcmVuLmdldCgiW1suLi5dXSIpLl9zbW9vc2goZSsiW1suLi4iK3RoaXMub3B0aW9uYWxSZXN0U2x1Z05hbWUrIl1dLyIpKSxyfV9pbnNlcnQoZSx0LG4pe2lmKDA9PT1lLmxlbmd0aCl7dGhpcy5wbGFjZWhvbGRlcj0hMTtyZXR1cm59aWYobil0aHJvdyBFcnJvcigiQ2F0Y2gtYWxsIG11c3QgYmUgdGhlIGxhc3QgcGFydCBvZiB0aGUgVVJMLiIpO2xldCBvPWVbMF07aWYoby5zdGFydHNXaXRoKCJbIikmJm8uZW5kc1dpdGgoIl0iKSl7bGV0IHI9by5zbGljZSgxLC0xKSxpPSExO2lmKHIuc3RhcnRzV2l0aCgiWyIpJiZyLmVuZHNXaXRoKCJdIikmJihyPXIuc2xpY2UoMSwtMSksaT0hMCksci5zdGFydHNXaXRoKCIuLi4iKSYmKHI9ci5zdWJzdHJpbmcoMyksbj0hMCksci5zdGFydHNXaXRoKCJbIil8fHIuZW5kc1dpdGgoIl0iKSl0aHJvdyBFcnJvcigiU2VnbWVudCBuYW1lcyBtYXkgbm90IHN0YXJ0IG9yIGVuZCB3aXRoIGV4dHJhIGJyYWNrZXRzICgnIityKyInKS4iKTtpZihyLnN0YXJ0c1dpdGgoIi4iKSl0aHJvdyBFcnJvcigiU2VnbWVudCBuYW1lcyBtYXkgbm90IHN0YXJ0IHdpdGggZXJyb25lb3VzIHBlcmlvZHMgKCciK3IrIicpLiIpO2Z1bmN0aW9uIGEoZSxyKXtpZihudWxsIT09ZSYmZSE9PXIpdGhyb3cgRXJyb3IoIllvdSBjYW5ub3QgdXNlIGRpZmZlcmVudCBzbHVnIG5hbWVzIGZvciB0aGUgc2FtZSBkeW5hbWljIHBhdGggKCciK2UrIicgIT09ICciK3IrIicpLiIpO3QuZm9yRWFjaChlPT57aWYoZT09PXIpdGhyb3cgRXJyb3IoJ1lvdSBjYW5ub3QgaGF2ZSB0aGUgc2FtZSBzbHVnIG5hbWUgIicrcisnIiByZXBlYXQgd2l0aGluIGEgc2luZ2xlIGR5bmFtaWMgcGF0aCcpO2lmKGUucmVwbGFjZSgvXFcvZywiIik9PT1vLnJlcGxhY2UoL1xXL2csIiIpKXRocm93IEVycm9yKCdZb3UgY2Fubm90IGhhdmUgdGhlIHNsdWcgbmFtZXMgIicrZSsnIiBhbmQgIicrcisnIiBkaWZmZXIgb25seSBieSBub24td29yZCBzeW1ib2xzIHdpdGhpbiBhIHNpbmdsZSBkeW5hbWljIHBhdGgnKX0pLHQucHVzaChyKX1pZihuKXtpZihpKXtpZihudWxsIT10aGlzLnJlc3RTbHVnTmFtZSl0aHJvdyBFcnJvcignWW91IGNhbm5vdCB1c2UgYm90aCBhbiByZXF1aXJlZCBhbmQgb3B0aW9uYWwgY2F0Y2gtYWxsIHJvdXRlIGF0IHRoZSBzYW1lIGxldmVsICgiWy4uLicrdGhpcy5yZXN0U2x1Z05hbWUrJ10iIGFuZCAiJytlWzBdKyciICkuJyk7YSh0aGlzLm9wdGlvbmFsUmVzdFNsdWdOYW1lLHIpLHRoaXMub3B0aW9uYWxSZXN0U2x1Z05hbWU9cixvPSJbWy4uLl1dIn1lbHNle2lmKG51bGwhPXRoaXMub3B0aW9uYWxSZXN0U2x1Z05hbWUpdGhyb3cgRXJyb3IoJ1lvdSBjYW5ub3QgdXNlIGJvdGggYW4gb3B0aW9uYWwgYW5kIHJlcXVpcmVkIGNhdGNoLWFsbCByb3V0ZSBhdCB0aGUgc2FtZSBsZXZlbCAoIltbLi4uJyt0aGlzLm9wdGlvbmFsUmVzdFNsdWdOYW1lKyddXSIgYW5kICInK2VbMF0rJyIpLicpO2EodGhpcy5yZXN0U2x1Z05hbWUsciksdGhpcy5yZXN0U2x1Z05hbWU9cixvPSJbLi4uXSJ9fWVsc2V7aWYoaSl0aHJvdyBFcnJvcignT3B0aW9uYWwgcm91dGUgcGFyYW1ldGVycyBhcmUgbm90IHlldCBzdXBwb3J0ZWQgKCInK2VbMF0rJyIpLicpO2EodGhpcy5zbHVnTmFtZSxyKSx0aGlzLnNsdWdOYW1lPXIsbz0iW10ifX10aGlzLmNoaWxkcmVuLmhhcyhvKXx8dGhpcy5jaGlsZHJlbi5zZXQobyxuZXcgciksdGhpcy5jaGlsZHJlbi5nZXQobykuX2luc2VydChlLnNsaWNlKDEpLHQsbil9Y29uc3RydWN0b3IoKXt0aGlzLnBsYWNlaG9sZGVyPSEwLHRoaXMuY2hpbGRyZW49bmV3IE1hcCx0aGlzLnNsdWdOYW1lPW51bGwsdGhpcy5yZXN0U2x1Z05hbWU9bnVsbCx0aGlzLm9wdGlvbmFsUmVzdFNsdWdOYW1lPW51bGx9fWZ1bmN0aW9uIG4oZSl7bGV0IHQ9bmV3IHI7cmV0dXJuIGUuZm9yRWFjaChlPT50Lmluc2VydChlKSksdC5zbW9vc2goKX19LDUzMzQ0OmZ1bmN0aW9uKGUsdCl7InVzZSBzdHJpY3QiO2xldCByO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHIse2VudW1lcmFibGU6ITAsZ2V0OnRbcl19KX0odCx7ZGVmYXVsdDpmdW5jdGlvbigpe3JldHVybiBufSxzZXRDb25maWc6ZnVuY3Rpb24oKXtyZXR1cm4gb319KTtsZXQgbj0oKT0+cjtmdW5jdGlvbiBvKGUpe3I9ZX19LDU3Mjc5OmZ1bmN0aW9uKGUsdCl7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIoZSl7cmV0dXJuIigiPT09ZVswXSYmZS5lbmRzV2l0aCgiKSIpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHIse2VudW1lcmFibGU6ITAsZ2V0OnRbcl19KX0odCx7REVGQVVMVF9TRUdNRU5UX0tFWTpmdW5jdGlvbigpe3JldHVybiBvfSxQQUdFX1NFR01FTlRfS0VZOmZ1bmN0aW9uKCl7cmV0dXJuIG59LGlzR3JvdXBTZWdtZW50OmZ1bmN0aW9uKCl7cmV0dXJuIHJ9fSk7bGV0IG49Il9fUEFHRV9fIixvPSJfX0RFRkFVTFRfXyJ9LDQyNTk5OmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJkZWZhdWx0Iix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaX19KTtsZXQgbj1yKDc1MjcxKSxvPW4udXNlTGF5b3V0RWZmZWN0LGE9bi51c2VFZmZlY3Q7ZnVuY3Rpb24gaShlKXtsZXR7aGVhZE1hbmFnZXI6dCxyZWR1Y2VDb21wb25lbnRzVG9TdGF0ZTpyfT1lO2Z1bmN0aW9uIGkoKXtpZih0JiZ0Lm1vdW50ZWRJbnN0YW5jZXMpe2xldCBvPW4uQ2hpbGRyZW4udG9BcnJheShBcnJheS5mcm9tKHQubW91bnRlZEluc3RhbmNlcykuZmlsdGVyKEJvb2xlYW4pKTt0LnVwZGF0ZUhlYWQocihvLGUpKX19cmV0dXJuIG8oKCk9Pnt2YXIgcjtyZXR1cm4gbnVsbD09dHx8bnVsbD09KHI9dC5tb3VudGVkSW5zdGFuY2VzKXx8ci5hZGQoZS5jaGlsZHJlbiksKCk9Pnt2YXIgcjtudWxsPT10fHxudWxsPT0ocj10Lm1vdW50ZWRJbnN0YW5jZXMpfHxyLmRlbGV0ZShlLmNoaWxkcmVuKX19KSxvKCgpPT4odCYmKHQuX3BlbmRpbmdVcGRhdGU9aSksKCk9Pnt0JiYodC5fcGVuZGluZ1VwZGF0ZT1pKX0pKSxhKCgpPT4odCYmdC5fcGVuZGluZ1VwZGF0ZSYmKHQuX3BlbmRpbmdVcGRhdGUoKSx0Ll9wZW5kaW5nVXBkYXRlPW51bGwpLCgpPT57dCYmdC5fcGVuZGluZ1VwZGF0ZSYmKHQuX3BlbmRpbmdVcGRhdGUoKSx0Ll9wZW5kaW5nVXBkYXRlPW51bGwpfSkpLG51bGx9fSw3MzAwNjpmdW5jdGlvbihlLHQpeyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdClPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLHtlbnVtZXJhYmxlOiEwLGdldDp0W3JdfSl9KHQse0RlY29kZUVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIGh9LE1pZGRsZXdhcmVOb3RGb3VuZEVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIHl9LE1pc3NpbmdTdGF0aWNQYWdlOmZ1bmN0aW9uKCl7cmV0dXJuIGd9LE5vcm1hbGl6ZUVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIG19LFBhZ2VOb3RGb3VuZEVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIF99LFNQOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LFNUOmZ1bmN0aW9uKCl7cmV0dXJuIHB9LFdFQl9WSVRBTFM6ZnVuY3Rpb24oKXtyZXR1cm4gcn0sZXhlY09uY2U6ZnVuY3Rpb24oKXtyZXR1cm4gbn0sZ2V0RGlzcGxheU5hbWU6ZnVuY3Rpb24oKXtyZXR1cm4gbH0sZ2V0TG9jYXRpb25PcmlnaW46ZnVuY3Rpb24oKXtyZXR1cm4gaX0sZ2V0VVJMOmZ1bmN0aW9uKCl7cmV0dXJuIHV9LGlzQWJzb2x1dGVVcmw6ZnVuY3Rpb24oKXtyZXR1cm4gYX0saXNSZXNTZW50OmZ1bmN0aW9uKCl7cmV0dXJuIHN9LGxvYWRHZXRJbml0aWFsUHJvcHM6ZnVuY3Rpb24oKXtyZXR1cm4gZn0sbm9ybWFsaXplUmVwZWF0ZWRTbGFzaGVzOmZ1bmN0aW9uKCl7cmV0dXJuIGN9LHN0cmluZ2lmeUVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIGJ9fSk7bGV0IHI9WyJDTFMiLCJGQ1AiLCJGSUQiLCJJTlAiLCJMQ1AiLCJUVEZCIl07ZnVuY3Rpb24gbihlKXtsZXQgdCxyPSExO3JldHVybiBmdW5jdGlvbigpe2Zvcih2YXIgbj1hcmd1bWVudHMubGVuZ3RoLG89QXJyYXkobiksYT0wO2E8bjthKyspb1thXT1hcmd1bWVudHNbYV07cmV0dXJuIHJ8fChyPSEwLHQ9ZSguLi5vKSksdH19bGV0IG89L15bYS16QS1aXVthLXpBLVpcZCtcLS5dKj86LyxhPWU9Pm8udGVzdChlKTtmdW5jdGlvbiBpKCl7bGV0e3Byb3RvY29sOmUsaG9zdG5hbWU6dCxwb3J0OnJ9PXdpbmRvdy5sb2NhdGlvbjtyZXR1cm4gZSsiLy8iK3QrKHI/IjoiK3I6IiIpfWZ1bmN0aW9uIHUoKXtsZXR7aHJlZjplfT13aW5kb3cubG9jYXRpb24sdD1pKCk7cmV0dXJuIGUuc3Vic3RyaW5nKHQubGVuZ3RoKX1mdW5jdGlvbiBsKGUpe3JldHVybiJzdHJpbmciPT10eXBlb2YgZT9lOmUuZGlzcGxheU5hbWV8fGUubmFtZXx8IlVua25vd24ifWZ1bmN0aW9uIHMoZSl7cmV0dXJuIGUuZmluaXNoZWR8fGUuaGVhZGVyc1NlbnR9ZnVuY3Rpb24gYyhlKXtsZXQgdD1lLnNwbGl0KCI/Iik7cmV0dXJuIHRbMF0ucmVwbGFjZSgvXFwvZywiLyIpLnJlcGxhY2UoL1wvXC8rL2csIi8iKSsodFsxXT8iPyIrdC5zbGljZSgxKS5qb2luKCI/Iik6IiIpfWFzeW5jIGZ1bmN0aW9uIGYoZSx0KXtsZXQgcj10LnJlc3x8dC5jdHgmJnQuY3R4LnJlcztpZighZS5nZXRJbml0aWFsUHJvcHMpcmV0dXJuIHQuY3R4JiZ0LkNvbXBvbmVudD97cGFnZVByb3BzOmF3YWl0IGYodC5Db21wb25lbnQsdC5jdHgpfTp7fTtsZXQgbj1hd2FpdCBlLmdldEluaXRpYWxQcm9wcyh0KTtpZihyJiZzKHIpKXJldHVybiBuO2lmKCFuKXRocm93IEVycm9yKCciJytsKGUpKycuZ2V0SW5pdGlhbFByb3BzKCkiIHNob3VsZCByZXNvbHZlIHRvIGFuIG9iamVjdC4gQnV0IGZvdW5kICInK24rJyIgaW5zdGVhZC4nKTtyZXR1cm4gbn1sZXQgZD0idW5kZWZpbmVkIiE9dHlwZW9mIHBlcmZvcm1hbmNlLHA9ZCYmWyJtYXJrIiwibWVhc3VyZSIsImdldEVudHJpZXNCeU5hbWUiXS5ldmVyeShlPT4iZnVuY3Rpb24iPT10eXBlb2YgcGVyZm9ybWFuY2VbZV0pO2NsYXNzIGggZXh0ZW5kcyBFcnJvcnt9Y2xhc3MgbSBleHRlbmRzIEVycm9ye31jbGFzcyBfIGV4dGVuZHMgRXJyb3J7Y29uc3RydWN0b3IoZSl7c3VwZXIoKSx0aGlzLmNvZGU9IkVOT0VOVCIsdGhpcy5uYW1lPSJQYWdlTm90Rm91bmRFcnJvciIsdGhpcy5tZXNzYWdlPSJDYW5ub3QgZmluZCBtb2R1bGUgZm9yIHBhZ2U6ICIrZX19Y2xhc3MgZyBleHRlbmRzIEVycm9ye2NvbnN0cnVjdG9yKGUsdCl7c3VwZXIoKSx0aGlzLm1lc3NhZ2U9IkZhaWxlZCB0byBsb2FkIHN0YXRpYyBmaWxlIGZvciBwYWdlOiAiK2UrIiAiK3R9fWNsYXNzIHkgZXh0ZW5kcyBFcnJvcntjb25zdHJ1Y3Rvcigpe3N1cGVyKCksdGhpcy5jb2RlPSJFTk9FTlQiLHRoaXMubWVzc2FnZT0iQ2Fubm90IGZpbmQgdGhlIG1pZGRsZXdhcmUgbW9kdWxlIn19ZnVuY3Rpb24gYihlKXtyZXR1cm4gSlNPTi5zdHJpbmdpZnkoe21lc3NhZ2U6ZS5tZXNzYWdlLHN0YWNrOmUuc3RhY2t9KX19LDMzNDk4OmZ1bmN0aW9uKGUsdCl7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwid2Fybk9uY2UiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiByfX0pO2xldCByPWU9Pnt9fSw1MTU1OmZ1bmN0aW9uKGUpe3ZhciB0LHIsbixvLGEsaSx1LGwscyxjLGYsZCxwLGgsbSxfLGcseSxiLFAsdixFLFMsTyxqLHcsUixULE0seCxJLEMsQSxMLE4sRCxrLEYsVSxCLEgsVyxxLEcseixWOyh0PXt9KS5kPWZ1bmN0aW9uKGUscil7Zm9yKHZhciBuIGluIHIpdC5vKHIsbikmJiF0Lm8oZSxuKSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbix7ZW51bWVyYWJsZTohMCxnZXQ6cltuXX0pfSx0Lm89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9LHQucj1mdW5jdGlvbihlKXsidW5kZWZpbmVkIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOiJNb2R1bGUifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pfSx2b2lkIDAhPT10JiYodC5hYj0iLy8iKSxyPXt9LHQucihyKSx0LmQocix7Z2V0Q0xTOmZ1bmN0aW9uKCl7cmV0dXJuIFN9LGdldEZDUDpmdW5jdGlvbigpe3JldHVybiBQfSxnZXRGSUQ6ZnVuY3Rpb24oKXtyZXR1cm4geH0sZ2V0SU5QOmZ1bmN0aW9uKCl7cmV0dXJuIFd9LGdldExDUDpmdW5jdGlvbigpe3JldHVybiBHfSxnZXRUVEZCOmZ1bmN0aW9uKCl7cmV0dXJuIFZ9LG9uQ0xTOmZ1bmN0aW9uKCl7cmV0dXJuIFN9LG9uRkNQOmZ1bmN0aW9uKCl7cmV0dXJuIFB9LG9uRklEOmZ1bmN0aW9uKCl7cmV0dXJuIHh9LG9uSU5QOmZ1bmN0aW9uKCl7cmV0dXJuIFd9LG9uTENQOmZ1bmN0aW9uKCl7cmV0dXJuIEd9LG9uVFRGQjpmdW5jdGlvbigpe3JldHVybiBWfX0pLGw9LTEscz1mdW5jdGlvbihlKXthZGRFdmVudExpc3RlbmVyKCJwYWdlc2hvdyIsZnVuY3Rpb24odCl7dC5wZXJzaXN0ZWQmJihsPXQudGltZVN0YW1wLGUodCkpfSwhMCl9LGM9ZnVuY3Rpb24oKXtyZXR1cm4gd2luZG93LnBlcmZvcm1hbmNlJiZwZXJmb3JtYW5jZS5nZXRFbnRyaWVzQnlUeXBlJiZwZXJmb3JtYW5jZS5nZXRFbnRyaWVzQnlUeXBlKCJuYXZpZ2F0aW9uIilbMF19LGY9ZnVuY3Rpb24oKXt2YXIgZT1jKCk7cmV0dXJuIGUmJmUuYWN0aXZhdGlvblN0YXJ0fHwwfSxkPWZ1bmN0aW9uKGUsdCl7dmFyIHI9YygpLG49Im5hdmlnYXRlIjtyZXR1cm4gbD49MD9uPSJiYWNrLWZvcndhcmQtY2FjaGUiOnImJihuPWRvY3VtZW50LnByZXJlbmRlcmluZ3x8ZigpPjA/InByZXJlbmRlciI6ci50eXBlLnJlcGxhY2UoL18vZywiLSIpKSx7bmFtZTplLHZhbHVlOnZvaWQgMD09PXQ/LTE6dCxyYXRpbmc6Imdvb2QiLGRlbHRhOjAsZW50cmllczpbXSxpZDoidjMtIi5jb25jYXQoRGF0ZS5ub3coKSwiLSIpLmNvbmNhdChNYXRoLmZsb29yKDg5OTk5OTk5OTk5OTkqTWF0aC5yYW5kb20oKSkrMWUxMiksbmF2aWdhdGlvblR5cGU6bn19LHA9ZnVuY3Rpb24oZSx0LHIpe3RyeXtpZihQZXJmb3JtYW5jZU9ic2VydmVyLnN1cHBvcnRlZEVudHJ5VHlwZXMuaW5jbHVkZXMoZSkpe3ZhciBuPW5ldyBQZXJmb3JtYW5jZU9ic2VydmVyKGZ1bmN0aW9uKGUpe3QoZS5nZXRFbnRyaWVzKCkpfSk7cmV0dXJuIG4ub2JzZXJ2ZShPYmplY3QuYXNzaWduKHt0eXBlOmUsYnVmZmVyZWQ6ITB9LHJ8fHt9KSksbn19Y2F0Y2goZSl7fX0saD1mdW5jdGlvbihlLHQpe3ZhciByPWZ1bmN0aW9uIHIobil7InBhZ2VoaWRlIiE9PW4udHlwZSYmImhpZGRlbiIhPT1kb2N1bWVudC52aXNpYmlsaXR5U3RhdGV8fChlKG4pLHQmJihyZW1vdmVFdmVudExpc3RlbmVyKCJ2aXNpYmlsaXR5Y2hhbmdlIixyLCEwKSxyZW1vdmVFdmVudExpc3RlbmVyKCJwYWdlaGlkZSIsciwhMCkpKX07YWRkRXZlbnRMaXN0ZW5lcigidmlzaWJpbGl0eWNoYW5nZSIsciwhMCksYWRkRXZlbnRMaXN0ZW5lcigicGFnZWhpZGUiLHIsITApfSxtPWZ1bmN0aW9uKGUsdCxyLG4pe3ZhciBvLGE7cmV0dXJuIGZ1bmN0aW9uKGkpe3ZhciB1O3QudmFsdWU+PTAmJihpfHxuKSYmKChhPXQudmFsdWUtKG98fDApKXx8dm9pZCAwPT09bykmJihvPXQudmFsdWUsdC5kZWx0YT1hLHQucmF0aW5nPSh1PXQudmFsdWUpPnJbMV0/InBvb3IiOnU+clswXT8ibmVlZHMtaW1wcm92ZW1lbnQiOiJnb29kIixlKHQpKX19LF89LTEsZz1mdW5jdGlvbigpe3JldHVybiJoaWRkZW4iIT09ZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlfHxkb2N1bWVudC5wcmVyZW5kZXJpbmc/MS8wOjB9LHk9ZnVuY3Rpb24oKXtoKGZ1bmN0aW9uKGUpe189ZS50aW1lU3RhbXB9LCEwKX0sYj1mdW5jdGlvbigpe3JldHVybiBfPDAmJihfPWcoKSx5KCkscyhmdW5jdGlvbigpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXtfPWcoKSx5KCl9LDApfSkpLHtnZXQgZmlyc3RIaWRkZW5UaW1lKCl7cmV0dXJuIF99fX0sUD1mdW5jdGlvbihlLHQpe3Q9dHx8e307dmFyIHIsbj1bMTgwMCwzZTNdLG89YigpLGE9ZCgiRkNQIiksaT1mdW5jdGlvbihlKXtlLmZvckVhY2goZnVuY3Rpb24oZSl7ImZpcnN0LWNvbnRlbnRmdWwtcGFpbnQiPT09ZS5uYW1lJiYobCYmbC5kaXNjb25uZWN0KCksZS5zdGFydFRpbWU8by5maXJzdEhpZGRlblRpbWUmJihhLnZhbHVlPWUuc3RhcnRUaW1lLWYoKSxhLmVudHJpZXMucHVzaChlKSxyKCEwKSkpfSl9LHU9d2luZG93LnBlcmZvcm1hbmNlJiZ3aW5kb3cucGVyZm9ybWFuY2UuZ2V0RW50cmllc0J5TmFtZSYmd2luZG93LnBlcmZvcm1hbmNlLmdldEVudHJpZXNCeU5hbWUoImZpcnN0LWNvbnRlbnRmdWwtcGFpbnQiKVswXSxsPXU/bnVsbDpwKCJwYWludCIsaSk7KHV8fGwpJiYocj1tKGUsYSxuLHQucmVwb3J0QWxsQ2hhbmdlcyksdSYmaShbdV0pLHMoZnVuY3Rpb24obyl7cj1tKGUsYT1kKCJGQ1AiKSxuLHQucmVwb3J0QWxsQ2hhbmdlcykscmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCl7cmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCl7YS52YWx1ZT1wZXJmb3JtYW5jZS5ub3coKS1vLnRpbWVTdGFtcCxyKCEwKX0pfSl9KSl9LHY9ITEsRT0tMSxTPWZ1bmN0aW9uKGUsdCl7dD10fHx7fTt2YXIgcj1bLjEsLjI1XTt2fHwoUChmdW5jdGlvbihlKXtFPWUudmFsdWV9KSx2PSEwKTt2YXIgbixvPWZ1bmN0aW9uKHQpe0U+LTEmJmUodCl9LGE9ZCgiQ0xTIiwwKSxpPTAsdT1bXSxsPWZ1bmN0aW9uKGUpe2UuZm9yRWFjaChmdW5jdGlvbihlKXtpZighZS5oYWRSZWNlbnRJbnB1dCl7dmFyIHQ9dVswXSxyPXVbdS5sZW5ndGgtMV07aSYmZS5zdGFydFRpbWUtci5zdGFydFRpbWU8MWUzJiZlLnN0YXJ0VGltZS10LnN0YXJ0VGltZTw1ZTM/KGkrPWUudmFsdWUsdS5wdXNoKGUpKTooaT1lLnZhbHVlLHU9W2VdKSxpPmEudmFsdWUmJihhLnZhbHVlPWksYS5lbnRyaWVzPXUsbigpKX19KX0sYz1wKCJsYXlvdXQtc2hpZnQiLGwpO2MmJihuPW0obyxhLHIsdC5yZXBvcnRBbGxDaGFuZ2VzKSxoKGZ1bmN0aW9uKCl7bChjLnRha2VSZWNvcmRzKCkpLG4oITApfSkscyhmdW5jdGlvbigpe2k9MCxFPS0xLG49bShvLGE9ZCgiQ0xTIiwwKSxyLHQucmVwb3J0QWxsQ2hhbmdlcyl9KSl9LE89e3Bhc3NpdmU6ITAsY2FwdHVyZTohMH0saj1uZXcgRGF0ZSx3PWZ1bmN0aW9uKGUsdCl7bnx8KG49dCxvPWUsYT1uZXcgRGF0ZSxNKHJlbW92ZUV2ZW50TGlzdGVuZXIpLFIoKSl9LFI9ZnVuY3Rpb24oKXtpZihvPj0wJiZvPGEtail7dmFyIGU9e2VudHJ5VHlwZToiZmlyc3QtaW5wdXQiLG5hbWU6bi50eXBlLHRhcmdldDpuLnRhcmdldCxjYW5jZWxhYmxlOm4uY2FuY2VsYWJsZSxzdGFydFRpbWU6bi50aW1lU3RhbXAscHJvY2Vzc2luZ1N0YXJ0Om4udGltZVN0YW1wK299O2kuZm9yRWFjaChmdW5jdGlvbih0KXt0KGUpfSksaT1bXX19LFQ9ZnVuY3Rpb24oZSl7aWYoZS5jYW5jZWxhYmxlKXt2YXIgdCxyLG4sbz0oZS50aW1lU3RhbXA+MWUxMj9uZXcgRGF0ZTpwZXJmb3JtYW5jZS5ub3coKSktZS50aW1lU3RhbXA7InBvaW50ZXJkb3duIj09ZS50eXBlPyh0PWZ1bmN0aW9uKCl7dyhvLGUpLG4oKX0scj1mdW5jdGlvbigpe24oKX0sbj1mdW5jdGlvbigpe3JlbW92ZUV2ZW50TGlzdGVuZXIoInBvaW50ZXJ1cCIsdCxPKSxyZW1vdmVFdmVudExpc3RlbmVyKCJwb2ludGVyY2FuY2VsIixyLE8pfSxhZGRFdmVudExpc3RlbmVyKCJwb2ludGVydXAiLHQsTyksYWRkRXZlbnRMaXN0ZW5lcigicG9pbnRlcmNhbmNlbCIscixPKSk6dyhvLGUpfX0sTT1mdW5jdGlvbihlKXtbIm1vdXNlZG93biIsImtleWRvd24iLCJ0b3VjaHN0YXJ0IiwicG9pbnRlcmRvd24iXS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3JldHVybiBlKHQsVCxPKX0pfSx4PWZ1bmN0aW9uKGUsdCl7dD10fHx7fTt2YXIgcixhPVsxMDAsMzAwXSx1PWIoKSxsPWQoIkZJRCIpLGM9ZnVuY3Rpb24oZSl7ZS5zdGFydFRpbWU8dS5maXJzdEhpZGRlblRpbWUmJihsLnZhbHVlPWUucHJvY2Vzc2luZ1N0YXJ0LWUuc3RhcnRUaW1lLGwuZW50cmllcy5wdXNoKGUpLHIoITApKX0sZj1mdW5jdGlvbihlKXtlLmZvckVhY2goYyl9LF89cCgiZmlyc3QtaW5wdXQiLGYpO3I9bShlLGwsYSx0LnJlcG9ydEFsbENoYW5nZXMpLF8mJmgoZnVuY3Rpb24oKXtmKF8udGFrZVJlY29yZHMoKSksXy5kaXNjb25uZWN0KCl9LCEwKSxfJiZzKGZ1bmN0aW9uKCl7cj1tKGUsbD1kKCJGSUQiKSxhLHQucmVwb3J0QWxsQ2hhbmdlcyksaT1bXSxvPS0xLG49bnVsbCxNKGFkZEV2ZW50TGlzdGVuZXIpLGkucHVzaChjKSxSKCl9KX0sST0wLEM9MS8wLEE9MCxMPWZ1bmN0aW9uKGUpe2UuZm9yRWFjaChmdW5jdGlvbihlKXtlLmludGVyYWN0aW9uSWQmJihDPU1hdGgubWluKEMsZS5pbnRlcmFjdGlvbklkKSxJPShBPU1hdGgubWF4KEEsZS5pbnRlcmFjdGlvbklkKSk/KEEtQykvNysxOjApfSl9LE49ZnVuY3Rpb24oKXtyZXR1cm4gdT9JOnBlcmZvcm1hbmNlLmludGVyYWN0aW9uQ291bnR8fDB9LEQ9ZnVuY3Rpb24oKXsiaW50ZXJhY3Rpb25Db3VudCJpbiBwZXJmb3JtYW5jZXx8dXx8KHU9cCgiZXZlbnQiLEwse3R5cGU6ImV2ZW50IixidWZmZXJlZDohMCxkdXJhdGlvblRocmVzaG9sZDowfSkpfSxrPTAsRj1mdW5jdGlvbigpe3JldHVybiBOKCkta30sVT1bXSxCPXt9LEg9ZnVuY3Rpb24oZSl7dmFyIHQ9VVtVLmxlbmd0aC0xXSxyPUJbZS5pbnRlcmFjdGlvbklkXTtpZihyfHxVLmxlbmd0aDwxMHx8ZS5kdXJhdGlvbj50LmxhdGVuY3kpe2lmKHIpci5lbnRyaWVzLnB1c2goZSksci5sYXRlbmN5PU1hdGgubWF4KHIubGF0ZW5jeSxlLmR1cmF0aW9uKTtlbHNle3ZhciBuPXtpZDplLmludGVyYWN0aW9uSWQsbGF0ZW5jeTplLmR1cmF0aW9uLGVudHJpZXM6W2VdfTtCW24uaWRdPW4sVS5wdXNoKG4pfVUuc29ydChmdW5jdGlvbihlLHQpe3JldHVybiB0LmxhdGVuY3ktZS5sYXRlbmN5fSksVS5zcGxpY2UoMTApLmZvckVhY2goZnVuY3Rpb24oZSl7ZGVsZXRlIEJbZS5pZF19KX19LFc9ZnVuY3Rpb24oZSx0KXt0PXR8fHt9O3ZhciByPVsyMDAsNTAwXTtEKCk7dmFyIG4sbz1kKCJJTlAiKSxhPWZ1bmN0aW9uKGUpe2UuZm9yRWFjaChmdW5jdGlvbihlKXtlLmludGVyYWN0aW9uSWQmJkgoZSksImZpcnN0LWlucHV0IiE9PWUuZW50cnlUeXBlfHxVLnNvbWUoZnVuY3Rpb24odCl7cmV0dXJuIHQuZW50cmllcy5zb21lKGZ1bmN0aW9uKHQpe3JldHVybiBlLmR1cmF0aW9uPT09dC5kdXJhdGlvbiYmZS5zdGFydFRpbWU9PT10LnN0YXJ0VGltZX0pfSl8fEgoZSl9KTt2YXIgdCxyPSh0PU1hdGgubWluKFUubGVuZ3RoLTEsTWF0aC5mbG9vcihGKCkvNTApKSxVW3RdKTtyJiZyLmxhdGVuY3khPT1vLnZhbHVlJiYoby52YWx1ZT1yLmxhdGVuY3ksby5lbnRyaWVzPXIuZW50cmllcyxuKCkpfSxpPXAoImV2ZW50IixhLHtkdXJhdGlvblRocmVzaG9sZDp0LmR1cmF0aW9uVGhyZXNob2xkfHw0MH0pO249bShlLG8scix0LnJlcG9ydEFsbENoYW5nZXMpLGkmJihpLm9ic2VydmUoe3R5cGU6ImZpcnN0LWlucHV0IixidWZmZXJlZDohMH0pLGgoZnVuY3Rpb24oKXthKGkudGFrZVJlY29yZHMoKSksby52YWx1ZTwwJiZGKCk+MCYmKG8udmFsdWU9MCxvLmVudHJpZXM9W10pLG4oITApfSkscyhmdW5jdGlvbigpe1U9W10saz1OKCksbj1tKGUsbz1kKCJJTlAiKSxyLHQucmVwb3J0QWxsQ2hhbmdlcyl9KSl9LHE9e30sRz1mdW5jdGlvbihlLHQpe3Q9dHx8e307dmFyIHIsbj1bMjUwMCw0ZTNdLG89YigpLGE9ZCgiTENQIiksaT1mdW5jdGlvbihlKXt2YXIgdD1lW2UubGVuZ3RoLTFdO2lmKHQpe3ZhciBuPXQuc3RhcnRUaW1lLWYoKTtuPG8uZmlyc3RIaWRkZW5UaW1lJiYoYS52YWx1ZT1uLGEuZW50cmllcz1bdF0scigpKX19LHU9cCgibGFyZ2VzdC1jb250ZW50ZnVsLXBhaW50IixpKTtpZih1KXtyPW0oZSxhLG4sdC5yZXBvcnRBbGxDaGFuZ2VzKTt2YXIgbD1mdW5jdGlvbigpe3FbYS5pZF18fChpKHUudGFrZVJlY29yZHMoKSksdS5kaXNjb25uZWN0KCkscVthLmlkXT0hMCxyKCEwKSl9O1sia2V5ZG93biIsImNsaWNrIl0uZm9yRWFjaChmdW5jdGlvbihlKXthZGRFdmVudExpc3RlbmVyKGUsbCx7b25jZTohMCxjYXB0dXJlOiEwfSl9KSxoKGwsITApLHMoZnVuY3Rpb24obyl7cj1tKGUsYT1kKCJMQ1AiKSxuLHQucmVwb3J0QWxsQ2hhbmdlcykscmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCl7cmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCl7YS52YWx1ZT1wZXJmb3JtYW5jZS5ub3coKS1vLnRpbWVTdGFtcCxxW2EuaWRdPSEwLHIoITApfSl9KX0pfX0sej1mdW5jdGlvbiBlKHQpe2RvY3VtZW50LnByZXJlbmRlcmluZz9hZGRFdmVudExpc3RlbmVyKCJwcmVyZW5kZXJpbmdjaGFuZ2UiLGZ1bmN0aW9uKCl7cmV0dXJuIGUodCl9LCEwKToiY29tcGxldGUiIT09ZG9jdW1lbnQucmVhZHlTdGF0ZT9hZGRFdmVudExpc3RlbmVyKCJsb2FkIixmdW5jdGlvbigpe3JldHVybiBlKHQpfSwhMCk6c2V0VGltZW91dCh0LDApfSxWPWZ1bmN0aW9uKGUsdCl7dD10fHx7fTt2YXIgcj1bODAwLDE4MDBdLG49ZCgiVFRGQiIpLG89bShlLG4scix0LnJlcG9ydEFsbENoYW5nZXMpO3ooZnVuY3Rpb24oKXt2YXIgYT1jKCk7aWYoYSl7aWYobi52YWx1ZT1NYXRoLm1heChhLnJlc3BvbnNlU3RhcnQtZigpLDApLG4udmFsdWU8MHx8bi52YWx1ZT5wZXJmb3JtYW5jZS5ub3coKSlyZXR1cm47bi5lbnRyaWVzPVthXSxvKCEwKSxzKGZ1bmN0aW9uKCl7KG89bShlLG49ZCgiVFRGQiIsMCkscix0LnJlcG9ydEFsbENoYW5nZXMpKSghMCl9KX19KX0sZS5leHBvcnRzPXJ9LDI5NTY2OmZ1bmN0aW9uKGUsdCl7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIoZSl7cmV0dXJuIi9hcGkiPT09ZXx8ISEobnVsbD09ZT92b2lkIDA6ZS5zdGFydHNXaXRoKCIvYXBpLyIpKX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsImlzQVBJUm91dGUiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiByfX0pfSwxODYxODpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHIse2VudW1lcmFibGU6ITAsZ2V0OnRbcl19KX0odCx7ZGVmYXVsdDpmdW5jdGlvbigpe3JldHVybiBvfSxnZXRQcm9wZXJFcnJvcjpmdW5jdGlvbigpe3JldHVybiBhfX0pO2xldCBuPXIoMzYzMTgpO2Z1bmN0aW9uIG8oZSl7cmV0dXJuIm9iamVjdCI9PXR5cGVvZiBlJiZudWxsIT09ZSYmIm5hbWUiaW4gZSYmIm1lc3NhZ2UiaW4gZX1mdW5jdGlvbiBhKGUpe3JldHVybiBvKGUpP2U6RXJyb3IoKDAsbi5pc1BsYWluT2JqZWN0KShlKT9KU09OLnN0cmluZ2lmeShlKTplKyIiKX19LDU3NTk0OmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpT2JqZWN0LmRlZmluZVByb3BlcnR5KGUscix7ZW51bWVyYWJsZTohMCxnZXQ6dFtyXX0pfSh0LHtJTlRFUkNFUFRJT05fUk9VVEVfTUFSS0VSUzpmdW5jdGlvbigpe3JldHVybiBvfSxleHRyYWN0SW50ZXJjZXB0aW9uUm91dGVJbmZvcm1hdGlvbjpmdW5jdGlvbigpe3JldHVybiBpfSxpc0ludGVyY2VwdGlvblJvdXRlQXBwUGF0aDpmdW5jdGlvbigpe3JldHVybiBhfX0pO2xldCBuPXIoMzM2NjYpLG89WyIoLi4pKC4uKSIsIiguKSIsIiguLikiLCIoLi4uKSJdO2Z1bmN0aW9uIGEoZSl7cmV0dXJuIHZvaWQgMCE9PWUuc3BsaXQoIi8iKS5maW5kKGU9Pm8uZmluZCh0PT5lLnN0YXJ0c1dpdGgodCkpKX1mdW5jdGlvbiBpKGUpe2xldCB0LHIsYTtmb3IobGV0IG4gb2YgZS5zcGxpdCgiLyIpKWlmKHI9by5maW5kKGU9Pm4uc3RhcnRzV2l0aChlKSkpe1t0LGFdPWUuc3BsaXQociwyKTticmVha31pZighdHx8IXJ8fCFhKXRocm93IEVycm9yKGBJbnZhbGlkIGludGVyY2VwdGlvbiByb3V0ZTogJHtlfS4gTXVzdCBiZSBpbiB0aGUgZm9ybWF0IC88aW50ZXJjZXB0aW5nIHJvdXRlPi8oLi58Li4ufC4uKSguLikvPGludGVyY2VwdGVkIHJvdXRlPmApO3N3aXRjaCh0PSgwLG4ubm9ybWFsaXplQXBwUGF0aCkodCkscil7Y2FzZSIoLikiOmE9Ii8iPT09dD9gLyR7YX1gOnQrIi8iK2E7YnJlYWs7Y2FzZSIoLi4pIjppZigiLyI9PT10KXRocm93IEVycm9yKGBJbnZhbGlkIGludGVyY2VwdGlvbiByb3V0ZTogJHtlfS4gQ2Fubm90IHVzZSAoLi4pIG1hcmtlciBhdCB0aGUgcm9vdCBsZXZlbCwgdXNlICguKSBpbnN0ZWFkLmApO2E9dC5zcGxpdCgiLyIpLnNsaWNlKDAsLTEpLmNvbmNhdChhKS5qb2luKCIvIik7YnJlYWs7Y2FzZSIoLi4uKSI6YT0iLyIrYTticmVhaztjYXNlIiguLikoLi4pIjpsZXQgaT10LnNwbGl0KCIvIik7aWYoaS5sZW5ndGg8PTIpdGhyb3cgRXJyb3IoYEludmFsaWQgaW50ZXJjZXB0aW9uIHJvdXRlOiAke2V9LiBDYW5ub3QgdXNlICguLikoLi4pIG1hcmtlciBhdCB0aGUgcm9vdCBsZXZlbCBvciBvbmUgbGV2ZWwgdXAuYCk7YT1pLnNsaWNlKDAsLTIpLmNvbmNhdChhKS5qb2luKCIvIik7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcigiSW52YXJpYW50OiB1bmV4cGVjdGVkIG1hcmtlciIpfXJldHVybntpbnRlcmNlcHRpbmdSb3V0ZTp0LGludGVyY2VwdGVkUm91dGU6YX19fSwzNDM4MjpmdW5jdGlvbigpe30sNDI0MzA6ZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBuKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1yLnIodCksci5kKHQse186ZnVuY3Rpb24oKXtyZXR1cm4gbn0sX2ludGVyb3BfcmVxdWlyZV9kZWZhdWx0OmZ1bmN0aW9uKCl7cmV0dXJuIG59fSl9LDExNzc4OmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gbihlKXtpZigiZnVuY3Rpb24iIT10eXBlb2YgV2Vha01hcClyZXR1cm4gbnVsbDt2YXIgdD1uZXcgV2Vha01hcCxyPW5ldyBXZWFrTWFwO3JldHVybihuPWZ1bmN0aW9uKGUpe3JldHVybiBlP3I6dH0pKGUpfWZ1bmN0aW9uIG8oZSx0KXtpZighdCYmZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO2lmKG51bGw9PT1lfHwib2JqZWN0IiE9dHlwZW9mIGUmJiJmdW5jdGlvbiIhPXR5cGVvZiBlKXJldHVybntkZWZhdWx0OmV9O3ZhciByPW4odCk7aWYociYmci5oYXMoZSkpcmV0dXJuIHIuZ2V0KGUpO3ZhciBvPXtfX3Byb3RvX186bnVsbH0sYT1PYmplY3QuZGVmaW5lUHJvcGVydHkmJk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7Zm9yKHZhciBpIGluIGUpaWYoImRlZmF1bHQiIT09aSYmT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsaSkpe3ZhciB1PWE/T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLGkpOm51bGw7dSYmKHUuZ2V0fHx1LnNldCk/T2JqZWN0LmRlZmluZVByb3BlcnR5KG8saSx1KTpvW2ldPWVbaV19cmV0dXJuIG8uZGVmYXVsdD1lLHImJnIuc2V0KGUsbyksb31yLnIodCksci5kKHQse186ZnVuY3Rpb24oKXtyZXR1cm4gb30sX2ludGVyb3BfcmVxdWlyZV93aWxkY2FyZDpmdW5jdGlvbigpe3JldHVybiBvfX0pfX0sZnVuY3Rpb24oZSl7ZS5PKDAsWzc3NF0sZnVuY3Rpb24oKXtyZXR1cm4gZShlLnM9NjMxNzgpfSksX05fRT1lLk8oKX1dKTs=",    //
     "application/javascript", //
     "/_next/static/chunks/main-17dfdc027c05ed9d.js/", //
};
}
