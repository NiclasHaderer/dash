
#pragma once
#include "files.hpp"
namespace duckdb {
const File FILE_NEXT_STATIC_CHUNKS_APP_LAYOUT_C88B67B275763973_JS = {
     // Content
     ""
     ""
     ""
     "JndW1lbnRzWzFdJiZhcmd1bWVudHNbMV07cmV0dXJuIGZ1bmN0aW9uKGUpe2xldCB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV0sbj1lLmNvbmZpZztzd2l0Y2goZS50eXBlKXtjYXNlImR1Y2tkYi1vdmVyLWh0dHAiOnJldHVybiJDb25uZWN0ZWQgdG8gRHVja0RCIHZpYSAiLmNvbmNhdChuLnVybCwiICIpLmNvbmNhdCh0PyIoIi5jb25jYXQobi51c2VUb2tlbj8iVG9rZW46ICIrbi50b2tlbjoiTm8gYXV0aGVudGljYXRpb24iLCIpIik6IiIpO2Nhc2UiZHVja2RiLXdhc20iOnJldHVybiJEdWNrREIgV0FTTTogIi5jb25jYXQobi5uYW1lKTtjYXNlImR1Y2tkYi13YXNtLW1vdGhlcmR1Y2siOnJldHVybiJEdWNrREIgV0FTTSAoTW90aGVyZHVjayk6ICIuY29uY2F0KG4ubmFtZSl9fShrKGUpLHQpfSh0LCExKTt2LkFtLnN1Y2Nlc3MocyksYXdhaXQgbmV3IFByb21pc2UoZT0+c2V0VGltZW91dChlLDFlMykpLDA9PT1PYmplY3Qua2V5cyhjLlJ4LmdldFN0YXRlKCkucmVsYXRpb25zKS5sZW5ndGgmJmZ1bmN0aW9uKGUpe2xldCB0PSgwLGIudykoKTsoMCxjLlJ4LmdldFN0YXRlKCkuc2hvd1JlbGF0aW9uRnJvbVNvdXJjZSkoZSx7dHlwZToicXVlcnkiLGJhc2VRdWVyeToiLS0gRGlyZWN0bHkgcXVlcnkgUGFycXVldCBmaWxlIGluIFMzXG5TRUxFQ1RcbnN0YXRpb25fbmFtZSxcbmNvdW50KCopIEFTIG51bV9zZXJ2aWNlc1xuRlJPTSAnczM6Ly9kdWNrZGItYmxvYnMvdHJhaW5fc2VydmljZXMucGFycXVldCdcbi0tIEZST00gdHJhaW5fc2VydmljZXNcbkdST1VQIEJZIEFMTFxuT1JERVIgQlkgbnVtX3NlcnZpY2VzIERFU0NcbkxJTUlUIDEwOyIsaWQ6dCxuYW1lOiJUcmFpbiBTdGF0aW9uIFNlcnZpY2VzIn0scC56VCl9KHIuSS5nZXRJbnN0YW5jZSgpLmdldERhdGFiYXNlQ29ubmVjdGlvbigpLmlkKX1yZXR1cm4oMCxpLnVzZUVmZmVjdCkoKCk9PntsJiZqKCl9LFtsXSksKDAscy5qc3hzKShzLkZyYWdtZW50LHtjaGlsZHJlbjpbdCwoMCxzLmpzeCkoZWkse29wZW46ZCxmb3JjZU9wZW46dSxvbk9wZW5DaGFuZ2U6aCxvblNwZWNTYXZlOnd9KV19KX0kLmRpc3BsYXlOYW1lPUguVlkuZGlzcGxheU5hbWU7dmFyIGVyPW4oMzEyNTkpO2Z1bmN0aW9uIGVhKGUpe2xldHtjaGlsZHJlbjp0LC4uLm59PWU7cmV0dXJuKDAscy5qc3gpKGVyLmYsey4uLm4sY2hpbGRyZW46dH0pfWZ1bmN0aW9uIGVvKGUpe2xldHtjaGlsZHJlbjp0fT1lO3JldHVybigwLHMuanN4cykoImh0bWwiLHtsYW5nOiJlbiIsc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nOiEwLGNoaWxkcmVuOlsoMCxzLmpzeHMpKCJoZWFkIix7Y2hpbGRyZW46WygwLHMuanN4KSgidGl0bGUiLHtjaGlsZHJlbjoiRGFzaCJ9KSwoMCxzLmpzeCkoIm1ldGEiLHtuYW1lOiJhcHBsZS1tb2JpbGUtd2ViLWFwcC10aXRsZSIsY29udGVudDoiRGFzaCJ9KV19KSwoMCxzLmpzeCkoImJvZHkiLHtjbGFzc05hbWU6KDAsUi5jbikoIm1pbi1oLXNjcmVlbiBiZy1iYWNrZ3JvdW5kIGFudGlhbGlhc2VkIiksY2hpbGRyZW46KDAscy5qc3hzKSgibWFpbiIse2NoaWxkcmVuOlsoMCxzLmpzeCkoImRpdiIse2NsYXNzTmFtZToidy1zY3JlZW4gaC1zY3JlZW4iLGNoaWxkcmVuOigwLHMuanN4KShlYSx7YXR0cmlidXRlOiJjbGFzcyIsZGVmYXVsdFRoZW1lOiJzeXN0ZW0iLGVuYWJsZVN5c3RlbTohMCxkaXNhYmxlVHJhbnNpdGlvbk9uQ2hhbmdlOiEwLGNoaWxkcmVuOigwLHMuanN4KShlYyx7Y2hpbGRyZW46KDAscy5qc3gpKCJkaXYiLHtjbGFzc05hbWU6ImZsZXggZmxleC1yb3cgaC1zY3JlZW4gdy1zY3JlZW4iLGNoaWxkcmVuOnR9KX0pfSl9KSwoMCxzLmpzeCkodi54Nyx7fSldfSl9KV19KX19LDYzMzQwOmZ1bmN0aW9uKCl7fX0sZnVuY3Rpb24oZSl7ZS5PKDAsWzM1NCwyMTcsMzU1LDc2NCw1OTYsNjY1LDczNiw3NDRdLGZ1bmN0aW9uKCl7cmV0dXJuIGUoZS5zPTk4MTYxKX0pLF9OX0U9ZS5PKCl9XSk7",    //
     "application/javascript", //
     "/_next/static/chunks/app/layout-c88b67b275763973.js/", //
};
}
